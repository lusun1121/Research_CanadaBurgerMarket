{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NoZ_simulate","provenance":[],"collapsed_sections":["cewYW3-uOLEv","QJGe-TTk1HO0","56AyHuDR5D3G","M9P7UsHY5BkW","JmUXfH2OUl3P"],"authorship_tag":"ABX9TyPns4NMhUeN4ihjnVWehFSK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","file_name = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/CODE/bky-code/TranslatePython/'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WRLEBrIlwtiv","executionInfo":{"status":"ok","timestamp":1654202844320,"user_tz":300,"elapsed":914,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"20332468-0067-4ff5-ef90-0e99558e4494"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["#function 1"],"metadata":{"id":"cewYW3-uOLEv"}},{"cell_type":"markdown","source":["sureg.m"],"metadata":{"id":"I9Q4cfmkRpQ4"}},{"cell_type":"code","source":["import numpy as np\n","def sureg(X,lagX):\n","  #% Generate column of ones for constant.\n","  nobs = len(X)\n","  neqs = len(X.T)\n","  #% Vector of ones for the constant.\n","  o = np.ones([nobs,1])\n","  #% Reshape the dependent variables, and its lag.\n","  y = np.reshape(X.T,nobs*neqs)\n","  M = np.hstack([lagX[:,0:neqs],o])\n","  zM = np.zeros(M.shape)\n","  A = np.vstack([np.hstack([M, zM, zM, zM]),\n","       np.hstack([zM, M, zM, zM]),\n","       np.hstack([zM, zM, M, zM]),\n","       np.hstack([zM, zM, zM, M])])\n","  #% SUR regression\n","  bOLS = np.linalg.inv(A.T.dot(A)).dot(A.T).dot(y)\n","  #% Calculate the residuals.\n","  u = y - A.dot(bOLS)\n","  #% Compute SUR residuals.\n","  emat = np.zeros([nobs,neqs])#;\n","  #% Parse out the residuals based on equation.\n","  for i in range(neqs):\n","      emat[:,i] = u[nobs*i:nobs*(i+1)]\n","  #% Compute SUR sigma matrix.\n","  sigma = np.zeros([neqs,neqs])#;\n","  for i in range(neqs):\n","    for j in range(i,neqs):\n","        sigma[i,j] = np.sum(emat[:,i]*emat[:,j])/nobs\n","        if j > 0:\n","            sigma[j,i] = sigma[i,j]\n","  sigmai = np.linalg.inv(sigma)\n","  nx = neqs * len(A.T)\n","  #% compute sur var-cov matrix\n","  xx = np.zeros([nx,nx])#;\n","  for i in range(neqs):\n","    for j in range(neqs):\n","      xx = np.kron(sigmai,M.T.dot(M))\n","  #% Find inverse of var-cov matrix for inference.\n","  xxi = np.linalg.inv(xx)\n","  #% Compute standard errors from the SUR regression.\n","  vcov = np.diag(xxi)\n","  std = vcov**(1/2)\n","  #print(bOLS.shape,std.shape)\n","  #% Compile the results for the parameter estimates and standard errors.\n","  results = np.stack([bOLS, std],axis=1)\n","  #% Calculate the variance matrix for the errors.\n","  sigma = np.cov(emat.T)\n","  #print(np.cov(emat.T))\n","\n","  return results, sigma"],"metadata":{"id":"dm2SMxAERt4a","executionInfo":{"status":"ok","timestamp":1654202845123,"user_tz":300,"elapsed":165,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["## sur.m"],"metadata":{"id":"ijptvzW4OVO9"}},{"cell_type":"code","source":["def sur(data):\n","  # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","  # % Data set-up step.                                         %\n","  # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","  #% Parse out the data.\n","  time         = data[:,0]#           % Year.\n","  numAW        = data[:,1]#          % Number of A & W outlets in city.\n","  numBK        = data[:,2]#          % Number of Burger King outlets in city.\n","  numHARV      = data[:,3]#        % Number of Harvey's outlets in city.\n","  numMCD       = data[:,4]#         % Number of McDonald's outlets in city.\n","  numWEND      = data[:,5]#        % Number of Wendy's outlets in city.\n","  lagnumAW     = data[:,6]#       % Lagged number of A & W outlets in city.\n","  lagnumBK     = data[:,7]#       % Lagged number of Burger King outlets in city.\n","  lagnumHARV   = data[:,8]#     % Lagged number of Harvey's outlets in city.\n","  lagnumMCD    = data[:,9]#     % Lagged number of McDonald's outlets in city.\n","  lagnumWEND   = data[:,10]#    % Lagged number of Wendy's outlets in city.\n","  population   = data[:,11]#    % Population.\n","  income       = data[:,12]#        % Income.\n","  value        = data[:,13]#         % Property value.\n","  aAW          = data[:,14]#           % Change in A & W outlets.\n","  aBK          = data[:,15]#           % Change in Burger King outlets.\n","  aHARV        = data[:,16]#         % Change in Harvey's outlets.\n","  aMCD         = data[:,17]#          % Change in McDonald's outlets.\n","  aWEND        = data[:,18]#         % Change in Wendy's outlets.\n","  cityindex    = data[:,19]#     % Index for city.\n","  timeindex    = data[:,20]#     % Index for time.\n","  lagnum2AW    = data[:,21]#     % Squared lagged number of A & W outlets in city.\n","  lagnum2BK    = data[:,22]#     % Squared lagged number of Burger King outlets in city.\n","  lagnum2HARV  = data[:,23]#   % Squared lagged number of Harvey's outlets in city.\n","  lagnum2MCD   = data[:,24]#    % Squared lagged number of McDonald's outlets in city.\n","  lagnum2WEND  = data[:,25]#   % Squared lagged number of Wendy's outlets in city.\n","  lagtotalAW   = data[:,26]#    % National level of A & W stores.\n","  lagtotalBK   = data[:,27]#    % National level of Burger King stores.\n","  lagtotalHARV = data[:,28]#  % National level of Harvey's stores.\n","  lagtotalMCD  = data[:,29]#   % National level of McDonald's stores.\n","  lagtotalWEND = data[:,30]#  % National level of Wendy's stores.\n","  lagtotal2AW  = data[:,31]#   % Squared national level of A & W stores.\n","  lagtotal2BK  = data[:,32]#   % Squared national level of Burger King stores.\n","  lagtotal2HARV= data[:,33]# % Squared national level of Harvey's stores.\n","  lagtotal2MCD = data[:,34]#  % Squared national level of McDonald's stores.\n","  lagtotal2WEND= data[:,35]# % Squared national level of Wendy's stores.\n","\n","  #% Variables used for VAR regression.\n","  lagpopulation= data[:,36]#\n","  lagincome    = data[:,37]#\n","  lagvalue     = data[:,38]#\n","  totalAW      = data[:,39]#\n","  totalBK      = data[:,40]#\n","  totalHARV    = data[:,41]#\n","  totalMCD     = data[:,42]#\n","  totalWEND    = data[:,43]#\n","  minwage      = data[:,46]#\n","  lagminwage   = data[:,47]#\n","\n","  #% Create new state variables.\n","  lagcityotherAW = lagnumBK + lagnumHARV + lagnumMCD + lagnumWEND#;    % Lagged number of A & W's competitors in same city.\n","  lagcityotherBK = lagnumAW + lagnumHARV + lagnumMCD + lagnumWEND#;    % Lagged number of Burger King's competitors in same city.\n","  lagcityotherHARV = lagnumAW + lagnumBK + lagnumMCD + lagnumWEND#;    % Lagged number of Harvey's competitors in same city.\n","  lagcityotherMCD = lagnumAW + lagnumBK + lagnumHARV + lagnumWEND#;    % Lagged number of McDonald's competitors in same city.\n","  lagcityotherWEND = lagnumAW + lagnumBK + lagnumHARV + lagnumMCD#;    % Lagged number of Wendy's competitors in same city.\n","  lagcityother2AW = lagcityotherAW**2#;                                % Squared number of A & W's competitors in same city.\n","  lagcityother2BK = lagcityotherBK**2#;                                % Squared number of Burger King's competitors in same city.\n","  lagcityother2HARV = lagcityotherHARV**2#;                            % Squared number of Harvey's competitors in same city.\n","  lagcityother2MCD = lagcityotherMCD**2#;                              % Squared number of McDonald's competitors in same city.\n","  lagcityother2WEND = lagcityotherWEND**2#;                            % Squared number of Wendy's competitors in same city.\n","  lagtotalotherAW = lagtotalBK + lagtotalHARV + lagtotalMCD + lagtotalWEND#;   % Lagged number of A & W's competitors in country.\n","  lagtotalotherBK = lagtotalAW + lagtotalHARV + lagtotalMCD + lagtotalWEND#;   % Lagged number of Burger King's competitors in country.\n","  lagtotalotherHARV = lagtotalAW + lagtotalBK + lagtotalMCD + lagtotalWEND#;   % Lagged number of Harvey's competitors in country.\n","  lagtotalotherMCD = lagtotalAW + lagtotalBK + lagtotalHARV + lagtotalWEND#;   % Lagged number of McDonald's competitors in country.\n","  lagtotalotherWEND = lagtotalAW + lagtotalBK + lagtotalHARV + lagtotalMCD#;   % Lagged number of Wendy's competitors in country.\n","  lagtotalother2AW = lagtotalotherAW**2#;                                      % Squared number of A & W's competitors in country.\n","  lagtotalother2BK = lagtotalotherBK**2#;                                      % Squared number of Burger King's competitors in country.\n","  lagtotalother2HARV = lagtotalotherHARV**2#;                                  % Squared number of Harvey's competitors in country.\n","  lagtotalother2MCD = lagtotalotherMCD**2#;                                    % Squared number of McDonald's competitors in country.\n","  lagtotalother2WEND = lagtotalotherWEND**2#;                                  % Squared number of Wendy's competitors in country.\n","  mt = len(data)#                                                          % Total number of observations.\n","\n","  #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","\n","  #% Reshape variables to remove first period for each market\n","  years = 36#;                         % Number of years.\n","  markets = int(len(data) / years)#;     % Number of markets.\n","\n","  popr = np.reshape(population, [markets,years]).T#\n","  incr = np.reshape(income, [markets,years]).T#\n","  valr = np.reshape(value, [markets,years]).T#\n","  minwr = np.reshape(minwage, [markets,years]).T#\n","  lagpopr = np.reshape(lagpopulation,[markets,years]).T#\n","  lagincr = np.reshape(lagincome, [markets,years]).T#\n","  lagvalr = np.reshape(lagvalue, [markets,years]).T#\n","  lagminwr = np.reshape(lagminwage,[markets,years]).T#\n","\n","  popr = popr[1:,:]#\n","  incr = incr[1:,:]#\n","  valr = valr[1:,:]#\n","  minwr = minwr[1:,:]#\n","  lagpopr = lagpopr[1:,:]#\n","  lagincr = lagincr[1:,:]#\n","  lagvalr = lagvalr[1:,:]#\n","  lagminwr = lagminwr[1:,:]#\n","\n","  pop = np.reshape(popr.T, markets*(years-1))#\n","  inc = np.reshape(incr.T, markets*(years-1))#\n","  val = np.reshape(valr.T, markets*(years-1))#\n","  minw = np.reshape(minwr.T,markets*(years-1))#\n","  lagpop = np.reshape(lagpopr.T, markets*(years-1))#\n","  laginc = np.reshape(lagincr.T, markets*(years-1))#\n","  lagval = np.reshape(lagvalr.T, markets*(years-1))#\n","  lagminw = np.reshape(lagminwr.T,markets*(years-1))#\n","\n","  #% Specify the exogenous variables for SUR estimation.\n","  Y = np.stack([pop, inc, val, minw],axis=1)\n","  lagY = np.stack([lagpop, laginc, lagval, lagminw],axis=1)\n","\n","  results, sigmaX = sureg(Y,lagY)#\n","  rhoX = results[:,0]#\n","  se = results[:,1]#\n","  #print(results)\n","  return rhoX, sigmaX, se"],"metadata":{"id":"PpxNfREdOKey","executionInfo":{"status":"ok","timestamp":1654202845415,"user_tz":300,"elapsed":152,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["# function"],"metadata":{"id":"guL9dkhR26O8"}},{"cell_type":"markdown","source":["##probZ.m"],"metadata":{"id":"QJGe-TTk1HO0"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.stats import norm\n","def probZ(theta, y, X):\n","  #% Construct a grid of cutoffs.\n","  grid = [-5, -2, -1, 0, 1, 2, 5]\n","  ng = len(grid)\n","\n","  #% Dimensions\n","  numplayers = 5#                         % Number of firms.\n","  nx = len(X.T)#                         % Number of state variables.\n","  numpar = len(theta)#                 % Number of parameters.\n","  nbeta = int(numpar / numplayers - ng)#       % Number of beta parameters per firm.\n","\n","  #% Parsing out the parameter vector.\n","  betaAW = theta[0:nbeta]\n","  cutoffAW = theta[nbeta:nbeta+ng]\n","  betaBK = theta[nbeta+ng:2*nbeta+ng]\n","  cutoffBK = theta[2*nbeta+ng:2*nbeta+2*ng]\n","  betaHARV = theta[2*nbeta+2*ng:3*nbeta+2*ng]\n","  cutoffHARV = theta[3*nbeta+2*ng:3*nbeta+3*ng]\n","  betaMCD = theta[3*nbeta+3*ng:4*nbeta+3*ng]\n","  cutoffMCD = theta[4*nbeta+3*ng:4*nbeta+4*ng]\n","  betaWEND = theta[4*nbeta+4*ng:5*nbeta+4*ng]\n","  cutoffWEND = theta[5*nbeta+4*ng:5*nbeta+5*ng]\n","  beta = np.hstack([ betaAW, betaBK, betaHARV, betaMCD, betaWEND]).reshape([-1,1])\n","\n","  #% Calculating contribution of state variables to the latent payoff.\n","  Xb = X.dot(beta)\n","  N = int(len(Xb) /5)\n","  #print(Xb.shape)\n","  XbAW = Xb[0:N,:]\n","  XbBK = Xb[N:2*N,:]\n","  XbHARV = Xb[2*N:3*N,:]\n","  XbMCD = Xb[3*N:4*N,:]\n","  XbWEND = Xb[4*N:5*N,:]\n","\n","  #% Get chain specific dependent variables.\n","  yAW = y[0]\n","  yBK = y[1]\n","  yHARV = y[2]\n","  yMCD = y[3]\n","  yWEND = y[4]\n","\n","  #% First loop goes through each possible category.\n","  for i in range(ng+1):\n","      if i == 0:\n","          if (yAW <= grid[0]):\n","              FAW = norm.cdf(cutoffAW[0] - XbAW)\n","          if (yBK <= grid[0]):\n","              FBK = norm.cdf(cutoffBK[0] - XbBK)\n","          if (yHARV <= grid[0]):\n","              FHARV = norm.cdf(cutoffHARV[0] - XbHARV)\n","          if (yMCD <= grid[0]):\n","              FMCD = norm.cdf(cutoffMCD[0] - XbMCD)\n","          if (yWEND <= grid[0]):\n","              FWEND = norm.cdf(cutoffWEND[0] - XbWEND)\n","      elif i == ng:\n","          if (yAW > grid[ng-1]):\n","              FAW = 1 - norm.cdf(cutoffAW[ng-1] - XbAW)\n","          if (yBK > grid[ng-1]):\n","              FBK = 1 - norm.cdf(cutoffBK[ng-1] - XbBK)\n","          if (yHARV > grid[ng-1]):\n","              FHARV = 1 - norm.cdf(cutoffHARV[ng-1] - XbHARV)\n","          if (yMCD > grid[ng-1]):\n","              FMCD = 1 - norm.cdf(cutoffMCD[ng-1] - XbMCD)     \n","          if (yWEND > grid[ng-1]):\n","              FWEND = 1 - norm.cdf(cutoffWEND[ng-1] - XbWEND)\n","          \n","      else:\n","          if (yAW > grid[i-1] and yAW <= grid[i]):\n","              FAW = norm.cdf(cutoffAW[i] - XbAW) - norm.cdf(cutoffAW[i-1] - XbAW)\n","          if (yBK > grid[i-1] and yBK <= grid[i]):\n","              FBK = norm.cdf(cutoffBK[i] - XbBK) - norm.cdf(cutoffBK[i-1] - XbBK)\n","          if (yHARV > grid[i-1] and yHARV <= grid[i]):\n","              FHARV = norm.cdf(cutoffHARV[i] - XbHARV) - norm.cdf(cutoffHARV[i-1] - XbHARV)\n","          if (yMCD > grid[i-1] and yMCD <= grid[i]):\n","              FMCD = norm.cdf(cutoffMCD[i] - XbMCD) - norm.cdf(cutoffMCD[i-1] - XbMCD)\n","          if (yWEND > grid[i-1] and yWEND <= grid[i]):\n","              FWEND = norm.cdf(cutoffWEND[i] - XbWEND) - norm.cdf(cutoffWEND[i-1] - XbWEND)\n","  Fy = np.hstack([FAW, FBK, FHARV, FMCD, FWEND])\n","  #print(Fy)\n","  return Fy.T\n"],"metadata":{"id":"BQRTFmfK1Jgl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##getparam1.m"],"metadata":{"id":"56AyHuDR5D3G"}},{"cell_type":"code","source":["  # % Ordered probit parameters ($\\theta$)\n","  # %\n","  # % * Coefficients for each firm:\n","  # %\n","  # %     1. Population\n","  # %     2. Income\n","  # %     3. Property value\n","  # %     4. Grey Cup host\n","  # %     5. Smoking regulation\n","  # %     6. Minimum wage\n","  # %     7. Population * Population\n","  # %     8. Population * Income\n","  # %     9. Population * Property value\n","  # %     10. Population * Minimum wage\n","  # %     11. Income * Income\n","  # %     12. Income * Property value\n","  # %     13. Income * Minimum wage\n","  # %     14. Property value * Property value\n","  # %     15. Property value * Minimum wage\n","  # %     16. Minimum wage * Minimum wage\n","  # %     17. Z\n","  # %     18. Z * Population\n","  # %     19. Z * Income\n","  # %     20. Z * Property value\n","  # %     21. Z * Minimum wage\n","  # %     22. Rival Z\n","  # %     23. Rival Z * Population\n","  # %     24. Rival Z * Income\n","  # %     25. Rival Z * Property value\n","  # %     26. Rival Z * Minimum wage\n","  # %     27. Lagged N\n","  # %\n","  # % * Cutoffs for each firm (ng of them).\n","  # %\n","  # % Overall length of $\\theta$: (27+ng) * numplayers."],"metadata":{"id":"piYBXgiK5sLJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def getparam1(param, specification):\n","\n","  #% Constants\n","  numplayers = 5#;                         % Number of players\n","  nummarkets = 31#;                        % Number of markets\n","  ng = 7#;                                 % Number of ordered probit cutoffs\n","\n","  # % Lengths of some internal parameter vectors are fixed\n","  numtheta_total = 27\n","  nummu = numplayers\n","  numdelta = numplayers\n","  numeta = nummarkets\n","  idx = 0;\n","\n","  #% Retrieve parameters depending on specification\n","  if  specification == 1:\n","\n","      #% Baseline homogeneous specification (57 parameters).\n","      #% No latent variable, but firm and city fixed effects are included (through Z_imt).\n","      # if (size(param, 1) ~= 50 + ng)\n","      #     error('Incorrect number of first stage parameters (specification 3)!')\n","      # end\n","\n","      #% Ordered probit coefficients ($\\theta$)\n","      numtheta_coeff = 16\n","      numtheta_zeros = numtheta_total - numtheta_coeff - 1\n","      theta_coeff = np.hstack([ param[0:numtheta_coeff], 1, np.zeros(numtheta_zeros) ])\n","      idx = idx + numtheta_coeff # 16\n","\n","      #% Ordered probit cutoffs ($\\theta$)\n","      numtheta_cutoff = ng\n","      theta_cutoff = param[idx:idx+numtheta_cutoff] #7\n","      idx = idx + numtheta_cutoff #16+7\n","\n","      #% Combine to build theta vector\n","      theta = np.hstack([ theta_coeff, theta_cutoff ]) #16+1+10 + 7\n","      theta = np.hstack([ theta, theta, theta, theta, theta ])\n","\n","      #% Firm-specific drift parameters ($\\mu$) (AW = 0)\n","      mu = np.hstack([ 0, param[idx:idx+numplayers-1] ]) # \n","      idx = idx + (numplayers - 1)\n","\n","      #% Firm-specific autoregressive parameters ($\\delta$)\n","      delta = np.zeros(5)#;\n","\n","      #% Remaining firm-specific coefficients in Z process ($\\beta$)\n","      beta = np.zeros(6)#;\n","      beta = np.hstack([ beta, beta, beta, beta, beta ])\n","\n","      #% City fixed effects in Z process ($\\eta)\n","      eta = np.hstack([ 0, param[idx:idx+nummarkets-1] ])\n","      idx = idx + (nummarkets - 1)\n","\n","  # elif specification == 2\n","\n","  #     % Baseline homogeneous specification with Z interactions (72 parameters).\n","  #     % No spillovers, but firm and city fixed effects are included.\n","\n","  #     if (size(param, 1) ~= 65 + ng)\n","  #         error('Incorrect number of first stage parameters (specification 16)!')\n","  #     end\n","\n","  #     % Ordered probit coefficients ($\\theta$)\n","  #     numtheta_coeff = 16;\n","  #     numtheta_coeff2 = 9;\n","  #     theta_coeff = [ param(1:numtheta_coeff]# 1;\n","  #                     param(numtheta_coeff+1:numtheta_coeff+numtheta_coeff2]# 0 ];\n","  #     idx = idx + numtheta_coeff + numtheta_coeff2;\n","\n","  #     % Ordered probit cutoffs ($\\theta$)\n","  #     numtheta_cutoff = ng;\n","  #     theta_cutoff = param(idx+1:idx+numtheta_cutoff]#\n","  #     idx = idx + numtheta_cutoff;\n","\n","  #     % Combine to build theta vector\n","  #     theta = [ theta_coeff; theta_cutoff ];\n","  #     theta = [ theta; theta; theta; theta; theta; ];\n","\n","  #     % Firm-specific drift parameters ($\\mu$) (AW = 0)\n","  #     mu = [ 0; param(idx+1:idx+numplayers-1) ];\n","  #     idx = idx + (numplayers - 1]#\n","\n","  #     % Firm-specific autoregressive parameters ($\\delta$)\n","  #     delta = abs(param(idx+1:idx+numplayers)]#\n","  #     idx = idx + numplayers;\n","\n","  #     % Remaining firm-specific coefficients in Z process ($\\beta$)\n","  #     numbeta = 1;\n","  #     tmp = param(idx+1]#\n","  #     beta = [ 0; 0; 0; 0; 0; abs(tmp) ];\n","  #     beta = [ beta; beta; beta; beta; beta ];\n","  #     idx = idx + numbeta;\n","\n","  #     % City fixed effects in Z process ($\\eta)\n","  #     eta = [ 0; param(idx+1:idx+nummarkets-1]# ];\n","  #     idx = idx + (nummarkets - 1]#\n","\n","  # elif specification == 3\n","\n","  #     % Heterogeneous cubic N specification (91 parameters).\n","  #     % Includes spillovers, rival spillovers, spillover interactions, and\n","  #     % firm and city fixed effects.\n","\n","  #     if (size(param, 1) ~= 84 + ng)\n","  #         error('Incorrect number of first stage parameters (specification 14)!')\n","  #     end\n","\n","  #     % Ordered probit coefficients ($\\theta$)\n","  #     numtheta_coeff = 16;\n","  #     numtheta_coeff2 = 9;\n","  #     theta_coeff = [ param(1:numtheta_coeff]# 1;\n","  #                     param(numtheta_coeff+1:numtheta_coeff+numtheta_coeff2]# 0 ];\n","  #     idx = idx + numtheta_coeff + numtheta_coeff2;\n","\n","  #     % Ordered probit cutoffs ($\\theta$)\n","  #     numtheta_cutoff = ng;\n","  #     theta_cutoff = param(idx+1:idx+numtheta_cutoff]#\n","  #     idx = idx + numtheta_cutoff;\n","\n","  #     % Combine to build theta vector\n","  #     theta = [ theta_coeff; theta_cutoff ];\n","  #     theta = [ theta; theta; theta; theta; theta; ];\n","\n","  #     % Firm-specific drift parameters ($\\mu$) (AW = 0)\n","  #     mu = [ 0; param(idx+1:idx+numplayers-1) ];\n","  #     idx = idx + (numplayers - 1]#\n","\n","  #     % Firm-specific autoregressive parameters ($\\delta$)\n","  #     delta = abs(param(idx+1:idx+numplayers)]#\n","  #     idx = idx + numplayers;\n","\n","  #     % Remaining firm-specific coefficients in Z process ($\\beta$)\n","  #     numbeta = 4 * numplayers;\n","  #     tmp = param(idx+1:idx+numbeta]#\n","  #     beta = [ 0; 0; tmp[0];  tmp(2]#  tmp(3]#  abs(tmp(4)]#\n","  #             0; 0; tmp(5]#  tmp(6]#  tmp(7]#  abs(tmp(8)]#\n","  #             0; 0; tmp(9]#  tmp(10]# tmp(11]# abs(tmp(12)]#\n","  #             0; 0; tmp(13]# tmp(14]# tmp(15]# abs(tmp(16)]#\n","  #             0; 0; tmp(17]# tmp(18]# tmp(19]# abs(tmp(20)]# ];\n","  #     idx = idx + numbeta;\n","\n","  #     % City fixed effects in Z process ($\\eta)\n","  #     eta = [ 0; param(idx+1:idx+nummarkets-1]# ];\n","  #     idx = idx + (nummarkets - 1]#\n","\n","  return theta, mu, delta, beta, eta\n"],"metadata":{"id":"sCLnpGPh5Gbm"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##loglik.m"],"metadata":{"id":"M9P7UsHY5BkW"}},{"cell_type":"code","source":["from numpy.core.fromnumeric import reshape\n","import numpy as np\n","def loglik(param, data, stdX, specification, numparticles, myseed):\n","  years = 36\n","  nummarkets = int(len(data)/years)\n","  players = 5 #rng(myseed]#                        % Set the seed.\n","  index = np.zeros(numparticles)#[1:1:numparticles];         % Index for each particle simulation draw for a given market-time.\n","\n","  # Parsing out the parameters.\n","  theta, mu, delta, beta, eta = getparam1(param, specification)\n","\n","  #% Initialize matrix which stores log-likelhood for each market-time.\n","  ll = np.zeros([years,nummarkets])\n","\n","  #% Loop over all markets.\n","  for market in range(nummarkets):\n","\n","      #% Parse out the data based on market index.\n","      dataN = data[market*years:(market+1)*years,:]\n","\n","      #% Parse out the data.\n","      time = np.int_(dataN[:,0])#           % Year.\n","      lagnumAW = np.int_(dataN[:,6])#       % Lagged number of A and W outlets in city.\n","      lagnumBK = np.int_(dataN[:,7])#       % Lagged number of Burger King outlets in city.\n","      lagnumHARV = np.int_(dataN[:,8])#     % Lagged number of Harvey's outlets in city.\n","      lagnumMCD = np.int_(dataN[:,9])#     % Lagged number of McDonald's outlets in city.\n","      lagnumWEND = np.int_(dataN[:,10])#    % Lagged number of Wendy's outlets in city.\n","      population = dataN[:,11]#    % Population.\n","      income = dataN[:,12]#        % Income.\n","      value = dataN[:,13]#         % Property value.\n","      aAW = np.int_(dataN[:,14])#           % Change in A and W outlets.\n","      aBK = np.int_(dataN[:,15])#           % Change in Burger King outlets.\n","      aHARV = np.int_(dataN[:,16])#         % Change in Harvey's outlets.\n","      aMCD = np.int_(dataN[:,17])#          % Change in McDonald's outlets.\n","      aWEND = np.int_(dataN[:,18])#         % Change in Wendy's outlets.\n","      cityindex = np.int_(dataN[:,19])#     % Index for city.\n","      timeindex = np.int_(dataN[:,20])#     % Index for time.\n","\n","      #% Exogenous shock to city's exposure.\n","      greycup = np.int_(dataN[:,44])#              % City hosting CFL Grey Cup.\n","      regulation = np.int_(dataN[:,45])#           % Introduction of smoking regulation.\n","      minwage = dataN[:,46]#              % Minimum wage.\n","      lagminwage = dataN[:,47]#           % Lagged minimum wage.\n","\n","      #% Lagged actions.\n","      lagaAW = np.int_(dataN[:,48])#\n","      lagaBK = np.int_(dataN[:,49])#\n","      lagaHARV = np.int_(dataN[:,50])#\n","      lagaMCD = np.int_(dataN[:,51])#\n","      lagaWEND = np.int_(dataN[:,52])#\n","\n","      if numparticles > 0:\n","          #% Allocate storage for particles for each market\n","          randparticles = np.zeros([numparticles*years,players])\n","\n","          #% Store simulation draws used for propogating particles\n","          #randepsilons = normrnd(0,1,numparticles*years,players]#\n","          print('need download')\n","      else:\n","          #% Include firm fixed effects via particles\n","          randparticles = np.ones([years, 1]).dot(np.reshape(mu,[1,-1])) + np.reshape(eta[cityindex-1],[-1,1]).dot(np.ones([1,players]))\n","          randepsilons = np.zeros([years,players])\n","\n","      #% Initialize vector of log-likelihoods which will be stored for future use.\n","      lmjointP = np.ones(years)\n","\n","      #% Loop over all 36 years.\n","      for t in range(years):\n","\n","          if numparticles > 0:\n","              o = np.ones([numparticles,1])\n","          else:\n","              o = np.ones([1,1])\n","\n","          lagnum = np.stack([[lagnumAW[t]], [lagnumBK[t]], [lagnumHARV[t]], [lagnumMCD[t]], [lagnumWEND[t]]],axis=1)\n","          lagN = np.kron(lagnum,o)\n","\n","          if t == 0:\n","              if numparticles > 0:\n","                  print('need download')\n","                  #% Draw Z's from initial distribution in initial time period.\n","                  #randparticles(1:numparticles,:) = normrnd(0,1,numparticles,players)\n","          else:\n","              #% Transition Z's in subsequent time periods.\n","              if numparticles > 0:\n","                  lagact = np.stack([[lagaAW[t]], [lagaBK[t]], [lagaHARV[t]], [lagaMCD[t]], [lagaWEND[t]]],axis=1)\n","                  lagA = np.kron(lagact,o)\n","                  Cind = np.kron(cityindex[t],o)\n","                  re = randepsilons[t*numparticles:(t+1)*numparticles,:]\n","                  print('need download')\n","                  #Zhat  = draw_Z(lagZ, lagA, lagN, Cind, re, mu, delta, beta, eta, specification]#\n","                  #randparticles((t-1)*numparticles+1:t*numparticles,:) = [Zhat(:,1), Zhat(:,2), Zhat(:,3), Zhat(:,4), Zhat(:,5)]\n","\n","          #% Store current swarm\n","          if numparticles > 0:\n","              rp = randparticles[t*numparticles:(t+1)*numparticles,:]\n","          else:\n","              rp = randparticles[t,:].reshape([1,-1])\n","\n","          #% Current actions\n","          y = np.hstack([aAW[t], aBK[t],aHARV[t], aMCD[t], aWEND[t]])\n","\n","          #% Rescale variables\n","          pop = population[t] / stdX[11]\n","          inc = income[t] / stdX[12]\n","          val = value[t] / stdX[13]\n","          host = greycup[t]\n","          smoke = regulation[t]\n","          minw = minwage[t] / stdX[46]\n","\n","          #% Stack the state variables for each simulation draw.\n","          X = np.hstack([ pop, inc, val, host, smoke, minw, \n","                pop * pop, pop * inc, pop * val, pop * minw, \n","                inc * inc, inc * val, inc * minw, \n","                val * val, val * minw, \n","                minw * minw ])\n","          X_interact = np.hstack([ 1, pop, inc, val, minw ]).reshape([1,-1])\n","          Xo = np.kron(X.reshape([1,-1]),o)\n","          X_AW = np.hstack([Xo, rp[:,0].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[1,2,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,0].reshape([-1,1]) ])\n","          X_BK = np.hstack([Xo, rp[:,1].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,2,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,1].reshape([-1,1]) ])\n","          X_HARV =np.hstack( [Xo, rp[:,2].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,2].reshape([-1,1]) ])\n","          X_MCD = np.hstack([Xo, rp[:,3].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,2,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,3].reshape([-1,1]) ])\n","          X_WEND = np.hstack([Xo, rp[:,4].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,2,3]], 1).reshape([-1,1]).dot(X_interact), lagN[:,4].reshape([-1,1]) ])\n","\n","          #% Stack the state variables for each simulation draw.\n","          XM = np.zeros(X_AW.shape)\n","          M = np.vstack([np.hstack([X_AW, XM, XM, XM, XM]),\n","               np.hstack([XM, X_BK, XM, XM, XM]),\n","               np.hstack([XM, XM, X_HARV, XM, XM]),\n","               np.hstack([XM, XM, XM, X_MCD, XM]),\n","               np.hstack([XM, XM, XM, XM, X_WEND])])\n","\n","          #% Obtain the probabilities for each simulation draw.\n","          #print(market)\n","          P = probZ(theta,y,M)\n","          #print(P.shape)\n","          if numparticles > 0:\n","              PAW = P[0:numparticles,:]\n","              PBK = P[numparticles:2*numparticles,:]\n","              PHARV = P[2*numparticles:3*numparticles,:]\n","              PMCD = P[3*numparticles:4*numparticles,:]\n","              PWEND = P[4*numparticles:5*numparticles,:]\n","          else:\n","              PAW = P[0,:]\n","              PBK = P[1,:]\n","              PHARV = P[2,:]\n","              PMCD = P[3,:]\n","              PWEND = P[4,:]\n","\n","          #% Calculate the joint probability.\n","          if numparticles > 0:\n","              jointP = PAW * PBK * PHARV * PMCD * PWEND;\n","              pbound = 0.000000001 #* np.ones([len(jointP),1])                                      #% Establish bound.\n","              jointP = np.int_(jointP > 0.000000001) * jointP + np.int_(jointP < 0.000000001) * pbound#;   % Use bound if underflow.\n","\n","              #% Average the likelihood across simulations and store into vector.\n","              mjointP = np.mean(jointP)#;\n","              lmjointP[t] = np.log(mjointP)#;\n","\n","              #% Resampling from Z's in time t.\n","              print('need download')\n","              #rindex = randsample(index, numparticles, true, jointP]#         % Draw the index.\n","              #lagZ = rp(rindex,:]#                                            % Use the resample index to get new Z's.\n","          else:\n","              lmjointP[t] = np.log(PAW) + np.log(PBK) + np.log(PHARV) + np.log(PMCD) + np.log(PWEND)\n","\n","\n","      #% Store the vector of log-likelihoods over time for each market iteration.\n","      #print(lmjointP.shape)\n","      ll[:,market] = lmjointP\n","\n","  #% Sums the log-likelihoods across all markets and time.\n","  sll = -np.sum(np.real(ll))\n","\n","\n","  return sll\n"],"metadata":{"id":"kBK6oQNj28uc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# function 2"],"metadata":{"id":"9tHUaM8DJyJI"}},{"cell_type":"markdown","source":["##draw_Z.m"],"metadata":{"id":"JmUXfH2OUl3P"}},{"cell_type":"code","source":["def draw_Z(lagZ, lagA, lagN, cityindex, epsilon, mu, delta, beta, eta, specification):\n","  #% Dimensions\n","  numpaths = len(lagZ)\n","  o = np.ones([numpaths, 1])\n","  #% Parse out the lagged variables.\n","  lagZAW = lagZ[:,0]\n","  lagZBK = lagZ[:,1]\n","  lagZHARV = lagZ[:,2]\n","  lagZMCD = lagZ[:,3]\n","  lagZWEND = lagZ[:,4]\n","  lagAAW = lagA[:,0]\n","  lagABK = lagA[:,1]\n","  lagAHARV = lagA[:,2]\n","  lagAMCD = lagA[:,3]\n","  lagAWEND = lagA[:,4]\n","  lagNAW = lagN[:,0]\n","  lagNBK = lagN[:,1]\n","  lagNHARV = lagN[:,2]\n","  lagNMCD = lagN[:,3]\n","  lagNWEND = lagN[:,4]\n","  #% Parse out the iid draws.\n","  epsilonAW = epsilon[:,0]\n","  epsilonBK = epsilon[:,1]\n","  epsilonHARV = epsilon[:,2]\n","  epsilonMCD = epsilon[:,3]\n","  epsilonWEND = epsilon[:,4]\n","  #% City fixed effects.\n","  ce = eta[cityindex]\n","  #% Parse out firm-specific intercepts.\n","  muAW = mu[0] * o\n","  muBK = mu[1]  * o\n","  muHARV = mu[2] * o\n","  muMCD = mu[3]  * o\n","  muWEND = mu[4]  * o\n","  #% Parse out firm-specific deltas and drifts.\n","  deltaAW = delta[0]\n","  deltaBK = delta[1]\n","  deltaHARV = delta[2]\n","  deltaMCD = delta[3]\n","  deltaWEND = delta[4]\n","  #% Parse out the firm-specific betas.\n","  beta1AW = beta[0]\n","  beta2AW = beta[1]\n","  beta3AW = beta[2]\n","  beta4AW = beta[3]\n","  beta5AW = beta[4]\n","  sigmaAW = beta[5]\n","  beta1BK = beta[6]\n","  beta2BK = beta[7]\n","  beta3BK = beta[8]\n","  beta4BK = beta[9]\n","  beta5BK = beta[10]\n","  sigmaBK = beta[11]\n","  beta1HARV = beta[12]\n","  beta2HARV = beta[13]\n","  beta3HARV = beta[14]\n","  beta4HARV = beta[15]\n","  beta5HARV = beta[16]\n","  sigmaHARV = beta[17]\n","  beta1MCD = beta[18]\n","  beta2MCD = beta[19]\n","  beta3MCD = beta[20]\n","  beta4MCD = beta[21]\n","  beta5MCD = beta[22]\n","  sigmaMCD = beta[23]\n","  beta1WEND = beta[24]\n","  beta2WEND = beta[25]\n","  beta3WEND = beta[26]\n","  beta4WEND = beta[27]\n","  beta5WEND = beta[28]\n","  sigmaWEND = beta[29]\n","  #% Generate the new Z's.\n","  spilloverAW   = (1*(lagAAW  > 0))*(beta1AW  * lagAAW)  + (1*(lagAAW  < 0))*(beta2AW  * lagAAW)  + beta3AW  * lagNAW  + beta4AW  * (lagNAW**2  )+ beta5AW  * (lagNAW**3)\n","  spilloverBK   = (1*(lagABK  > 0))*(beta1BK  * lagABK)  + (1*(lagABK  < 0))*(beta2BK  * lagABK)  + beta3BK  * lagNBK  + beta4BK  * (lagNBK**2  )+ beta5BK  * (lagNBK**3)\n","  spilloverHARV = (1*(lagAHARV> 0))*(beta1HARV* lagAHARV)+ (1*(lagAHARV< 0))*(beta2HARV* lagAHARV)+ beta3HARV* lagNHARV+ beta4HARV* (lagNHARV**2)+ beta5HARV* (lagNHARV**3)\n","  spilloverMCD  = (1*(lagAMCD > 0))*(beta1MCD * lagAMCD) + (1*(lagAMCD < 0))*(beta2MCD * lagAMCD) + beta3MCD * lagNMCD + beta4MCD * (lagNMCD**2 )+ beta5MCD * (lagNMCD**3)\n","  spilloverWEND = (1*(lagAWEND> 0))*(beta1WEND* lagAWEND)+ (1*(lagAWEND< 0))*(beta2WEND* lagAWEND)+ beta3WEND* lagNWEND+ beta4WEND* (lagNWEND**2)+ beta5WEND* (lagNWEND**3)\n","  ZAW = muAW + deltaAW * lagZAW + spilloverAW + ce + sigmaAW * epsilonAW\n","  ZBK = muBK + deltaBK * lagZBK + spilloverBK +ce + sigmaBK * epsilonBK\n","  ZHARV = muHARV + deltaHARV * lagZHARV + spilloverHARV + ce + sigmaHARV * epsilonHARV\n","  ZMCD = muMCD + deltaMCD * lagZMCD + spilloverMCD + ce + sigmaMCD * epsilonMCD\n","  ZWEND = muWEND + deltaWEND * lagZWEND + spilloverWEND + ce + sigmaWEND * epsilonWEND\n","\n","  Zhat = np.stack([ZAW, ZBK, ZHARV, ZMCD, ZWEND],axis=1)\n","  return Zhat\n"],"metadata":{"id":"OAaW6kUBUq8c","executionInfo":{"status":"ok","timestamp":1654206228085,"user_tz":300,"elapsed":132,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["##forwardsim.m"],"metadata":{"id":"OvueYiCrM4Ae"}},{"cell_type":"code","source":["haha = np.arange(8)\n","np.stack([haha,np.ones([8,1]).reshape(-1)],axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"APDMJTNXSsWl","executionInfo":{"status":"ok","timestamp":1654207465419,"user_tz":300,"elapsed":142,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"0e29257c-1a7a-4546-bfbf-a9ca8b34f698"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1.],\n","       [1., 1.],\n","       [2., 1.],\n","       [3., 1.],\n","       [4., 1.],\n","       [5., 1.],\n","       [6., 1.],\n","       [7., 1.]])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["from numpy.core.shape_base import hstack\n","import scipy.io\n","def forwardsim(param, perturb, rhoX, sigmaX, data, stdX, specification, numpaths, numperiods, discount):\n","  #% Settings for simulation.\n","  years = 36#;                         % Number of years.\n","  nummarkets = int(len(data)/years)#;    % Number of markets.\n","  players = 5#;                        % Number of players.\n","  nexogeq = 4#;                        % Number of equations in exogenous SUR process.\n","  numcolumns = 27#;                    % Number of linear coefficients to store.\n","  #% Parse first stage parameters.\n","  theta, mu, delta, beta, eta = getparam1(param, specification)#;\n","  #% Perturb policy parameters.\n","  theta = theta + perturb#;\n","  #% Matrix to store the average of simulated profit streams for a given policy.\n","  APIAW   =np.zeros([nummarkets, numcolumns])\n","  APIBK   =np.zeros([nummarkets, numcolumns])\n","  APIHARV =np.zeros([nummarkets, numcolumns])\n","  APIMCD  =np.zeros([nummarkets, numcolumns])\n","  APIWEND =np.zeros([nummarkets, numcolumns])\n","  #% Useful vectors of ones and zeros\n","  op = np.ones([numpaths, 1])\n","  oc = np.ones([1, numcolumns])\n","  zp = np.zeros([numpaths, 1])\n","  zM = np.zeros([numpaths, nexogeq+1])\n","  #% Loop over all markets.\n","  for market in range(nummarkets):\n","      #% Simulation of paths for each market.\n","      randepsilons = scipy.io.loadmat(file_name+'forwardsim_market'+str(market+1)+'.mat')['randepsilons']#% Draws for the epsilons in Z process.\n","      randu = scipy.io.loadmat(file_name+'forwardsim_market'+str(market+1)+'.mat')['randu']\n","      randexog = scipy.io.loadmat(file_name+'forwardsim_market'+str(market+1)+'.mat')['randexog']#% Generates the distribution of multivariate shocks according to SUR correlation matrix.\n","      #% Parse out the data based on market index.\n","      dataN = data[market*years:(market+1)*years,:]\n","      #% Parse out the data.\n","      time      = dataN[:,0]#;           % Year.\n","      numAW     = dataN[:,1]#;          % Number of A & W outlets in city.\n","      numBK     = dataN[:,2]#;          % Number of Burger King outlets in city.\n","      numHARV   = dataN[:,3]#;        % Number of Harvey's outlets in city.\n","      numMCD    = dataN[:,4]#;         % Number of McDonald's outlets in city.\n","      numWEND   = dataN[:,5]#;        % Number of Wendy's outlets in city.\n","      population= dataN[:,11]#;    % Population.\n","      income    = dataN[:,12]#;        % Income.\n","      value     = dataN[:,13]#;         % Property value.\n","      cityindex = dataN[:,19]#;     % Index for city.\n","      #% Exogenous shock to city's exposure.\n","      greycup = dataN[:,44]#;              % City hosting CFL Grey Cup.\n","      regulation = dataN[:,45]#;           % Introduction of smoking regulation in city.\n","      minwage = dataN[:,46]#;              % Minimum wage.\n","      #% Initialize X.\n","      D = np.array([[population[0]], [income[0]], [value[0]], [minwage[0]]]).T\n","      Xo = np.kron(D,op)\n","      Cind = np.kron(cityindex[0],op)\n","      #% Initialize storage for simulated X, Z, N, and action paths\n","      X = np.zeros([numpaths*numperiods,nexogeq])\n","      randparticles = np.zeros([numpaths*numperiods,players])\n","      lagnum = np.zeros([numpaths*numperiods,players])\n","      lagact = np.zeros([numpaths*numperiods,players])\n","      #% Initialize storage for simulated payoff coefficients\n","      PIAW = np.zeros([numpaths,numcolumns])\n","      PIBK = np.zeros([numpaths,numcolumns])\n","      PIHARV = np.zeros([numpaths,numcolumns])\n","      PIMCD = np.zeros([numpaths,numcolumns])\n","      PIWEND = np.zeros([numpaths,numcolumns])\n","      #% Simulate numperiods years of data\n","      for t in range(numperiods):\n","          #% Parse out the draws and relevant data.\n","          if t == 0:\n","              #% Simulation draws\n","              re = randepsilons[0:numpaths,:]\n","              ru = randu[0:numpaths,:]\n","              #% Inital values of lagged variables\n","              lagN = np.zeros([numpaths,players])\n","              #% Initial values of X\n","              Xhatrshape = Xo\n","              host = np.kron(greycup[0],op)\n","              smoke = np.kron(regulation[0],op)\n","              #% Initial draws of Z\n","              rp = re\n","              randparticles[0:numpaths,:] = rp\n","          else:\n","              #% Simulation draws\n","              re = randepsilons[t*numpaths:(t+1)*numpaths,:]\n","              rx = randexog[t*numpaths:(t+1)*numpaths,:]\n","              ru = randu[t*numpaths:(t+1)*numpaths,:]\n","              #% Transition Z\n","              lagN = lagnum[t*numpaths:(t+1)*numpaths,:]\n","              lagA = lagact[t*numpaths:(t+1)*numpaths,:]\n","              lagZ = np.stack([rp[:,0],rp[:,1],rp[:,2],rp[:,3],rp[:,4]],axis=1)\n","              Zhat = draw_Z(lagZ, lagA, lagN, Cind, re, mu, delta, beta, eta, specification)\n","              rp = np.stack([Zhat[:,0], Zhat[:,1], Zhat[:,2], Zhat[:,3], Zhat[:,4]],axis=1)\n","              #% Transition X\n","              Xlag = np.vstack([np.hstack([M, zM, zM, zM]),\n","                                np.hstack([zM, M, zM, zM]),\n","                                np.hstack([zM, zM, M, zM]),\n","                                np.hstack([zM, zM, zM, M])])\n","              rxrshape = np.reshape(rx.T,numpaths*nexogeq)#;   % Reshape the random draws\n","              Xhat = Xlag.dot(rhoX) + rxrshape#;               % Simulate X using SUR.\n","              Xhatrshape = np.reshape(Xhat,[nexogeq,numpaths]).T#; % Reshape the Xhat vector\n","              if t < years:\n","                  #% Stop updating GC and RI after observable period\n","                  host = np.kron(greycup[t],op)#;                       % Perfect foresight about CFL Grey Cup.\n","                  smoke = np.kron(regulation[t],op)#;                   % Perfect foresight about municipal smoking regulations.\n","          #% Store current X and Z values\n","          X[t*numpaths:(t+1)*numpaths,:] = Xhatrshape\n","          randparticles[t*numpaths:(t+1)*numpaths,:] = rp\n","          M = np.hstack([Xhatrshape, op])\n","          #% Rescale variables\n","          pop = M[:,0] / stdX[11]\n","          inc = M[:,1] / stdX[12]\n","          val = M[:,2] / stdX[13]\n","          minw = M[:,3] / stdX[46]\n","          #% Construct data matrices\n","          D_ALL = np.stack([ pop, inc, val, host.reshape(-1), smoke.reshape(-1), minw, \n","                    pop * pop, pop * inc, pop * val, pop * minw, \n","                    inc * inc, inc * val, inc * minw, \n","                    val * val, val * minw, \n","                    minw * minw ],axis=1)\n","          D_interact = np.stack([ op.reshape(-1), pop, inc, val, minw ],axis=1)\n","\n","          \n","          D_AW = [ D_ALL, diag(rp(:,1)) * D_interact, diag(mean(rp(:,[2,3,4,5]), 2)) * D_interact, lagN(:,1) ];\n","          D_BK = [ D_ALL, diag(rp(:,2)) * D_interact, diag(mean(rp(:,[1,3,4,5]), 2)) * D_interact, lagN(:,2) ];\n","          D_HARV = [ D_ALL, diag(rp(:,3)) * D_interact, diag(mean(rp(:,[1,2,4,5]), 2)) * D_interact, lagN(:,3) ];\n","          D_MCD = [ D_ALL, diag(rp(:,4)) * D_interact, diag(mean(rp(:,[1,2,3,5]), 2)) * D_interact, lagN(:,4) ];\n","          D_WEND = [ D_ALL, diag(rp(:,5)) * D_interact, diag(mean(rp(:,[1,2,3,4]), 2)) * D_interact, lagN(:,5) ];\n","          u = [ ru(:,1); ru(:,2); ru(:,3); ru(:,4); ru(:,5); ];\n","          D0 = zeros(size(D_AW,1), size(D_AW,2));\n","          D = [ D_AW D0 D0 D0 D0; D0 D_BK D0 D0 D0; D0 D0 D_HARV D0 D0; D0 D0 D0 D_MCD D0; D0 D0 D0 D0 D_WEND ];        % Compile the vectors of X and Z that affect decision.\n","\n","          % Simulate actions\n","          [A, Xb] = forwardaction(theta,D,u);         % Simulated actions.\n","          A = reshape(A,numpaths,players);            % Reshape simulated action.\n","\n","          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","          % Calculate the one-shot payoff.\n","          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","\n","          lagNAW = lagN(:,1);     % Parse out lagged A & W store numbers.\n","          lagNBK = lagN(:,2);     % Parse out lagged Burger King store numbers.\n","          lagNHARV = lagN(:,3);   % Parse out lagged Harvey's store numbers.\n","          lagNMCD = lagN(:,4);    % Parse out lagged McDonald's store numbers.\n","          lagNWEND = lagN(:,5);   % Parse out lagged Wendy's store numbers.\n","\n","          AAW = A(:,1);           % Parse out simulated A & W action.\n","          ABK = A(:,2);           % Parse out simulated Burger King action.\n","          AHARV = A(:,3);         % Parse out simulated Harvey's action.\n","          AMCD = A(:,4);          % Parse out simulated McDonald's action.\n","          AWEND = A(:,5);         % Parse out simulated Wendy's action.\n","\n","          NAW = lagNAW + AAW;       % Parse out simulated A & W store number.\n","          NBK = lagNBK + ABK;       % Parse out simulated Burger King store number.\n","          NHARV = lagNHARV + AHARV; % Parse out simulated Harvey's store number.\n","          NMCD = lagNMCD + AMCD;    % Parse out simulated McDonald's store number.\n","          NWEND = lagNWEND + AWEND; % Parse out simulated Wendy's store number.\n","\n","          % Non-negativity constraint for store numbers.\n","          NAW = 1*(NAW > 0).*NAW;\n","          NBK = 1*(NBK > 0).*NBK;\n","          NHARV = 1*(NHARV > 0).*NHARV;\n","          NMCD = 1*(NMCD > 0).*NMCD;\n","          NWEND = 1*(NWEND > 0).*NWEND;\n","\n","          NAWSQ = (NAW ./ 100).^2;\n","          NBKSQ = (NBK ./ 100).^2;\n","          NHARVSQ = (NHARV ./ 100).^2;\n","          NMCDSQ = (NMCD ./ 100).^2;\n","          NWENDSQ = (NWEND ./ 100).^2;\n","\n","          activeAW = 1*(AAW > 0 | lagNAW > 0);\n","          activeBK = 1*(ABK > 0 | lagNBK > 0);\n","          activeHARV = 1*(AHARV > 0 | lagNHARV > 0);\n","          activeMCD = 1*(AMCD > 0 | lagNMCD > 0);\n","          activeWEND = 1*(AWEND > 0 | lagNWEND > 0);\n","\n","          logNAW = log(NAW+1); logNAW(~activeAW) = 0;\n","          logNBK = log(NBK+1); logNBK(~activeBK) = 0;\n","          logNHARV = log(NHARV+1); logNHARV(~activeHARV) = 0;\n","          logNMCD = log(NMCD+1); logNMCD(~activeMCD) = 0;\n","          logNWEND = log(NWEND+1); logNWEND(~activeWEND) = 0;\n","\n","          NcompAW = NBK + NHARV + NMCD + NWEND;   % Competitors of A & W.\n","          NcompBK = NAW + NHARV + NMCD + NWEND;   % Competitors of Burger King.\n","          NcompHARV = NAW + NBK + NMCD + NWEND;   % Competitors of Harvey's.\n","          NcompMCD = NAW + NBK + NHARV + NWEND;   % Competitors of McDonald's.\n","          NcompWEND = NAW + NBK + NHARV + NMCD;   % Competitors of Wendy's.\n","\n","          activecompAW = 1*(NcompAW > 0);\n","          activecompBK = 1*(NcompBK > 0);\n","          activecompHARV = 1*(NcompHARV > 0);\n","          activecompMCD = 1*(NcompMCD > 0);\n","          activecompWEND = 1*(NcompWEND > 0);\n","\n","          logNcompAW = log(NcompAW+1); logNcompAW(~activecompAW) = 0;\n","          logNcompBK = log(NcompBK+1); logNcompBK(~activecompBK) = 0;\n","          logNcompHARV = log(NcompHARV+1);logNcompHARV(~activecompHARV) = 0;\n","          logNcompMCD = log(NcompMCD+1); logNcompMCD(~activecompMCD) = 0;\n","          logNcompWEND = log(NcompWEND+1); logNcompWEND(~activecompWEND) = 0;\n","\n","          enterAW = 1*(lagNAW == 0 & AAW > 0);         % Entry term for A & W.\n","          enterBK = 1*(lagNBK == 0 & ABK > 0);         % Entry term for Burger King.\n","          enterHARV = 1*(lagNHARV == 0 & AHARV > 0);   % Entry term for Harvey's.\n","          enterMCD = 1*(lagNMCD == 0 & AMCD > 0);      % Entry term for McDonald's.\n","          enterWEND = 1*(lagNWEND == 0 & AWEND > 0);   % Entry term for Wendy's.\n","\n","          expandAW = 1*(AAW > 0) .* AAW;         % Expansion term for A & W.\n","          expandBK = 1*(ABK > 0) .* ABK;         % Expansion term for Burger King.\n","          expandHARV = 1*(AHARV > 0) .* AHARV;   % Expansion term for Harvey's.\n","          expandMCD = 1*(AMCD > 0) .* AMCD;      % Expansion term for McDonald's.\n","          expandWEND = 1*(AWEND > 0) .* AWEND;   % Expansion term for Wendy's.\n","\n","          contractAW = 1*(lagNAW > 0 & AAW < 0) .* -AAW;         % Contraction term for A & W.\n","          contractBK = 1*(lagNAW > 0 & ABK < 0) .* -ABK;         % Contraction term for Burger King.\n","          contractHARV = 1*(lagNAW > 0 & AHARV < 0) .* -AHARV;   % Contraction term for Harvey's.\n","          contractMCD = 1*(lagNAW > 0 & AMCD < 0) .* -AMCD;      % Contraction term for McDonald's.\n","          contractWEND = 1*(lagNAW > 0 & AWEND < 0) .* -AWEND;   % Contraction term for Wendy's.\n","\n","          % Calculate the variable profits for each chain.\n","          simVAW = [ pop, inc, val, host, smoke, minw, ...\n","                    pop .* NAW, inc .* NAW, val .* NAW, host .* NAW, smoke .* NAW, minw .* NAW, ...\n","                    rp(:,1), NcompAW, logNcompAW, zp, NBK, NHARV, NMCD, NWEND, ...\n","                    NAW, NAWSQ, logNAW, ...\n","                    enterAW, expandAW, contractAW, ru(:,1) ];\n","          simVBK = [ pop, inc, val, host, smoke, minw, ...\n","                    pop .* NBK, inc .* NBK, val .* NBK, host .* NBK, smoke .* NBK, minw .* NBK, ...\n","                    rp(:,2), NcompBK, logNcompBK, NAW, zp, NHARV, NMCD, NWEND, ...\n","                    NBK, NBKSQ, logNBK, ...\n","                    enterBK, expandBK, contractBK, ru(:,2) ];\n","          simVHARV = [ pop, inc, val, host, smoke, minw, ...\n","                      pop .* NHARV, inc .* NHARV, val .* NHARV, host .* NHARV, smoke .* NHARV, minw .* NHARV, ...\n","                      rp(:,3), NcompHARV, logNcompHARV, NAW, NBK, zp, NMCD, NWEND, ...\n","                      NHARV, NHARVSQ, logNHARV, ...\n","                      enterHARV, expandHARV, contractHARV, ru(:,3) ];\n","          simVMCD = [ pop, inc, val, host, smoke, minw, ...\n","                      pop .* NMCD, inc .* NMCD, val .* NMCD, host .* NMCD, smoke .* NMCD, minw .* NMCD, ...\n","                      rp(:,4), NcompMCD, logNcompMCD, NAW, NBK, NHARV, zp, NWEND, ...\n","                      NMCD, NMCDSQ, logNMCD, ...\n","                      enterMCD, expandMCD, contractMCD, ru(:,4) ];\n","          simVWEND = [ pop, inc, val, host, smoke, minw, ...\n","                      pop .* NWEND, inc .* NWEND, val .* NWEND, host .* NWEND, smoke .* NWEND, minw .* NWEND, ...\n","                      rp(:,5), NcompWEND, logNcompWEND, NAW, NBK, NHARV, NMCD, zp, ...\n","                      NWEND, NWENDSQ, logNWEND, ...\n","                      enterWEND, expandWEND, contractWEND, ru(:,5) ];\n","\n","          actAW = kron(activeAW, oc);\n","          actBK = kron(activeBK, oc);\n","          actHARV = kron(activeHARV, oc);\n","          actMCD = kron(activeMCD, oc);\n","          actWEND = kron(activeWEND, oc);\n","\n","          simVAW = simVAW .* actAW;\n","          simVBK = simVBK .* actBK;\n","          simVHARV = simVHARV .* actHARV;\n","          simVMCD = simVMCD .* actMCD;\n","          simVWEND = simVWEND .* actWEND;\n","\n","          %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n","\n","          % Update the discounted sum of profits with the current net profits.\n","          disc = discount^(t-1);\n","          PIAW = PIAW + disc*simVAW;\n","          PIBK = PIBK + disc*simVBK;\n","          PIHARV = PIHARV + disc*simVHARV;\n","          PIMCD = PIMCD + disc*simVMCD;\n","          PIWEND = PIWEND + disc*simVWEND;\n","\n","          if t < numperiods\n","              % Store total number of stores for next period.\n","              lagnum(t*numpaths+1:(t+1)*numpaths,:) = [ NAW, NBK, NHARV, NMCD, NWEND ];\n","\n","              % Store net number of stores added next period.\n","              lagact(t*numpaths+1:(t+1)*numpaths,:) = [ AAW, ABK, AHARV, AMCD, AWEND ];\n","          end\n","      end\n","\n","      % Average the discounted profit streams across all simulations.\n","      APIAW(market,:) = mean(PIAW)\n","      APIBK(market,:) = mean(PIBK)\n","      APIHARV(market,:) = mean(PIHARV)\n","      APIMCD(market,:) = mean(PIMCD)\n","      APIWEND(market,:) = mean(PIWEND)\n","\n","  return APIAW, APIBK, APIHARV, APIMCD, APIWEND\n"],"metadata":{"id":"ABB30tUVM6VO"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##genstar.m"],"metadata":{"id":"gsjTwmnbMKkC"}},{"cell_type":"code","source":["def genstar(data, stdX, param, rhoX, corrX, specification, numpaths, numperiods, discount, numperturb, myseed):\n","  #% Parameters for main settings.\n","  years = 36#;\n","  numplayers = 5#;                     % Number of players.\n","  nummarkets = int(len(data) / years)#;  % Number of markets.\n","  #rng(myseed);                        % Set the seed.\n","  ng = 7#;                             % Number of cutoffs.\n","  #%numtheta = 17 + ng;                 % Number of policy parameters per player.\n","  numtheta = 27 + ng#;                 % Number of policy parameters per player.\n","  #% Set perturbations to zero\n","  noperturb = np.zeros(numtheta*numplayers)\n","  #% Simulated values using estimated first stage parameters.\n","  print('Simulating equilibrium policies...')\n","  APIAWs, APIBKs, APIHARVs, APIMCDs, APIWENDs = forwardsim(param, noperturb, rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount)\n","\n","  % Stack equilibrium simulation for comparison with alternatives\n","  o = ones(numperturb,1);\n","  APIAWstar = kron(o, APIAWs);\n","  APIBKstar = kron(o, APIBKs);\n","  APIHARVstar = kron(o, APIHARVs);\n","  APIMCDstar = kron(o, APIMCDs);\n","  APIWENDstar = kron(o, APIWENDs);\n","\n","  AO = zeros(size(APIAWstar,1),size(APIAWstar,2));\n","  APIstar = [APIAWstar AO AO AO AO; ...\n","            AO APIBKstar AO AO AO; ...\n","            AO AO APIHARVstar AO AO; ...\n","            AO AO AO APIMCDstar AO; ...\n","            AO AO AO AO APIWENDstar];\n","  end\n","  return APIstar"],"metadata":{"id":"i6OfoHM-MOTC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##genperturb.m"],"metadata":{"id":"KwTmvJsFJ4pw"}},{"cell_type":"code","source":["import scipy.io\n","import numpy as np\n","perturb = scipy.io.loadmat(file_name+'perturb.mat')['perturb']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TvL5ofnvLNHu","executionInfo":{"status":"ok","timestamp":1654203000537,"user_tz":300,"elapsed":123,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"d207f042-fe1e-4de6-f699-9ffff0373a2b"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(170, 3000)"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["def genperturb(data, stdX, param, rhoX, corrX, specification, numpaths, numperiods, discount, numperturb, sigma, myseed):\n","  #% Parameters for main settings.\n","  years = 36#;\n","  numplayers = 5#;                     % Number of players.\n","  nummarkets = int(len(data) / years)#;  % Number of markets.#rng(myseed);                        % Set the seed.\n","  ng = 7#;                             % Number of cutoffs.\n","  numtheta = 27 + ng#;                 % Number of policy parameters per player.\n","  #% Firm-specific perturbations of ordered probit parameters\n","  mu = np.zeros([numtheta, numperturb])#;\n","  #perturb = normrnd(mu, sigma); % Single-player perturbations.\n","  PO = np.zeros([numtheta, numperturb])#;\n","  perturbAW = np.vstack([ perturb, PO, PO, PO, PO ])#;\n","  perturbBK = np.vstack([ PO,perturb,PO,PO,PO])\n","  perturbHARV = np.vstack([ PO,PO,perturb,PO,PO])\n","  perturbMCD =np.vstack( [ PO,PO,PO,perturb,PO])\n","  perturbWEND =np.vstack( [ PO,PO,PO,PO,perturb])\n","  #% Initialize storage for simulations\n","  APIAWperturb = []\n","  APIBKperturb = []\n","  APIHARVperturb = []\n","  APIMCDperturb = []\n","  APIWENDperturb = []\n","  #% Simulated values using estimated first stage parameters.\n","  APIstar = genstar(data, stdX, param, rhoX, corrX, specification, numpaths, numperiods, discount, numperturb, myseed);\n","\n","  parfor i = 1:numperturb\n","      disp(sprintf('Simulating with alternative policy %d...', i));\n","\n","      % Simulated values using perturbed first stage parameters for each firm.\n","      [APIAWpb, APIBK, APIHARV, APIMCD, APIWEND] = forwardsim(param, perturbAW(:,i), rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount);\n","      [APIAW, APIBKpb, APIHARV, APIMCD, APIWEND] = forwardsim(param, perturbBK(:,i), rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount);\n","      [APIAW, APIBK, APIHARVpb, APIMCD, APIWEND] = forwardsim(param, perturbHARV(:,i), rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount);\n","      [APIAW, APIBK, APIHARV, APIMCDpb, APIWEND] = forwardsim(param, perturbMCD(:,i), rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount);\n","      [APIAW, APIBK, APIHARV, APIMCD, APIWENDpb] = forwardsim(param, perturbWEND(:,i), rhoX, corrX, data, stdX, specification, numpaths, numperiods, discount);\n","\n","      APIAWperturb = [APIAWperturb; APIAWpb];\n","      APIBKperturb = [APIBKperturb; APIBKpb];\n","      APIHARVperturb = [APIHARVperturb; APIHARVpb];\n","      APIMCDperturb = [APIMCDperturb; APIMCDpb];\n","      APIWENDperturb = [APIWENDperturb; APIWENDpb];\n","  end\n","\n","  % Store the equilibrium and perturbed discounted sums\n","  AO = zeros(size(APIAWperturb,1),size(APIAWperturb,2));\n","  APIperturb = [APIAWperturb AO AO AO AO; ...\n","                AO APIBKperturb AO AO AO; ...\n","                AO AO APIHARVperturb AO AO; ...\n","                AO AO AO APIMCDperturb AO; ...\n","                AO AO AO AO APIWENDperturb];\n","  return APIstar, APIperturb\n"],"metadata":{"id":"A5l18N8yJ0zw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# spec1_simulate.m"],"metadata":{"id":"aDC3UhLb20wc"}},{"cell_type":"code","source":["import scipy.io\n","import numpy as np\n","#% Settings\n","specification = 1#;                % Specification\n","discount = 0.95#;                  % Discount rate.\n","myseed = 949751012#;               % Set the seed value for simulations.\n","\n","#% Simulation settings\n","numpaths = 250#;                   % Number of paths to simulate.\n","numperiods = 100#;                 % Number of paths to simulate.\n","numperturb = 3000#;                % Number of perturbations.#outputdir = 'results';            % Output directory\n","\n","#% Perturbation standard deviations\n","sigma = np.zeros([34, numperturb])#; 16+1+9+1+7\n","sigma[0:27,     0:250]  = 0.0001 * np.ones([27, 250])\n","sigma[0:27,   250:500]  = 0.0010 * np.ones([27, 250])\n","sigma[0:27,   500:750]  = 0.0100 * np.ones([27, 250])\n","sigma[0:27,   750:1000] = 0.1000 * np.ones([27, 250])\n","sigma[27:34,    0:1000] = 0.0100 * np.ones([7,  1000])\n","\n","sigma[0:27,  1000:1250] = 0.0001 * np.ones([27, 250])\n","sigma[0:27,  1250:1500] = 0.0010 * np.ones([27, 250])\n","sigma[0:27,  1500:1750] = 0.0100 * np.ones([27, 250])\n","sigma[0:27,  1750:2000] = 0.1000 * np.ones([27, 250])\n","sigma[27:34, 1000:2000] = 0.1000 * np.ones([7,  1000])\n","\n","sigma[0:27,  2000:2250] = 0.0001 * np.ones([27, 250])\n","sigma[0:27,  2250:2500] = 0.0010 * np.ones([27, 250])\n","sigma[0:27,  2500:2750] = 0.0100 * np.ones([27, 250])\n","sigma[0:27,  2750:3000] = 0.1000 * np.ones([27, 250])\n","sigma[27:34, 2000:3000] = 1.0000 * np.ones([7,  1000])\n","\n","#% Load first stage results\n","data1 = scipy.io.loadmat(file_name + 'spec{:1.0f}_first.mat'.format(specification))\n","exitflag     = data1['exitflag']\n","fval_best    = data1['fval_best']\n","fval_opt     = data1['fval_opt']\n","idx_best     = data1['idx_best']\n","numparticles = data1['numparticles']\n","specification= data1['specification']\n","theta_best   = data1['theta_best']\n","theta_opt    = data1['theta_opt']\n","theta_start  = data1['theta_start']\n","#% Output file names\n","savename = 'spec%d_simulate.mat'.format(specification)\n","# % Load dataset.\n","data = scipy.io.loadmat(file_name + 'canadafastfood.mat')['data']\n","# % Scaling of the variables.\n","stdX = np.sqrt(np.var(data,axis=0))\n","# % Obtain SUR estimation results.\n","rhoX, sigmaX,_ = sur(data)\n","print(rhoX.shape)\n","# % Precalculate simulations using first-stage estimates\n","APIstar, APIperturb = genperturb(data, stdX, theta_best, rhoX, sigmaX, specification, numpaths, numperiods, discount, numperturb, sigma, myseed)#\n","\n","# % Save results\n","# save(savename, 'specification', 'theta_best', 'rhoX', 'sigmaX', 'APIstar', 'APIperturb']#\n"],"metadata":{"id":"NzC1DQUpxe81","executionInfo":{"status":"error","timestamp":1654206684102,"user_tz":300,"elapsed":587,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"colab":{"base_uri":"https://localhost:8080/","height":281},"outputId":"c16e6e6d-84e6-4c8e-8156-327d421cdb8c"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["(20,)\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-d100f74087ad>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrhoX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;31m# % Precalculate simulations using first-stage estimates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 54\u001b[0;31m \u001b[0mAPIstar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAPIperturb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgenperturb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstdX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtheta_best\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrhoX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigmaX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspecification\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumpaths\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumperiods\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiscount\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnumperturb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmyseed\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m#\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     55\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m \u001b[0;31m# % Save results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'genperturb' is not defined"]}]}]}