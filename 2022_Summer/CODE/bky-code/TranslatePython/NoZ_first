{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"NoZ_first","provenance":[],"collapsed_sections":["QJGe-TTk1HO0","56AyHuDR5D3G"],"authorship_tag":"ABX9TyMVg3ui0fuRXWgVdhnQyag2"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WRLEBrIlwtiv","executionInfo":{"status":"ok","timestamp":1653428308281,"user_tz":300,"elapsed":1008,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"8afc815f-d5e9-4388-b604-40e3310438cc"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":2,"metadata":{"id":"yvdjlgdGwiMQ","executionInfo":{"status":"ok","timestamp":1653428308282,"user_tz":300,"elapsed":4,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"outputs":[],"source":["import scipy.io\n","file_name = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/CODE/bky-code/TranslatePython/'\n","data = scipy.io.loadmat(file_name + 'canadafastfood.mat')['data']\n","#data.shape\n","numtheta = 57\n","specification = 1\n","myseed = 10177101\n","numparticles = 0"]},{"cell_type":"markdown","source":["# function"],"metadata":{"id":"guL9dkhR26O8"}},{"cell_type":"markdown","source":["##probZ.m"],"metadata":{"id":"QJGe-TTk1HO0"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.stats import norm\n","def probZ(theta, y, X):\n","  #% Construct a grid of cutoffs.\n","  grid = [-5, -2, -1, 0, 1, 2, 5]\n","  ng = len(grid)\n","\n","  #% Dimensions\n","  numplayers = 5#                         % Number of firms.\n","  nx = len(X.T)#                         % Number of state variables.\n","  numpar = len(theta)#                 % Number of parameters.\n","  nbeta = int(numpar / numplayers - ng)#       % Number of beta parameters per firm.\n","\n","  #% Parsing out the parameter vector.\n","  betaAW = theta[0:nbeta]\n","  cutoffAW = theta[nbeta:nbeta+ng]\n","  betaBK = theta[nbeta+ng:2*nbeta+ng]\n","  cutoffBK = theta[2*nbeta+ng:2*nbeta+2*ng]\n","  betaHARV = theta[2*nbeta+2*ng:3*nbeta+2*ng]\n","  cutoffHARV = theta[3*nbeta+2*ng:3*nbeta+3*ng]\n","  betaMCD = theta[3*nbeta+3*ng:4*nbeta+3*ng]\n","  cutoffMCD = theta[4*nbeta+3*ng:4*nbeta+4*ng]\n","  betaWEND = theta[4*nbeta+4*ng:5*nbeta+4*ng]\n","  cutoffWEND = theta[5*nbeta+4*ng:5*nbeta+5*ng]\n","  beta = np.hstack([ betaAW, betaBK, betaHARV, betaMCD, betaWEND]).reshape([-1,1])\n","\n","  #% Calculating contribution of state variables to the latent payoff.\n","  Xb = X.dot(beta)\n","  N = int(len(Xb) /5)\n","  #print(Xb.shape)\n","  XbAW = Xb[0:N,:]\n","  XbBK = Xb[N:2*N,:]\n","  XbHARV = Xb[2*N:3*N,:]\n","  XbMCD = Xb[3*N:4*N,:]\n","  XbWEND = Xb[4*N:5*N,:]\n","\n","  #% Get chain specific dependent variables.\n","  yAW = y[0]\n","  yBK = y[1]\n","  yHARV = y[2]\n","  yMCD = y[3]\n","  yWEND = y[4]\n","\n","  #% First loop goes through each possible category.\n","  for i in range(ng+1):\n","      if i == 0:\n","          if (yAW <= grid[0]):\n","              FAW = norm.cdf(cutoffAW[0] - XbAW)\n","          if (yBK <= grid[0]):\n","              FBK = norm.cdf(cutoffBK[0] - XbBK)\n","          if (yHARV <= grid[0]):\n","              FHARV = norm.cdf(cutoffHARV[0] - XbHARV)\n","          if (yMCD <= grid[0]):\n","              FMCD = norm.cdf(cutoffMCD[0] - XbMCD)\n","          if (yWEND <= grid[0]):\n","              FWEND = norm.cdf(cutoffWEND[0] - XbWEND)\n","      elif i == ng:\n","          if (yAW > grid[ng-1]):\n","              FAW = 1 - norm.cdf(cutoffAW[ng-1] - XbAW)\n","          if (yBK > grid[ng-1]):\n","              FBK = 1 - norm.cdf(cutoffBK[ng-1] - XbBK)\n","          if (yHARV > grid[ng-1]):\n","              FHARV = 1 - norm.cdf(cutoffHARV[ng-1] - XbHARV)\n","          if (yMCD > grid[ng-1]):\n","              FMCD = 1 - norm.cdf(cutoffMCD[ng-1] - XbMCD)     \n","          if (yWEND > grid[ng-1]):\n","              FWEND = 1 - norm.cdf(cutoffWEND[ng-1] - XbWEND)\n","          \n","      else:\n","          if (yAW > grid[i-1] and yAW <= grid[i]):\n","              FAW = norm.cdf(cutoffAW[i] - XbAW) - norm.cdf(cutoffAW[i-1] - XbAW)\n","          if (yBK > grid[i-1] and yBK <= grid[i]):\n","              FBK = norm.cdf(cutoffBK[i] - XbBK) - norm.cdf(cutoffBK[i-1] - XbBK)\n","          if (yHARV > grid[i-1] and yHARV <= grid[i]):\n","              FHARV = norm.cdf(cutoffHARV[i] - XbHARV) - norm.cdf(cutoffHARV[i-1] - XbHARV)\n","          if (yMCD > grid[i-1] and yMCD <= grid[i]):\n","              FMCD = norm.cdf(cutoffMCD[i] - XbMCD) - norm.cdf(cutoffMCD[i-1] - XbMCD)\n","          if (yWEND > grid[i-1] and yWEND <= grid[i]):\n","              FWEND = norm.cdf(cutoffWEND[i] - XbWEND) - norm.cdf(cutoffWEND[i-1] - XbWEND)\n","  Fy = np.hstack([FAW, FBK, FHARV, FMCD, FWEND])\n","  #print(Fy)\n","  return Fy.T\n"],"metadata":{"id":"BQRTFmfK1Jgl","executionInfo":{"status":"ok","timestamp":1653428308813,"user_tz":300,"elapsed":534,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["##getparam1.m"],"metadata":{"id":"56AyHuDR5D3G"}},{"cell_type":"code","source":["  # % Ordered probit parameters ($\\theta$)\n","  # %\n","  # % * Coefficients for each firm:\n","  # %\n","  # %     1. Population\n","  # %     2. Income\n","  # %     3. Property value\n","  # %     4. Grey Cup host\n","  # %     5. Smoking regulation\n","  # %     6. Minimum wage\n","  # %     7. Population * Population\n","  # %     8. Population * Income\n","  # %     9. Population * Property value\n","  # %     10. Population * Minimum wage\n","  # %     11. Income * Income\n","  # %     12. Income * Property value\n","  # %     13. Income * Minimum wage\n","  # %     14. Property value * Property value\n","  # %     15. Property value * Minimum wage\n","  # %     16. Minimum wage * Minimum wage\n","  # %     17. Z\n","  # %     18. Z * Population\n","  # %     19. Z * Income\n","  # %     20. Z * Property value\n","  # %     21. Z * Minimum wage\n","  # %     22. Rival Z\n","  # %     23. Rival Z * Population\n","  # %     24. Rival Z * Income\n","  # %     25. Rival Z * Property value\n","  # %     26. Rival Z * Minimum wage\n","  # %     27. Lagged N\n","  # %\n","  # % * Cutoffs for each firm (ng of them).\n","  # %\n","  # % Overall length of $\\theta$: (27+ng) * numplayers."],"metadata":{"id":"piYBXgiK5sLJ","executionInfo":{"status":"ok","timestamp":1653428308813,"user_tz":300,"elapsed":3,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","def getparam1(param, specification):\n","\n","  #% Constants\n","  numplayers = 5#;                         % Number of players\n","  nummarkets = 31#;                        % Number of markets\n","  ng = 7#;                                 % Number of ordered probit cutoffs\n","\n","  # % Lengths of some internal parameter vectors are fixed\n","  numtheta_total = 27\n","  nummu = numplayers\n","  numdelta = numplayers\n","  numeta = nummarkets\n","  idx = 0;\n","\n","  #% Retrieve parameters depending on specification\n","  if  specification == 1:\n","\n","      #% Baseline homogeneous specification (57 parameters).\n","      #% No latent variable, but firm and city fixed effects are included (through Z_imt).\n","      # if (size(param, 1) ~= 50 + ng)\n","      #     error('Incorrect number of first stage parameters (specification 3)!')\n","      # end\n","\n","      #% Ordered probit coefficients ($\\theta$)\n","      numtheta_coeff = 16\n","      numtheta_zeros = numtheta_total - numtheta_coeff - 1\n","      theta_coeff = np.hstack([ param[0:numtheta_coeff], 1, np.zeros(numtheta_zeros) ])\n","      idx = idx + numtheta_coeff # 16\n","\n","      #% Ordered probit cutoffs ($\\theta$)\n","      numtheta_cutoff = ng\n","      theta_cutoff = param[idx:idx+numtheta_cutoff] #7\n","      idx = idx + numtheta_cutoff #16+7\n","\n","      #% Combine to build theta vector\n","      theta = np.hstack([ theta_coeff, theta_cutoff ]) #16+1+10 + 7\n","      theta = np.hstack([ theta, theta, theta, theta, theta ])\n","\n","      #% Firm-specific drift parameters ($\\mu$) (AW = 0)\n","      mu = np.hstack([ 0, param[idx:idx+numplayers-1] ]) # \n","      idx = idx + (numplayers - 1)\n","\n","      #% Firm-specific autoregressive parameters ($\\delta$)\n","      delta = np.zeros(5)#;\n","\n","      #% Remaining firm-specific coefficients in Z process ($\\beta$)\n","      beta = np.zeros(6)#;\n","      beta = np.hstack([ beta, beta, beta, beta, beta ])\n","\n","      #% City fixed effects in Z process ($\\eta)\n","      eta = np.hstack([ 0, param[idx:idx+nummarkets-1] ])\n","      idx = idx + (nummarkets - 1)\n","\n","  # elif specification == 2\n","\n","  #     % Baseline homogeneous specification with Z interactions (72 parameters).\n","  #     % No spillovers, but firm and city fixed effects are included.\n","\n","  #     if (size(param, 1) ~= 65 + ng)\n","  #         error('Incorrect number of first stage parameters (specification 16)!')\n","  #     end\n","\n","  #     % Ordered probit coefficients ($\\theta$)\n","  #     numtheta_coeff = 16;\n","  #     numtheta_coeff2 = 9;\n","  #     theta_coeff = [ param(1:numtheta_coeff); 1;\n","  #                     param(numtheta_coeff+1:numtheta_coeff+numtheta_coeff2); 0 ];\n","  #     idx = idx + numtheta_coeff + numtheta_coeff2;\n","\n","  #     % Ordered probit cutoffs ($\\theta$)\n","  #     numtheta_cutoff = ng;\n","  #     theta_cutoff = param(idx+1:idx+numtheta_cutoff);\n","  #     idx = idx + numtheta_cutoff;\n","\n","  #     % Combine to build theta vector\n","  #     theta = [ theta_coeff; theta_cutoff ];\n","  #     theta = [ theta; theta; theta; theta; theta; ];\n","\n","  #     % Firm-specific drift parameters ($\\mu$) (AW = 0)\n","  #     mu = [ 0; param(idx+1:idx+numplayers-1) ];\n","  #     idx = idx + (numplayers - 1);\n","\n","  #     % Firm-specific autoregressive parameters ($\\delta$)\n","  #     delta = abs(param(idx+1:idx+numplayers));\n","  #     idx = idx + numplayers;\n","\n","  #     % Remaining firm-specific coefficients in Z process ($\\beta$)\n","  #     numbeta = 1;\n","  #     tmp = param(idx+1);\n","  #     beta = [ 0; 0; 0; 0; 0; abs(tmp) ];\n","  #     beta = [ beta; beta; beta; beta; beta ];\n","  #     idx = idx + numbeta;\n","\n","  #     % City fixed effects in Z process ($\\eta)\n","  #     eta = [ 0; param(idx+1:idx+nummarkets-1); ];\n","  #     idx = idx + (nummarkets - 1);\n","\n","  # elif specification == 3\n","\n","  #     % Heterogeneous cubic N specification (91 parameters).\n","  #     % Includes spillovers, rival spillovers, spillover interactions, and\n","  #     % firm and city fixed effects.\n","\n","  #     if (size(param, 1) ~= 84 + ng)\n","  #         error('Incorrect number of first stage parameters (specification 14)!')\n","  #     end\n","\n","  #     % Ordered probit coefficients ($\\theta$)\n","  #     numtheta_coeff = 16;\n","  #     numtheta_coeff2 = 9;\n","  #     theta_coeff = [ param(1:numtheta_coeff); 1;\n","  #                     param(numtheta_coeff+1:numtheta_coeff+numtheta_coeff2); 0 ];\n","  #     idx = idx + numtheta_coeff + numtheta_coeff2;\n","\n","  #     % Ordered probit cutoffs ($\\theta$)\n","  #     numtheta_cutoff = ng;\n","  #     theta_cutoff = param(idx+1:idx+numtheta_cutoff);\n","  #     idx = idx + numtheta_cutoff;\n","\n","  #     % Combine to build theta vector\n","  #     theta = [ theta_coeff; theta_cutoff ];\n","  #     theta = [ theta; theta; theta; theta; theta; ];\n","\n","  #     % Firm-specific drift parameters ($\\mu$) (AW = 0)\n","  #     mu = [ 0; param(idx+1:idx+numplayers-1) ];\n","  #     idx = idx + (numplayers - 1);\n","\n","  #     % Firm-specific autoregressive parameters ($\\delta$)\n","  #     delta = abs(param(idx+1:idx+numplayers));\n","  #     idx = idx + numplayers;\n","\n","  #     % Remaining firm-specific coefficients in Z process ($\\beta$)\n","  #     numbeta = 4 * numplayers;\n","  #     tmp = param(idx+1:idx+numbeta);\n","  #     beta = [ 0; 0; tmp[0];  tmp(2);  tmp(3);  abs(tmp(4));\n","  #             0; 0; tmp(5);  tmp(6);  tmp(7);  abs(tmp(8));\n","  #             0; 0; tmp(9);  tmp(10); tmp(11); abs(tmp(12));\n","  #             0; 0; tmp(13); tmp(14); tmp(15); abs(tmp(16));\n","  #             0; 0; tmp(17); tmp(18); tmp(19); abs(tmp(20)); ];\n","  #     idx = idx + numbeta;\n","\n","  #     % City fixed effects in Z process ($\\eta)\n","  #     eta = [ 0; param(idx+1:idx+nummarkets-1); ];\n","  #     idx = idx + (nummarkets - 1);\n","\n","  return theta, mu, delta, beta, eta\n"],"metadata":{"id":"sCLnpGPh5Gbm","executionInfo":{"status":"ok","timestamp":1653428309014,"user_tz":300,"elapsed":203,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["##loglik.m"],"metadata":{"id":"M9P7UsHY5BkW"}},{"cell_type":"code","source":["from numpy.core.fromnumeric import reshape\n","import numpy as np\n","def loglik(param, data, stdX, specification, numparticles, myseed):\n","  years = 36\n","  nummarkets = int(len(data)/years)\n","  players = 5 #rng(myseed);                        % Set the seed.\n","  index = np.zeros(numparticles)#[1:1:numparticles];         % Index for each particle simulation draw for a given market-time.\n","\n","  # Parsing out the parameters.\n","  theta, mu, delta, beta, eta = getparam1(param, specification)\n","\n","  #% Initialize matrix which stores log-likelhood for each market-time.\n","  ll = np.zeros([years,nummarkets])\n","\n","  #% Loop over all markets.\n","  for market in range(nummarkets):\n","\n","      #% Parse out the data based on market index.\n","      dataN = data[market*years:(market+1)*years,:]\n","\n","      #% Parse out the data.\n","      time = np.int_(dataN[:,0])#           % Year.\n","      lagnumAW = np.int_(dataN[:,6])#       % Lagged number of A and W outlets in city.\n","      lagnumBK = np.int_(dataN[:,7])#       % Lagged number of Burger King outlets in city.\n","      lagnumHARV = np.int_(dataN[:,8])#     % Lagged number of Harvey's outlets in city.\n","      lagnumMCD = np.int_(dataN[:,9])#     % Lagged number of McDonald's outlets in city.\n","      lagnumWEND = np.int_(dataN[:,10])#    % Lagged number of Wendy's outlets in city.\n","      population = dataN[:,11]#    % Population.\n","      income = dataN[:,12]#        % Income.\n","      value = dataN[:,13]#         % Property value.\n","      aAW = np.int_(dataN[:,14])#           % Change in A and W outlets.\n","      aBK = np.int_(dataN[:,15])#           % Change in Burger King outlets.\n","      aHARV = np.int_(dataN[:,16])#         % Change in Harvey's outlets.\n","      aMCD = np.int_(dataN[:,17])#          % Change in McDonald's outlets.\n","      aWEND = np.int_(dataN[:,18])#         % Change in Wendy's outlets.\n","      cityindex = np.int_(dataN[:,19])#     % Index for city.\n","      timeindex = np.int_(dataN[:,20])#     % Index for time.\n","\n","      #% Exogenous shock to city's exposure.\n","      greycup = np.int_(dataN[:,44])#              % City hosting CFL Grey Cup.\n","      regulation = np.int_(dataN[:,45])#           % Introduction of smoking regulation.\n","      minwage = dataN[:,46]#              % Minimum wage.\n","      lagminwage = dataN[:,47]#           % Lagged minimum wage.\n","\n","      #% Lagged actions.\n","      lagaAW = np.int_(dataN[:,48])#\n","      lagaBK = np.int_(dataN[:,49])#\n","      lagaHARV = np.int_(dataN[:,50])#\n","      lagaMCD = np.int_(dataN[:,51])#\n","      lagaWEND = np.int_(dataN[:,52])#\n","\n","      if numparticles > 0:\n","          #% Allocate storage for particles for each market\n","          randparticles = np.zeros([numparticles*years,players])\n","\n","          #% Store simulation draws used for propogating particles\n","          #randepsilons = normrnd(0,1,numparticles*years,players);\n","          print('need download')\n","      else:\n","          #% Include firm fixed effects via particles\n","          randparticles = np.ones([years, 1]).dot(np.reshape(mu,[1,-1])) + np.reshape(eta[cityindex-1],[-1,1]).dot(np.ones([1,players]))\n","          randepsilons = np.zeros([years,players])\n","\n","      #% Initialize vector of log-likelihoods which will be stored for future use.\n","      lmjointP = np.ones(years)\n","\n","      #% Loop over all 36 years.\n","      for t in range(years):\n","\n","          if numparticles > 0:\n","              o = np.ones([numparticles,1])\n","          else:\n","              o = np.ones([1,1])\n","\n","          lagnum = np.stack([[lagnumAW[t]], [lagnumBK[t]], [lagnumHARV[t]], [lagnumMCD[t]], [lagnumWEND[t]]],axis=1)\n","          lagN = np.kron(lagnum,o)\n","\n","          if t == 0:\n","              if numparticles > 0:\n","                  print('need download')\n","                  #% Draw Z's from initial distribution in initial time period.\n","                  #randparticles(1:numparticles,:) = normrnd(0,1,numparticles,players)\n","          else:\n","              #% Transition Z's in subsequent time periods.\n","              if numparticles > 0:\n","                  lagact = np.stack([[lagaAW[t]], [lagaBK[t]], [lagaHARV[t]], [lagaMCD[t]], [lagaWEND[t]]],axis=1)\n","                  lagA = np.kron(lagact,o)\n","                  Cind = np.kron(cityindex[t],o)\n","                  re = randepsilons[t*numparticles:(t+1)*numparticles,:]\n","                  print('need download')\n","                  #Zhat  = draw_Z(lagZ, lagA, lagN, Cind, re, mu, delta, beta, eta, specification);\n","                  #randparticles((t-1)*numparticles+1:t*numparticles,:) = [Zhat(:,1), Zhat(:,2), Zhat(:,3), Zhat(:,4), Zhat(:,5)]\n","\n","          #% Store current swarm\n","          if numparticles > 0:\n","              rp = randparticles[t*numparticles:(t+1)*numparticles,:]\n","          else:\n","              rp = randparticles[t,:].reshape([1,-1])\n","\n","          #% Current actions\n","          y = np.hstack([aAW[t], aBK[t],aHARV[t], aMCD[t], aWEND[t]])\n","\n","          #% Rescale variables\n","          pop = population[t] / stdX[11]\n","          inc = income[t] / stdX[12]\n","          val = value[t] / stdX[13]\n","          host = greycup[t]\n","          smoke = regulation[t]\n","          minw = minwage[t] / stdX[46]\n","\n","          #% Stack the state variables for each simulation draw.\n","          X = np.hstack([ pop, inc, val, host, smoke, minw, \n","                pop * pop, pop * inc, pop * val, pop * minw, \n","                inc * inc, inc * val, inc * minw, \n","                val * val, val * minw, \n","                minw * minw ])\n","          X_interact = np.hstack([ 1, pop, inc, val, minw ]).reshape([1,-1])\n","          Xo = np.kron(X.reshape([1,-1]),o)\n","          X_AW = np.hstack([Xo, rp[:,0].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[1,2,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,0].reshape([-1,1]) ])\n","          X_BK = np.hstack([Xo, rp[:,1].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,2,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,1].reshape([-1,1]) ])\n","          X_HARV =np.hstack( [Xo, rp[:,2].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,3,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,2].reshape([-1,1]) ])\n","          X_MCD = np.hstack([Xo, rp[:,3].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,2,4]], 1).reshape([-1,1]).dot(X_interact), lagN[:,3].reshape([-1,1]) ])\n","          X_WEND = np.hstack([Xo, rp[:,4].reshape([-1,1]).dot(X_interact), np.mean(rp[:,[0,1,2,3]], 1).reshape([-1,1]).dot(X_interact), lagN[:,4].reshape([-1,1]) ])\n","\n","          #% Stack the state variables for each simulation draw.\n","          XM = np.zeros(X_AW.shape)\n","          M = np.vstack([np.hstack([X_AW, XM, XM, XM, XM]),\n","               np.hstack([XM, X_BK, XM, XM, XM]),\n","               np.hstack([XM, XM, X_HARV, XM, XM]),\n","               np.hstack([XM, XM, XM, X_MCD, XM]),\n","               np.hstack([XM, XM, XM, XM, X_WEND])])\n","\n","          #% Obtain the probabilities for each simulation draw.\n","          #print(market)\n","          P = probZ(theta,y,M)\n","          #print(P.shape)\n","          if numparticles > 0:\n","              PAW = P[0:numparticles,:]\n","              PBK = P[numparticles:2*numparticles,:]\n","              PHARV = P[2*numparticles:3*numparticles,:]\n","              PMCD = P[3*numparticles:4*numparticles,:]\n","              PWEND = P[4*numparticles:5*numparticles,:]\n","          else:\n","              PAW = P[0,:]\n","              PBK = P[1,:]\n","              PHARV = P[2,:]\n","              PMCD = P[3,:]\n","              PWEND = P[4,:]\n","\n","          #% Calculate the joint probability.\n","          if numparticles > 0:\n","              jointP = PAW * PBK * PHARV * PMCD * PWEND;\n","              pbound = 0.000000001 #* np.ones([len(jointP),1])                                      #% Establish bound.\n","              jointP = np.int_(jointP > 0.000000001) * jointP + np.int_(jointP < 0.000000001) * pbound#;   % Use bound if underflow.\n","\n","              #% Average the likelihood across simulations and store into vector.\n","              mjointP = np.mean(jointP)#;\n","              lmjointP[t] = np.log(mjointP)#;\n","\n","              #% Resampling from Z's in time t.\n","              print('need download')\n","              #rindex = randsample(index, numparticles, true, jointP);         % Draw the index.\n","              #lagZ = rp(rindex,:);                                            % Use the resample index to get new Z's.\n","          else:\n","              lmjointP[t] = np.log(PAW) + np.log(PBK) + np.log(PHARV) + np.log(PMCD) + np.log(PWEND)\n","\n","\n","      #% Store the vector of log-likelihoods over time for each market iteration.\n","      #print(lmjointP.shape)\n","      ll[:,market] = lmjointP\n","\n","  #% Sums the log-likelihoods across all markets and time.\n","  sll = -np.sum(np.real(ll))\n","\n","\n","  return sll\n"],"metadata":{"id":"kBK6oQNj28uc","executionInfo":{"status":"ok","timestamp":1653428309727,"user_tz":300,"elapsed":714,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["# spec1_first.m"],"metadata":{"id":"aDC3UhLb20wc"}},{"cell_type":"code","source":["import numpy as np\n","from scipy.optimize import minimize\n","stdX = np.sqrt(np.var(data,axis=0))\n","#print(stdX)\n","theta_stata = np.array([ -.1415898, .2081491, -.1398425, .1479199, -.1394528,\n","                         -.1251621, .055328, .0486884, -.064598, -.0476361,\n","                         -.0232923, -.1323229, .0354094, .1709373, .0139131, \n","                        -.0146488, -3.466304, -2.84666, -2.181145, .8185702,\n","                        1.52743, 1.948664, 2.637176 , -.0944945, -.0658257, \n","                        .6408552, -.0045667, .1063918, .3671427, -.0622312,\n","                        1.354735, .920912, .0749279, .2101155, .2314288,\n","                        -.0088738, .1782534, .3253802, .4015002, -.3360856,\n","                        .7431793, .2260503, .4473324, .9488305, -.0790994,\n","                        .0021278, -.1506345, -.2964931, -.1582441, -.0824332,\n","                        -.1684278, -.445869, .9219383, .8253207, .0713067,\n","                        .0269466, .3192049 ])\n","\n","numstart = 1\n","theta_start = np.ones([numstart,numtheta])\n","theta_start[0,:] = theta_stata.copy()\n","theta_start[:,16:23] = np.sort(theta_start[:,16:23],axis=1)# Sort cutoffs\n","\n","theta_opt = np.zeros([numstart,numtheta])\n","fval_opt = np.zeros([numstart,1])\n","#exitflag = np.zeros([numstart,1])# stop condition is fval or theta_val\n","\n","def func1(theta_start,data=data,stdX=stdX,specification=specification,\n","          numparticles=numparticles,myseed=myseed):\n","  res = loglik(theta_start, data, stdX, specification, numparticles, myseed)\n","  print(res)\n","  return res\n","\n","for j in range(numstart):\n","  res = minimize(func1,theta_start[j,:])\n","  theta = res.x\n","  fval = res.fun\n","  #flag = res.success\n","fval_best = np.min(fval_opt)\n","idx_best = np.where(fval_opt==fval_best)\n","theta_best = theta_opt[idx_best,:]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NzC1DQUpxe81","executionInfo":{"status":"ok","timestamp":1653428752241,"user_tz":300,"elapsed":442518,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6d803ddb-a8c6-437e-9fc1-acbefca1945e"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["4059.3916686846014\n","4059.3916686846014\n","4059.3916686605985\n","4059.3916684898645\n","4059.391668613361\n","4059.3916686833095\n","4059.3916686822968\n","4059.391668611575\n","4059.391668639853\n","4059.391668523191\n","4059.3916686185753\n","4059.3916686271405\n","4059.3916674532547\n","4059.3916682334075\n","4059.3916682316612\n","4059.3916684980513\n","4059.3916685248255\n","4059.3916684822375\n","4059.3916686846756\n","4059.3916686851135\n","4059.3916686919265\n","4059.3916687032515\n","4059.3916686877023\n","4059.391668686004\n","4059.39166868517\n","4059.3916686787634\n","4059.3916686786274\n","4059.391668677135\n","4059.391668678728\n","4059.391668683683\n","4059.391668683285\n","4059.3916686837483\n","4059.3916686820617\n","4059.3916686828907\n","4059.391668683467\n","4059.3916686835414\n","4059.391668683671\n","4059.391668683697\n","4059.391668683479\n","4059.391668683345\n","4059.3916686833545\n","4059.3916686840553\n","4059.3916686839857\n","4059.391668683632\n","4059.391668683152\n","4059.391668682656\n","4059.39166868382\n","4059.3916686838743\n","4059.3916686837965\n","4059.391668684045\n","4059.391668683919\n","4059.39166868378\n","4059.391668683824\n","4059.39166868403\n","4059.3916686835496\n","4059.3916686835646\n","4059.3916686838556\n","4059.391668683793\n","4059.3916686837633\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:165: RuntimeWarning: divide by zero encountered in log\n"]},{"output_type":"stream","name":"stdout","text":["inf\n","inf\n","inf\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/scipy/optimize/optimize.py:697: RuntimeWarning: invalid value encountered in double_scalars\n","  df = (f(*((xk + d,) + args)) - f0) / d[k]\n"]},{"output_type":"stream","name":"stdout","text":["inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","inf\n","4059.3916686846014\n","4059.3916686846014\n","4059.3916686605985\n","4059.3916684898645\n","4059.391668613361\n","4059.3916686833095\n","4059.3916686822968\n","4059.391668611575\n","4059.391668639853\n","4059.391668523191\n","4059.3916686185753\n","4059.3916686271405\n","4059.3916674532547\n","4059.3916682334075\n","4059.3916682316612\n","4059.3916684980513\n","4059.3916685248255\n","4059.3916684822375\n","4059.3916686846756\n","4059.3916686851135\n","4059.3916686919265\n","4059.3916687032515\n","4059.3916686877023\n","4059.391668686004\n","4059.39166868517\n","4059.3916686787634\n","4059.3916686786274\n","4059.391668677135\n","4059.391668678728\n","4059.391668683683\n","4059.391668683285\n","4059.3916686837483\n","4059.3916686820617\n","4059.3916686828907\n","4059.391668683467\n","4059.3916686835414\n","4059.391668683671\n","4059.391668683697\n","4059.391668683479\n","4059.391668683345\n","4059.3916686833545\n","4059.3916686840553\n","4059.3916686839857\n","4059.391668683632\n","4059.391668683152\n","4059.391668682656\n","4059.39166868382\n","4059.3916686838743\n","4059.3916686837965\n","4059.391668684045\n","4059.391668683919\n","4059.39166868378\n","4059.391668683824\n","4059.39166868403\n","4059.3916686835496\n","4059.3916686835646\n","4059.3916686838556\n","4059.391668683793\n","4059.3916686837633\n","4059.3916686846014\n","4059.3916686846014\n","4059.3916686605985\n","4059.3916684898645\n","4059.391668613361\n","4059.3916686833095\n","4059.3916686822968\n","4059.391668611575\n","4059.391668639853\n","4059.391668523191\n","4059.3916686185753\n","4059.3916686271405\n","4059.3916674532547\n","4059.3916682334075\n","4059.3916682316612\n","4059.3916684980513\n","4059.3916685248255\n","4059.3916684822375\n","4059.3916686846756\n","4059.3916686851135\n","4059.3916686919265\n","4059.3916687032515\n","4059.3916686877023\n","4059.391668686004\n","4059.39166868517\n","4059.3916686787634\n","4059.3916686786274\n","4059.391668677135\n","4059.391668678728\n","4059.391668683683\n","4059.391668683285\n","4059.3916686837483\n","4059.3916686820617\n","4059.3916686828907\n","4059.391668683467\n","4059.3916686835414\n","4059.391668683671\n","4059.391668683697\n","4059.391668683479\n","4059.391668683345\n","4059.3916686833545\n","4059.3916686840553\n","4059.3916686839857\n","4059.391668683632\n","4059.391668683152\n","4059.391668682656\n","4059.39166868382\n","4059.3916686838743\n","4059.3916686837965\n","4059.391668684045\n","4059.391668683919\n","4059.39166868378\n","4059.391668683824\n","4059.39166868403\n","4059.3916686835496\n","4059.3916686835646\n","4059.3916686838556\n","4059.391668683793\n","4059.3916686837633\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:165: RuntimeWarning: divide by zero encountered in log\n"]},{"output_type":"stream","name":"stdout","text":["inf\n","inf\n","296286.96876827657\n","71124.03436948455\n","19276.922957140836\n","7578.126696540571\n","4899.634364169283\n","4264.632447872496\n","4110.01709509518\n","4071.895556223934\n","4062.46287755888\n","4060.134610298559\n"]}]},{"cell_type":"code","source":["res"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PjJVn6CHEUXv","executionInfo":{"status":"ok","timestamp":1653429372116,"user_tz":300,"elapsed":153,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"c30041d7-db4c-4f29-9544-a55b690cd1dd"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      fun: 4059.3916686846014\n"," hess_inv: array([[1, 0, 0, ..., 0, 0, 0],\n","       [0, 1, 0, ..., 0, 0, 0],\n","       [0, 0, 1, ..., 0, 0, 0],\n","       ...,\n","       [0, 0, 0, ..., 1, 0, 0],\n","       [0, 0, 0, ..., 0, 1, 0],\n","       [0, 0, 0, ..., 0, 0, 1]])\n","      jac: array([-1.61080933e+00, -1.30685730e+01, -4.78085327e+00, -8.67004395e-02,\n","       -1.54663086e-01, -4.90072632e+00, -3.00302124e+00, -1.08320618e+01,\n","       -4.43093872e+00, -3.85614014e+00, -8.26342773e+01, -3.02791138e+01,\n","       -3.03963013e+01, -1.25191650e+01, -1.07223816e+01, -1.35804138e+01,\n","        4.97436523e-03,  3.43627930e-02,  4.91577148e-01,  1.25158691e+00,\n","        2.08099365e-01,  9.41162109e-02,  3.81469727e-02, -3.91784668e-01,\n","       -4.00909424e-01, -5.01068115e-01, -3.94165039e-01, -6.16455078e-02,\n","       -8.83483887e-02, -5.72509766e-02, -1.70440674e-01, -1.14807129e-01,\n","       -7.61413574e-02, -7.11364746e-02, -6.24389648e-02, -6.06994629e-02,\n","       -7.53173828e-02, -8.43200684e-02, -8.36791992e-02, -3.66516113e-02,\n","       -4.13208008e-02, -6.50634766e-02, -9.72595215e-02, -1.30554199e-01,\n","       -5.24291992e-02, -4.87976074e-02, -5.40161133e-02, -3.73535156e-02,\n","       -4.58068848e-02, -5.51147461e-02, -5.21850586e-02, -3.83605957e-02,\n","       -7.05871582e-02, -6.95800781e-02, -5.00488281e-02, -5.42602539e-02,\n","       -5.62438965e-02])\n","  message: 'Desired error not necessarily achieved due to precision loss.'\n","     nfev: 248\n","      nit: 0\n","     njev: 4\n","   status: 2\n","  success: False\n","        x: array([-1.415898e-01,  2.081491e-01, -1.398425e-01,  1.479199e-01,\n","       -1.394528e-01, -1.251621e-01,  5.532800e-02,  4.868840e-02,\n","       -6.459800e-02, -4.763610e-02, -2.329230e-02, -1.323229e-01,\n","        3.540940e-02,  1.709373e-01,  1.391310e-02, -1.464880e-02,\n","       -3.466304e+00, -2.846660e+00, -2.181145e+00,  8.185702e-01,\n","        1.527430e+00,  1.948664e+00,  2.637176e+00, -9.449450e-02,\n","       -6.582570e-02,  6.408552e-01, -4.566700e-03,  1.063918e-01,\n","        3.671427e-01, -6.223120e-02,  1.354735e+00,  9.209120e-01,\n","        7.492790e-02,  2.101155e-01,  2.314288e-01, -8.873800e-03,\n","        1.782534e-01,  3.253802e-01,  4.015002e-01, -3.360856e-01,\n","        7.431793e-01,  2.260503e-01,  4.473324e-01,  9.488305e-01,\n","       -7.909940e-02,  2.127800e-03, -1.506345e-01, -2.964931e-01,\n","       -1.582441e-01, -8.243320e-02, -1.684278e-01, -4.458690e-01,\n","        9.219383e-01,  8.253207e-01,  7.130670e-02,  2.694660e-02,\n","        3.192049e-01])"]},"metadata":{},"execution_count":11}]}]}