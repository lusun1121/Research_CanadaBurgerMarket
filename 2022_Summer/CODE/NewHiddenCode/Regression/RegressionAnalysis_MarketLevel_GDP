{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"RegressionAnalysis_MarketLevel_GDP","provenance":[],"collapsed_sections":["kkTS68Z7ekcC","JlYM1xa3VyUm","ArdOiT34WD8v","Gyg7rEKkV3jW"],"authorship_tag":"ABX9TyNmdqe9GXOcNzBXF03/L/Uc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4End_z6dLrJg","executionInfo":{"status":"ok","timestamp":1654445588415,"user_tz":300,"elapsed":757,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6c124828-e9fc-44f4-f584-a2957c2ac818"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Initial "],"metadata":{"id":"kkTS68Z7ekcC"}},{"cell_type":"code","source":["import numpy as np\n","file_name = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/CODE/TranslatePythonCode/'\n","import pickle\n","with open(file_name+'Q_new.txt','rb') as fp:\n","  Qnew = pickle.load(fp)\n","\n","mtype_int = -1*np.ones(400,dtype = int)\n","for i in range(400):\n","  mtype_max = max(Qnew[i])\n","  if mtype_max >1/3:\n","    mtype_int[i] = np.where(Qnew[i] == mtype_max)[0][0] +1\n","  if mtype_int[i]==1 and Qnew[i,0] < 1-5e-1: # 1e-3 is good  \n","    mtype_int[i] = 0\n","print(np.sum(mtype_int==-1),np.sum(mtype_int==0),np.sum(mtype_int==1),np.sum(mtype_int==2),np.sum(mtype_int==3))\n","mtype_int_temp = mtype_int.copy()\n","#mtype_int = np.kron(np.ones(35),mtype_int)\n","mtype_int_new = np.repeat(mtype_int_temp,35)\n","# mtype_int.reshape([TimePeriod,SamplePath])\n","# mtype_int_new.reshape([SamplePath,TimePeriod])\n","# #np.unique(mtype_int_new-mtype_int)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PV-MG2EhbrIz","executionInfo":{"status":"ok","timestamp":1654445588415,"user_tz":300,"elapsed":4,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"fc8b7d58-6ee5-43a2-a234-22b82d0843e6"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["15 0 341 1 43\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","file_name = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/CODE/NewHiddenCode/'\n","data = pd.read_csv(file_name + 'spatial_oligopoly_matlab.csv')\n","print(data.columns)\n","TimePeriod = len(np.unique(data['time']))\n","SamplePath = int(len(data)/TimePeriod)\n","print(TimePeriod,SamplePath)\n","print(data['clusterid'].to_numpy().reshape([SamplePath,TimePeriod]))\n","#data = data[mtype_int_new==1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8WRCW26LMJnn","executionInfo":{"status":"ok","timestamp":1654445588738,"user_tz":300,"elapsed":325,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"edb8d23a-9ee9-4e39-f0cb-6dedc4f3bc4d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Index(['clusterid', 'time', 'total_aw', 'total_bk', 'total_harv', 'total_mcd',\n","       'total_wend', 'lagtotal_aw', 'lagtotal_bk', 'lagtotal_harv',\n","       'lagtotal_mcd', 'lagtotal_wend', 'fortotal_aw', 'fortotal_bk',\n","       'fortotal_harv', 'fortotal_mcd', 'fortotal_wend', 'change_aw',\n","       'change_bk', 'change_harv', 'change_mcd', 'change_wend', 'fsaid',\n","       'population', 'value', 'income', 'cityid', 'totalsales',\n","       'totallocations', 'salesperstore', 'disc_population', 'disc_income',\n","       'disc_value', 'lagdisc_population', 'lagdisc_income', 'lagdisc_value'],\n","      dtype='object')\n","35 400\n","[[   1    1    1 ...    1    1    1]\n"," [   2    2    2 ...    2    2    2]\n"," [   3    3    3 ...    3    3    3]\n"," ...\n"," [1400 1400 1400 ... 1400 1400 1400]\n"," [1401 1401 1401 ... 1401 1401 1401]\n"," [1403 1403 1403 ... 1403 1403 1403]]\n"]}]},{"cell_type":"code","source":["import numpy as np\n","MT = len(data)\n","N_aw = data['total_aw'].to_numpy()\n","N_bk = data['total_bk'].to_numpy()\n","N_hvy = data['total_harv'].to_numpy()\n","N_mcd = data['total_mcd'].to_numpy()\n","N_wdy = data['total_wend'].to_numpy()\n","a_aw = data['change_aw'].to_numpy()\n","a_bk = data['change_bk'].to_numpy()\n","a_hvy = data['change_harv'].to_numpy()\n","a_mcd = data['change_mcd'].to_numpy()\n","a_wdy = data['change_wend'].to_numpy()\n","pop = data['population'].to_numpy()\n","val = data['value'].to_numpy()\n","inc = data['income'].to_numpy()\n"],"metadata":{"id":"X_h3bzMCRrN-","executionInfo":{"status":"ok","timestamp":1654445588739,"user_tz":300,"elapsed":2,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def quantile(x,p):\n","  x = np.sort(x)\n","  n = len(x)\n","  x = np.hstack([x[0], x,x[-1]])\n","  i = p*n+1.5\n","  iu = int(np.ceil(i))\n","  il = int(np.floor(i))\n","  d = i-il\n","  qq = x[il-1]*(1-d)+x[iu-1]*d\n","  return qq\n","\n","#% Number of own shops (in state space; capped at 3), from the perspective of each firm\n","Ni_aw = (N_aw <= 3)*N_aw + (N_aw > 3)*3\n","Ni_bk = (N_bk <= 3)*N_bk + (N_bk > 3)*3\n","Ni_hvy = (N_hvy <= 3)*N_hvy + (N_hvy > 3)*3\n","Ni_mcd = (N_mcd <= 3)*N_mcd + (N_mcd > 3)*3\n","Ni_wdy = (N_wdy <= 3)*N_wdy + (N_wdy > 3)*3\n","\n","#% Number of rival shops (in state space; capped at 3), from the perspective of each firm\n","Nj_aw = N_bk + N_hvy + N_mcd + N_wdy\n","Nj_bk = N_aw + N_hvy + N_mcd + N_wdy\n","Nj_hvy = N_aw + N_bk + N_mcd + N_wdy\n","Nj_mcd = N_aw + N_bk + N_hvy + N_wdy\n","Nj_wdy = N_aw + N_bk + N_hvy + N_mcd\n","Nj_aw = (Nj_aw <= 3)*Nj_aw + (Nj_aw > 3)*3     \n","Nj_bk = (Nj_bk <= 3)*Nj_bk + (Nj_bk > 3)*3\n","Nj_hvy = (Nj_hvy <= 3)*Nj_hvy + (Nj_hvy > 3)*3\n","Nj_mcd = (Nj_mcd <= 3)*Nj_mcd + (Nj_mcd > 3)*3\n","Nj_wdy = (Nj_wdy <= 3)*Nj_wdy + (Nj_wdy > 3)*3\n","\n","#% Number of pop,val,inc (in state space; capped at 3)\n","pop25 = quantile(pop,0.25)\n","val25 = quantile(val,0.25)   \n","inc25 = quantile(inc,0.25)  \n","pop50 = quantile(pop,0.5) \n","val50 = quantile(val,0.5)   \n","inc50 = quantile(inc,0.5)  \n","pop75 = quantile(pop,0.75) \n","val75 = quantile(val,0.75)   \n","inc75 = quantile(inc,0.75)   \n","disc_pop = np.int_(pop > pop25) + np.int_(pop > pop50) + np.int_(pop > pop75)  \n","disc_val = np.int_(val > val25) + np.int_(val > val50) + np.int_(val > val75)  \n","disc_inc = np.int_(inc > inc25) + np.int_( inc > inc50) + np.int_(inc > inc75)\n","\n","#% Define state variables for each firm\n","RHS_aw = np.vstack([Ni_aw, Nj_aw, disc_pop,disc_val, disc_inc]).T#;         % State for A & W.      \n","RHS_bk = np.vstack([Ni_bk, Nj_bk, disc_pop,disc_val, disc_inc]).T#;         % State for Burger King.      \n","RHS_hvy = np.vstack([Ni_hvy, Nj_hvy, disc_pop,disc_val, disc_inc]).T#;      % State for Harvey's.      \n","RHS_mcd = np.vstack([Ni_mcd, Nj_mcd, disc_pop, disc_val,disc_inc]).T#;      % State for McDonald's.      \n","RHS_wdy = np.vstack( [Ni_wdy, Nj_wdy, disc_pop,disc_val, disc_inc]).T#;"],"metadata":{"id":"h858GZ1aTOpl","executionInfo":{"status":"ok","timestamp":1654445588902,"user_tz":300,"elapsed":165,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["stateID_aw = Ni_aw*4**4+Nj_aw*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_bk = Ni_bk*4**4+Nj_bk*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_hvy = Ni_hvy*4**4+Nj_hvy*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_mcd = Ni_mcd*4**4+Nj_mcd*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_wdy = Ni_wdy*4**4+Nj_wdy*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_other = np.hstack([stateID_aw,stateID_bk,stateID_hvy,stateID_wdy])\n","\n","ai_aw = -1*np.int_(a_aw<0) + 0*np.int_(a_aw==0) + 1*np.int_(a_aw>0)+1\n","ai_bk = -1*np.int_(a_bk<0) + 0*np.int_(a_bk==0) + 1*np.int_(a_bk>0) +1\n","ai_hvy = -1*np.int_(a_hvy<0) + 0*np.int_(a_hvy==0) + 1*np.int_(a_hvy>0)+1\n","ai_mcd = -1*np.int_(a_mcd<0) + 0*np.int_(a_mcd==0) + 1*np.int_(a_mcd>0)+1\n","ai_wdy = -1*np.int_(a_wdy<0) + 0*np.int_(a_wdy==0) + 1*np.int_(a_wdy>0)+1\n","ai_other = np.hstack([ai_aw,ai_bk,ai_hvy,ai_wdy])"],"metadata":{"id":"8zynDHPwUux0","executionInfo":{"status":"ok","timestamp":1654445588903,"user_tz":300,"elapsed":5,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["numstates = 5 # ni,nj,pop,val,inc\n","states_full = np.arange(4**numstates)\n","Ni = states_full//(4**(numstates-1))                       #Number of own outlets: {0,1,2,3+}.\n","Nj = states_full%(4**(numstates-1))//(4**(numstates-2))    #Number of rival outlets: {0,1,2,3+}.\n","dz1 = states_full%(4**(numstates-2))//(4**(numstates-3))   #Discretized population state: {0,1,2,3}.\n","dz2 = states_full%(4**(numstates-3))//(4**(numstates-4))   #Discretized property value state: {0,1,2,3}.\n","dz3 = states_full%(4**(numstates-4))                       #Discretized income state: {0,1,2,3}.\n","print(np.sum(np.abs(Ni*4**4+Nj*4**3+dz1*4**2+dz2*4**1+dz3-states_full)))\n","states = np.stack([Ni,Nj,dz1,dz2,dz3],axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KgqQpwj6Nijm","executionInfo":{"status":"ok","timestamp":1654445588903,"user_tz":300,"elapsed":5,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"643156da-28ee-423e-c288-2cd2dcb546c0"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","filename = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/Picture/'\n","data_extra = pd.read_csv(filename+'ExtraData.csv')\n","gdp = data_extra['GDP_Grwoth_Rate']\n","\n","obser = 2\n","disc_gdp = np.int_(gdp > 0) #+ np.int_(gdp > gdp75) \n","disc_gdp = disc_gdp\n","trans_gdp = np.zeros([obser,obser],dtype=int)\n","\n","for i in range(34):\n","  trans_gdp[disc_gdp[i],disc_gdp[i+1]] +=1\n","print(trans_gdp)\n","trans_gdp = trans_gdp/np.kron(np.ones([1,obser]),np.sum(trans_gdp,axis=1).reshape([-1,1]))\n","print(trans_gdp)\n","disc_gdp = (np.repeat(disc_gdp[0:TimePeriod],SamplePath).reshape([TimePeriod,SamplePath]).T).reshape(-1)\n","#disc_gdp = disc_gdp[mtype_int_new==1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qjs2sEDZ_uq","executionInfo":{"status":"ok","timestamp":1654445588903,"user_tz":300,"elapsed":4,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"5f42bf1f-b48f-48b6-92ff-42f141468a34"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2]\n"," [ 2 29]]\n","[[0.33333333 0.66666667]\n"," [0.06451613 0.93548387]]\n"]}]},{"cell_type":"markdown","source":["# Regression"],"metadata":{"id":"OwewpVoWFu7P"}},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","from sklearn.linear_model import LinearRegression\n","rand_num = 500\n","np.random.seed(0)\n","v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]])\n","score = []\n","coef = []\n","intercept = []\n","gamma = []\n","for i in tqdm(range(rand_num)):\n","  X = np.stack([Ni_mcd,Nj_mcd,disc_pop,disc_val,disc_inc,disc_gdp],axis=1)\n","  y = ai_mcd - v[i]\n","  X = X[mtype_int_new==1]\n","  y= y[mtype_int_new==1]\n","  reg = LinearRegression().fit(X, y)\n","  score.append(reg.score(X, y))\n","  coef.append(reg.coef_)\n","  intercept.append(reg.intercept_)\n","  gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","print('---->')  \n","meanr_mcd = np.mean(np.array(gamma),axis=0)\n","stdr_mcd = np.std(np.array(gamma),axis=0)\n","print(['{:2.6f}'.format(meanr_mcd[i]) for i in range(len(meanr_mcd))])\n","print(['{:2.6f}'.format(stdr_mcd[i]) for i in range(len(stdr_mcd))])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GfrRC1SnBMVl","executionInfo":{"status":"ok","timestamp":1654445596477,"user_tz":300,"elapsed":7577,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"e956d42c-4b0a-4e49-eec5-4137c3f1cc48"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:06<00:00, 76.19it/s]"]},{"output_type":"stream","name":"stdout","text":["---->\n","['1.011104', '-0.013395', '-0.000539', '0.000406', '0.005396', '0.000909', '0.007500']\n","['0.038279', '0.017815', '0.014548', '0.008479', '0.009314', '0.009114', '0.033566']\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","from sklearn.linear_model import LinearRegression\n","rand_num = 500\n","np.random.seed(0)\n","v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*4])\n","score = []\n","coef = []\n","intercept = []\n","gamma = []\n","Ni_other = np.hstack([Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","Nj_other = np.hstack([Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","disc_pop_other = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop])\n","disc_val_other = np.hstack([disc_val,disc_val,disc_val,disc_val])\n","disc_inc_other = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc])\n","disc_gdp_other = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","mtype_int_4 = np.hstack([mtype_int_new,mtype_int_new,mtype_int_new,mtype_int_new])\n","# v = np.hstack([v,v,v,v])\n","ai_other = np.hstack([ai_aw,ai_bk,ai_hvy,ai_wdy])\n","for i in tqdm(range(rand_num)):\n","  X = np.stack([Ni_other,Nj_other,disc_pop_other,disc_val_other,disc_inc_other,disc_gdp_other],axis=1)\n","  y = ai_other-v[i]\n","  X = X[mtype_int_4==1]\n","  y= y[mtype_int_4==1]\n","  reg = LinearRegression().fit(X, y)\n","  score.append(reg.score(X, y))\n","  coef.append(reg.coef_)\n","  intercept.append(reg.intercept_)\n","  gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","print('---->')  \n","meanr_other = np.mean(np.array(gamma),axis=0)\n","stdr_other = np.std(np.array(gamma),axis=0)\n","print(['{:2.6f}'.format(meanr_other[i]) for i in range(len(meanr_other))])\n","print(['{:2.6f}'.format(stdr_other[i]) for i in range(len(stdr_other))])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"outputId":"be4ad8d9-d1fb-41cf-d941-aa1843778236","id":"VsmfdHALF6Ln","executionInfo":{"status":"ok","timestamp":1654445619812,"user_tz":300,"elapsed":23345,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:20<00:00, 23.95it/s]"]},{"output_type":"stream","name":"stdout","text":["---->\n","['1.001297', '-0.034140', '0.004070', '0.000151', '0.000235', '0.000935', '0.002498']\n","['0.018737', '0.014718', '0.005464', '0.004150', '0.004474', '0.004333', '0.016789']\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","from sklearn.linear_model import LinearRegression\n","rand_num = 500\n","np.random.seed(0)\n","v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*5])\n","score = []\n","coef = []\n","intercept = []\n","gamma = []\n","Ni_full = np.hstack([Ni_mcd,Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","Nj_full = np.hstack([Nj_mcd,Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","disc_pop_full = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,disc_pop])\n","disc_val_full = np.hstack([disc_val,disc_val,disc_val,disc_val,disc_val])\n","disc_inc_full = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc,disc_inc])\n","disc_gdp_full = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","# v = np.hstack([v,v,v,v])\n","mtype_int_5 = np.hstack([mtype_int_new,mtype_int_new,mtype_int_new,mtype_int_new,mtype_int_new])\n","\n","ai_full = np.hstack([ai_mcd,ai_aw,ai_bk,ai_hvy,ai_wdy])\n","for i in tqdm(range(rand_num)):\n","  X = np.stack([Ni_full,Nj_full,disc_pop_full,disc_val_full,disc_inc_full,disc_gdp_full],axis=1)\n","  y = ai_full-v[i]\n","  X = X[mtype_int_5==1]\n","  y= y[mtype_int_5==1]\n","  reg = LinearRegression().fit(X, y)\n","  score.append(reg.score(X, y))\n","  coef.append(reg.coef_)\n","  intercept.append(reg.intercept_)\n","  gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","print('---->')  \n","meanr_full = np.mean(np.array(gamma),axis=0)\n","stdr_full = np.std(np.array(gamma),axis=0)\n","print(['{:2.6f}'.format(meanr_full[i]) for i in range(len(meanr_full))])\n","print(['{:2.6f}'.format(stdr_full[i]) for i in range(len(stdr_full))])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KdXTyb6Pjz_z","executionInfo":{"status":"ok","timestamp":1654445638647,"user_tz":300,"elapsed":18839,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"ed062f4c-3810-4f18-deb1-c5e83381d6b2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:17<00:00, 28.78it/s]"]},{"output_type":"stream","name":"stdout","text":["---->\n","['1.002769', '-0.015952', '0.000734', '0.000357', '0.001628', '0.000994', '0.003445']\n","['0.016682', '0.009794', '0.004952', '0.003762', '0.003888', '0.003742', '0.014554']\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]}]}