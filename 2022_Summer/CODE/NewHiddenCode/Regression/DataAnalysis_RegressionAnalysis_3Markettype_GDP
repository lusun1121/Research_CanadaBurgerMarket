{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["kkTS68Z7ekcC","6ryzz5ziYlyP"],"authorship_tag":"ABX9TyPohkRYxWZOzK9V2oExjO0t"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4End_z6dLrJg","executionInfo":{"status":"ok","timestamp":1665086763866,"user_tz":300,"elapsed":1632,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"9978575b-0af6-45ec-c591-068e352204aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Initial "],"metadata":{"id":"kkTS68Z7ekcC"}},{"cell_type":"code","source":["import numpy as np\n","file_name = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/CODE/TranslatePythonCode/'\n","# import pickle\n","# with open(file_name+'Q_new.txt','rb') as fp:\n","#   Qnew = pickle.load(fp)\n","\n","# mtype_int = -1*np.ones(400,dtype = int)\n","# for i in range(400):\n","#   mtype_max = max(Qnew[i])\n","#   if mtype_max >1/3:\n","#     mtype_int[i] = np.where(Qnew[i] == mtype_max)[0][0] +1\n","#   if mtype_int[i]==1 and Qnew[i,0] < 1-1e-3: # 1e-3 is good  \n","#     mtype_int[i] = 0\n","# print(np.sum(mtype_int==-1),np.sum(mtype_int==0),np.sum(mtype_int==1),np.sum(mtype_int==2),np.sum(mtype_int==3))\n","# mtype_int_temp = mtype_int.copy()\n","# #mtype_int = np.kron(np.ones(35),mtype_int)\n","# mtype_int_new = np.repeat(mtype_int_temp,35)\n","# # mtype_int.reshape([TimePeriod,SamplePath])\n","# # mtype_int_new.reshape([SamplePath,TimePeriod])\n","# # #np.unique(mtype_int_new-mtype_int)"],"metadata":{"id":"PV-MG2EhbrIz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import scipy.io\n","mat = scipy.io.loadmat(file_name + 'canadafastfood_resorted.mat')\n","data = mat['data']#[np.where(mtype_int==1)]\n","TimePeriod = len(np.unique(data[:,1]))\n","SamplePath = int(len(data)/TimePeriod)\n","print(TimePeriod,SamplePath)\n","print(data[:,0].reshape([TimePeriod,SamplePath]).T)\n","\n","#% Labeling\n","MT = len(data)          #% Size of the dataset (M x T = 400 x 35 = 14000).#clusterid = np.int_(data[:,0])      % Unique market ID.\n","year = np.int_(data[:,1]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","N_aw  = np.int_(data[:,2]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","N_bk  = np.int_(data[:,3]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","N_hvy = np.int_(data[:,4]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","N_mcd = np.int_(data[:,5]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","N_wdy = np.int_(data[:,6]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","lagN_aw  = np.int_(data[:,7]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","lagN_bk  = np.int_(data[:,8]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","lagN_hvy = np.int_(data[:,9]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","lagN_mcd = np.int_(data[:,10]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","lagN_wdy = np.int_(data[:,11]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fwdN_aw  = np.int_(data[:,12]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fwdN_bk  = np.int_(data[:,13]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fwdN_hvy = np.int_(data[:,14]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fwdN_mcd = np.int_(data[:,15]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fwdN_wdy = np.int_(data[:,16]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","a_aw  = np.int_(data[:,17]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","a_bk  = np.int_(data[:,18]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","a_hvy = np.int_(data[:,19]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","a_mcd = np.int_(data[:,20]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","a_wdy = np.int_(data[:,21]).reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","pop = data[:,23].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","val = data[:,24].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","inc = data[:,25].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fpop = data[:,27].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","finc = data[:,28].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","fval = data[:,29].reshape([TimePeriod,SamplePath]).T.reshape(-1)\n","mktfe = data[:,30].reshape([TimePeriod,SamplePath]).T.reshape(-1) #% Market fixed effect estimates (from 130913_alaToivanenWaterson3_Fixedeffect3quantile.csv/dta)\n","tertile = np.int_(data[:,31]).reshape([TimePeriod,SamplePath]).T.reshape(-1)       #% Market type initial guess (from 130913_alaToivanenWaterson3_Fixedeffect3quantile.csv/dta)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gdkN0II-zdkh","executionInfo":{"status":"ok","timestamp":1665086763867,"user_tz":300,"elapsed":10,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6449d833-d7fc-4b92-fbf7-64d0cbda6110"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["35 400\n","[[  1.   1.   1. ...   1.   1.   1.]\n"," [  2.   2.   2. ...   2.   2.   2.]\n"," [  3.   3.   3. ...   3.   3.   3.]\n"," ...\n"," [398. 398. 398. ... 398. 398. 398.]\n"," [399. 399. 399. ... 399. 399. 399.]\n"," [400. 400. 400. ... 400. 400. 400.]]\n"]}]},{"cell_type":"code","source":["def quantile(x,p):\n","  x = np.sort(x)\n","  n = len(x)\n","  x = np.hstack([x[0], x,x[-1]])\n","  i = p*n+1.5\n","  iu = int(np.ceil(i))\n","  il = int(np.floor(i))\n","  d = i-il\n","  qq = x[il-1]*(1-d)+x[iu-1]*d\n","  return qq\n","\n","#% Number of own shops (in state space; capped at 3), from the perspective of each firm\n","Ni_aw = (N_aw <= 3)*N_aw + (N_aw > 3)*3\n","Ni_bk = (N_bk <= 3)*N_bk + (N_bk > 3)*3\n","Ni_hvy = (N_hvy <= 3)*N_hvy + (N_hvy > 3)*3\n","Ni_mcd = (N_mcd <= 3)*N_mcd + (N_mcd > 3)*3\n","Ni_wdy = (N_wdy <= 3)*N_wdy + (N_wdy > 3)*3\n","\n","#% Number of rival shops (in state space; capped at 3), from the perspective of each firm\n","Nj_aw = N_bk + N_hvy + N_mcd + N_wdy\n","Nj_bk = N_aw + N_hvy + N_mcd + N_wdy\n","Nj_hvy = N_aw + N_bk + N_mcd + N_wdy\n","Nj_mcd = N_aw + N_bk + N_hvy + N_wdy\n","Nj_wdy = N_aw + N_bk + N_hvy + N_mcd\n","Nj_aw = (Nj_aw <= 3)*Nj_aw + (Nj_aw > 3)*3     \n","Nj_bk = (Nj_bk <= 3)*Nj_bk + (Nj_bk > 3)*3\n","Nj_hvy = (Nj_hvy <= 3)*Nj_hvy + (Nj_hvy > 3)*3\n","Nj_mcd = (Nj_mcd <= 3)*Nj_mcd + (Nj_mcd > 3)*3\n","Nj_wdy = (Nj_wdy <= 3)*Nj_wdy + (Nj_wdy > 3)*3\n","\n","#% Number of pop,val,inc (in state space; capped at 3)\n","pop25 = quantile(pop,0.25)\n","val25 = quantile(val,0.25)   \n","inc25 = quantile(inc,0.25)  \n","pop50 = quantile(pop,0.5) \n","val50 = quantile(val,0.5)   \n","inc50 = quantile(inc,0.5)  \n","pop75 = quantile(pop,0.75) \n","val75 = quantile(val,0.75)   \n","inc75 = quantile(inc,0.75)   \n","disc_pop = np.int_(pop > pop25) + np.int_(pop > pop50) + np.int_(pop > pop75)  \n","disc_val = np.int_(val > val25) + np.int_(val > val50) + np.int_(val > val75)  \n","disc_inc = np.int_(inc > inc25) + np.int_( inc > inc50) + np.int_(inc > inc75)\n","\n","#% Define state variables for each firm\n","RHS_aw = np.vstack([Ni_aw, Nj_aw, disc_pop,disc_val, disc_inc]).T#;         % State for A & W.      \n","RHS_bk = np.vstack([Ni_bk, Nj_bk, disc_pop,disc_val, disc_inc]).T#;         % State for Burger King.      \n","RHS_hvy = np.vstack([Ni_hvy, Nj_hvy, disc_pop,disc_val, disc_inc]).T#;      % State for Harvey's.      \n","RHS_mcd = np.vstack([Ni_mcd, Nj_mcd, disc_pop, disc_val,disc_inc]).T#;      % State for McDonald's.      \n","RHS_wdy = np.vstack( [Ni_wdy, Nj_wdy, disc_pop,disc_val, disc_inc]).T#;"],"metadata":{"id":"h858GZ1aTOpl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["stateID_aw = Ni_aw*4**4+Nj_aw*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_bk = Ni_bk*4**4+Nj_bk*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_hvy = Ni_hvy*4**4+Nj_hvy*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_mcd = Ni_mcd*4**4+Nj_mcd*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_wdy = Ni_wdy*4**4+Nj_wdy*4**3+disc_pop*4**2+disc_val*4**1+disc_inc\n","stateID_other = np.hstack([stateID_aw,stateID_bk,stateID_hvy,stateID_wdy])\n","\n","ai_aw = -1*np.int_(a_aw<0) + 0*np.int_(a_aw==0) + 1*np.int_(a_aw>0)+1\n","ai_bk = -1*np.int_(a_bk<0) + 0*np.int_(a_bk==0) + 1*np.int_(a_bk>0) +1\n","ai_hvy = -1*np.int_(a_hvy<0) + 0*np.int_(a_hvy==0) + 1*np.int_(a_hvy>0)+1\n","ai_mcd = -1*np.int_(a_mcd<0) + 0*np.int_(a_mcd==0) + 1*np.int_(a_mcd>0)+1\n","ai_wdy = -1*np.int_(a_wdy<0) + 0*np.int_(a_wdy==0) + 1*np.int_(a_wdy>0)+1\n","ai_other = np.hstack([ai_aw,ai_bk,ai_hvy,ai_wdy])"],"metadata":{"id":"8zynDHPwUux0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["numstates = 5 # ni,nj,pop,val,inc\n","states_full = np.arange(4**numstates)\n","Ni = states_full//(4**(numstates-1))                       #Number of own outlets: {0,1,2,3+}.\n","Nj = states_full%(4**(numstates-1))//(4**(numstates-2))    #Number of rival outlets: {0,1,2,3+}.\n","dz1 = states_full%(4**(numstates-2))//(4**(numstates-3))   #Discretized population state: {0,1,2,3}.\n","dz2 = states_full%(4**(numstates-3))//(4**(numstates-4))   #Discretized property value state: {0,1,2,3}.\n","dz3 = states_full%(4**(numstates-4))                       #Discretized income state: {0,1,2,3}.\n","print(np.sum(np.abs(Ni*4**4+Nj*4**3+dz1*4**2+dz2*4**1+dz3-states_full)))\n","states = np.stack([Ni,Nj,dz1,dz2,dz3],axis=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KgqQpwj6Nijm","executionInfo":{"status":"ok","timestamp":1665086763869,"user_tz":300,"elapsed":8,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"99298326-8da5-4256-b5c8-5ed4e755c33f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","filename = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/Picture/'\n","data_extra = pd.read_csv(filename+'ExtraData.csv')\n","gdp = data_extra['GDP_Grwoth_Rate']\n","#gdp50 = quantile(gdp,0.5)  \n","obser = 2\n","disc_gdp = np.int_(gdp > 0) #+ np.int_(gdp > gdp75)  #np.int_(gdp>gdp50)#\n","disc_gdp = disc_gdp\n","trans_gdp = np.zeros([obser,obser],dtype=int)\n","\n","for i in range(34):\n","  trans_gdp[disc_gdp[i],disc_gdp[i+1]] +=1\n","print(trans_gdp)\n","trans_gdp = trans_gdp/np.kron(np.ones([1,obser]),np.sum(trans_gdp,axis=1).reshape([-1,1]))\n","print(trans_gdp)\n","disc_gdp = (np.repeat(disc_gdp[0:TimePeriod],SamplePath).reshape([TimePeriod,SamplePath]).T).reshape(-1)\n","#disc_gdp = disc_gdp[mtype_int_new==1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qjs2sEDZ_uq","executionInfo":{"status":"ok","timestamp":1665086764133,"user_tz":300,"elapsed":270,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"e6d0825b-8c3f-464c-9025-3b0f48224066"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[ 1  2]\n"," [ 2 29]]\n","[[0.33333333 0.66666667]\n"," [0.06451613 0.93548387]]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","filename = '/content/drive/MyDrive/2022_SUMMER/Research_Burger/Picture/'\n","data_extra = pd.read_csv(filename+'ExtraData.csv')\n","infr = data_extra['InflationRateLag_wb']\n","infr50 = quantile(infr,0.5)  \n","obser = 2\n","disc_infr = np.int_(infr <=infr50)  #np.int_(gdp>gdp50)#\n","disc_infr = disc_infr\n","trans_infr = np.zeros([obser,obser],dtype=int)\n","\n","for i in range(34):\n","  trans_infr[disc_infr[i],disc_infr[i+1]] +=1\n","print(trans_infr)\n","trans_infr = trans_infr/np.kron(np.ones([1,obser]),np.sum(trans_infr,axis=1).reshape([-1,1]))\n","print(trans_infr)\n","#print(disc_infr)\n","disc_infr = (np.repeat(disc_infr[0:TimePeriod],SamplePath).reshape([TimePeriod,SamplePath]).T).reshape(-1)\n","#disc_gdp = disc_gdp[mtype_int_new==1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665086764133,"user_tz":300,"elapsed":4,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6e964614-54e8-46af-95ba-69ea37394625","id":"yS5wMfBcPicb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[[15  3]\n"," [ 3 13]]\n","[[0.83333333 0.16666667]\n"," [0.1875     0.8125    ]]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","data_sum = pd.DataFrame(data=[],columns=['McDonalds','A&W','Harveys','BurgerKing','Wendys','Population','Income','PropertyValue','RealGDP_wb','InflationRate','MarketType'])\n","data_sum['McDonalds'] = N_mcd\n","data_sum['A&W'] = N_aw\n","data_sum['Harveys'] = N_hvy\n","data_sum['BurgerKing'] = N_bk\n","data_sum['Wendys'] = N_wdy\n","data_sum['Population'] = pop\n","data_sum['Income'] = inc\n","data_sum['PropertyValue'] = val\n","data_sum['RealGDP_wb'] = np.kron(np.ones(SamplePath),data_extra['RealGDP_wb'][0:TimePeriod].to_numpy())\n","data_sum['InflationRate'] = np.kron(np.ones(SamplePath),data_extra['InflationRate_wb'][0:TimePeriod].to_numpy())\n","data_sum['MarketType'] = tertile"],"metadata":{"id":"TiXb6Mw_SAaX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(1,4):\n","  #np.round_(data_sum.describe().iloc[7],1)\n","  print(np.round_(data_sum[data_sum['MarketType']==i].describe().iloc[7],1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nHz5q0xbXrZp","executionInfo":{"status":"ok","timestamp":1665086764396,"user_tz":300,"elapsed":265,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"a1556b09-f79e-48b0-a64a-d26e31ef545f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["McDonalds              1.0\n","A&W                    1.0\n","Harveys                2.0\n","BurgerKing             1.0\n","Wendys                 1.0\n","Population         80880.0\n","Income            191340.0\n","PropertyValue     770740.0\n","RealGDP_wb       1592932.5\n","InflationRate         12.5\n","MarketType             1.0\n","Name: max, dtype: float64\n","McDonalds              2.0\n","A&W                    2.0\n","Harveys                2.0\n","BurgerKing             2.0\n","Wendys                 2.0\n","Population         56416.0\n","Income            191340.0\n","PropertyValue     847670.0\n","RealGDP_wb       1592932.5\n","InflationRate         12.5\n","MarketType             2.0\n","Name: max, dtype: float64\n","McDonalds              7.0\n","A&W                    4.0\n","Harveys                2.0\n","BurgerKing             3.0\n","Wendys                 2.0\n","Population         80880.0\n","Income            142460.0\n","PropertyValue     670260.0\n","RealGDP_wb       1592932.5\n","InflationRate         12.5\n","MarketType             3.0\n","Name: max, dtype: float64\n"]}]},{"cell_type":"markdown","source":["# Ordered Probit Regression"],"metadata":{"id":"VyghZf0ZyBbp"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import scipy.stats as stats\n","from statsmodels.miscmodels.ordinal_model import OrderedModel\n","from pandas.api.types import CategoricalDtype"],"metadata":{"id":"Zb59puAdyBbq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["action_type = CategoricalDtype(categories=['exit', 'unchanged', 'enter'], ordered=True)\n","ai = np.hstack([ai_aw,ai_bk,ai_hvy,ai_mcd,ai_wdy])\n","ai_label=[]\n","for i in range(len(ai)):\n","  if ai[i] == 0:\n","    ai_label.append('exit')\n","  elif ai[i] ==1:\n","    ai_label.append('unchanged')\n","  else:\n","    ai_label.append('enter')\n","    \n","data_opr = pd.DataFrame(data=[],columns=['Action','Own','Rival','Population','Income','PropertyValue','RealGDP_wb','InflationRate','MarketType'])\n","data_opr['Action'] = ai_label\n","data_opr['Action'] = data_opr['Action'].astype(action_type)\n","data_opr['Own'] = np.hstack([N_aw,N_bk,N_hvy,N_mcd,N_wdy])\n","data_opr['Rival'] =np.hstack([N_mcd +N_hvy +N_bk + N_wdy,\n","                              N_aw +N_hvy +N_mcd + N_wdy,\n","                              N_aw +N_mcd +N_bk + N_wdy,\n","                              N_aw +N_hvy +N_bk + N_wdy,\n","                              N_aw +N_hvy +N_bk + N_mcd])#Nj_mcd#\n","data_opr['Population'] = np.hstack([pop,pop,pop,pop,pop])/1000#disc_pop#\n","data_opr['Income'] = np.hstack([inc,inc,inc,inc,inc])/1000#disc_inc#\n","data_opr['PropertyValue'] = np.hstack([val,val,val,val,val])/1000#disc_val#\n","real_gdp = np.kron(np.ones(SamplePath),data_extra['RealGDP_wb'][0:TimePeriod].to_numpy())\n","data_opr['RealGDP_wb'] = np.hstack([real_gdp,real_gdp,real_gdp,real_gdp,real_gdp])/1000000#disc_gdp#\n","real_inf = np.kron(np.ones(SamplePath),data_extra['InflationRate_wb'][0:TimePeriod].to_numpy())\n","data_opr['InflationRate'] = np.hstack([real_inf,real_inf,real_inf,real_inf,real_inf])#disc_infr#\n","data_opr['MarketType'] = np.hstack([tertile,tertile,tertile,tertile,tertile])"],"metadata":{"id":"1pwbCDtvyBbq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_opr_dist = pd.DataFrame(data=[],columns=['Action','Own','Rival','Population','Income','PropertyValue','RealGDP_wb','InflationRate','MarketType'])\n","data_opr_dist['Action'] = ai_label\n","data_opr_dist['Action'] = data_opr_dist['Action'].astype(action_type)\n","data_opr_dist['Own'] = np.hstack([Ni_aw,Ni_bk,Ni_hvy,Ni_mcd,Ni_wdy])\n","data_opr_dist['Rival'] =np.hstack([Nj_aw,Nj_bk,Nj_hvy,Nj_mcd,Nj_wdy])#Nj_mcd#\n","data_opr_dist['Population'] = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,disc_pop])#/1000#disc_pop#\n","data_opr_dist['Income'] = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc,disc_inc])#/1000#disc_inc#\n","data_opr_dist['PropertyValue'] = np.hstack([disc_val,disc_val,disc_val,disc_val,disc_val])#/1000#disc_val#\n","data_opr_dist['DistGDP'] = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp,disc_gdp])#/1000000#disc_gdp#\n","data_opr_dist['DistInflation'] = np.hstack([disc_infr,disc_infr,disc_infr,disc_infr,disc_infr])#disc_infr#\n","data_opr_dist['MarketType'] = np.hstack([tertile,tertile,tertile,tertile,tertile])"],"metadata":{"id":"96lof_0wy6qJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##orer probit"],"metadata":{"id":"YnSJjz8t2sFK"}},{"cell_type":"code","source":["X = data_opr_dist[['Own','Rival','Population','Income','PropertyValue','DistGDP','DistInflation']]#[data_opr_dist['MarketType']==mk+1]\n","y = data_opr_dist['Action']#[data_opr_dist['MarketType']==mk+1]\n","mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","                        distr='probit')\n","res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","print(res_prob.summary())\n","print(res_prob.prsquared)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ASvm7Gjr1_rv","executionInfo":{"status":"ok","timestamp":1665086810786,"user_tz":300,"elapsed":40225,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"ff02b60a-bb01-4793-e1f6-ac8e334b0b11"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -5897.8\n","Model:                   OrderedModel   AIC:                         1.181e+04\n","Method:            Maximum Likelihood   BIC:                         1.190e+04\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:06:50                                         \n","No. Observations:               70000                                         \n","Df Residuals:                   69991                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -0.3762      0.027    -13.961      0.000      -0.429      -0.323\n","Rival               0.0115      0.013      0.856      0.392      -0.015       0.038\n","Population      -7.174e-05      0.011     -0.007      0.995      -0.021       0.021\n","Income              0.0155      0.012      1.335      0.182      -0.007       0.038\n","PropertyValue       0.0382      0.012      3.251      0.001       0.015       0.061\n","DistGDP             0.0658      0.042      1.548      0.122      -0.018       0.149\n","DistInflation       0.0981      0.027      3.679      0.000       0.046       0.150\n","exit/unchanged     -2.7001      0.052    -52.351      0.000      -2.801      -2.599\n","unchanged/enter     1.6296      0.006    284.292      0.000       1.618       1.641\n","===================================================================================\n","0.01910873121492196\n"]}]},{"cell_type":"code","source":["for mk in range(3):\n","  print('#############')\n","  print('market type:',mk+1)\n","  # X = data_opr[['Own','Rival','Population','Income','PropertyValue','RealGDP_wb']][data_opr['MarketType']==mk+1]\n","  # y = data_opr['Action'][data_opr['MarketType']==mk+1]\n","  # mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","  #                         distr='probit')\n","  # res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","  # print(res_prob.summary())\n","  X = data_opr_dist[['Own','Rival','Population','Income','PropertyValue','DistGDP','DistInflation']][data_opr_dist['MarketType']==mk+1]\n","  y = data_opr_dist['Action'][data_opr_dist['MarketType']==mk+1]\n","  mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","                          distr='probit')\n","  res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","  print(res_prob.summary())\n","  print(res_prob.prsquared)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665087643202,"user_tz":300,"elapsed":28976,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"b612f1c4-5257-4a78-a032-04c94b654071","id":"n9WkBXeEyBbr"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["#############\n","market type: 1\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -964.69\n","Model:                   OrderedModel   AIC:                             1947.\n","Method:            Maximum Likelihood   BIC:                             2020.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:20:27                                         \n","No. Observations:               23275                                         \n","Df Residuals:                   23266                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -2.2713      0.198    -11.453      0.000      -2.660      -1.883\n","Rival              -0.4974      0.081     -6.103      0.000      -0.657      -0.338\n","Population          0.1185      0.029      4.030      0.000       0.061       0.176\n","Income              0.0393      0.030      1.298      0.194      -0.020       0.099\n","PropertyValue       0.1130      0.032      3.529      0.000       0.050       0.176\n","DistGDP             0.1365      0.113      1.204      0.228      -0.086       0.359\n","DistInflation       0.3125      0.068      4.616      0.000       0.180       0.445\n","exit/unchanged     -3.3727      0.222    -15.216      0.000      -3.807      -2.938\n","unchanged/enter     1.8907      0.030     62.652      0.000       1.832       1.950\n","===================================================================================\n","0.17562379255285643\n","#############\n","market type: 2\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -1569.0\n","Model:                   OrderedModel   AIC:                             3156.\n","Method:            Maximum Likelihood   BIC:                             3229.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:20:35                                         \n","No. Observations:               23450                                         \n","Df Residuals:                   23441                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -0.9610      0.073    -13.098      0.000      -1.105      -0.817\n","Rival              -0.3615      0.041     -8.857      0.000      -0.442      -0.282\n","Population          0.0728      0.021      3.532      0.000       0.032       0.113\n","Income              0.1007      0.023      4.424      0.000       0.056       0.145\n","PropertyValue       0.0778      0.023      3.368      0.001       0.033       0.123\n","DistGDP             0.1494      0.085      1.755      0.079      -0.017       0.316\n","DistInflation       0.2470      0.051      4.802      0.000       0.146       0.348\n","exit/unchanged     -2.8219      0.105    -26.852      0.000      -3.028      -2.616\n","unchanged/enter     1.7152      0.013    129.612      0.000       1.689       1.741\n","===================================================================================\n","0.07615894459380024\n","#############\n","market type: 3\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -2966.1\n","Model:                   OrderedModel   AIC:                             5950.\n","Method:            Maximum Likelihood   BIC:                             6023.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:20:42                                         \n","No. Observations:               23275                                         \n","Df Residuals:                   23266                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -0.2542      0.030     -8.357      0.000      -0.314      -0.195\n","Rival              -0.0924      0.018     -5.037      0.000      -0.128      -0.056\n","Population          0.0190      0.016      1.176      0.239      -0.013       0.051\n","Income              0.0414      0.017      2.425      0.015       0.008       0.075\n","PropertyValue       0.0394      0.017      2.360      0.018       0.007       0.072\n","DistGDP             0.0180      0.060      0.301      0.763      -0.099       0.135\n","DistInflation       0.0853      0.039      2.161      0.031       0.008       0.163\n","exit/unchanged     -2.6937      0.075    -36.120      0.000      -2.840      -2.548\n","unchanged/enter     1.5556      0.009    176.872      0.000       1.538       1.573\n","===================================================================================\n","0.01635296676195419\n"]}]},{"cell_type":"markdown","source":["##orer logit"],"metadata":{"id":"smoeUBYc2yHa"}},{"cell_type":"code","source":["X = data_opr_dist[['Own','Rival','Population','Income','PropertyValue','DistGDP','DistInflation']]#[data_opr_dist['MarketType']==mk+1]\n","y = data_opr_dist['Action']#[data_opr_dist['MarketType']==mk+1]\n","mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","                        distr='logit')\n","res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","print(res_prob.summary())\n","print(res_prob.prsquared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665086870227,"user_tz":300,"elapsed":33347,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"b0a1b33e-0d2b-42d4-bbc6-252f9429a9f2","id":"ii-WRHvr2yHb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -5906.1\n","Model:                   OrderedModel   AIC:                         1.183e+04\n","Method:            Maximum Likelihood   BIC:                         1.191e+04\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:07:49                                         \n","No. Observations:               70000                                         \n","Df Residuals:                   69991                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -1.0512      0.077    -13.708      0.000      -1.202      -0.901\n","Rival               0.0291      0.037      0.789      0.430      -0.043       0.101\n","Population          0.0024      0.028      0.085      0.932      -0.053       0.058\n","Income              0.0450      0.031      1.442      0.149      -0.016       0.106\n","PropertyValue       0.1011      0.032      3.196      0.001       0.039       0.163\n","DistGDP             0.1931      0.117      1.648      0.099      -0.037       0.423\n","DistInflation       0.2641      0.072      3.670      0.000       0.123       0.405\n","exit/unchanged     -5.6316      0.144    -39.160      0.000      -5.913      -5.350\n","unchanged/enter     2.3490      0.008    286.140      0.000       2.333       2.365\n","===================================================================================\n","0.01772982732702899\n"]}]},{"cell_type":"code","source":["for mk in range(3):\n","  print('#############')\n","  print(mk+1)\n","  # X = data_opr[['Own','Rival','Population','Income','PropertyValue','RealGDP_wb']][data_opr['MarketType']==mk+1]\n","  # y = data_opr['Action'][data_opr['MarketType']==mk+1]\n","  # mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","  #                         distr='probit')\n","  # res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","  # print(res_prob.summary())\n","  X = data_opr_dist[['Own','Rival','Population','Income','PropertyValue','DistGDP','DistInflation']][data_opr_dist['MarketType']==mk+1]\n","  y = data_opr_dist['Action'][data_opr_dist['MarketType']==mk+1]\n","  mod_prob = OrderedModel(y,X,#,disc_infr_other],axis=1),\n","                          distr='logit')\n","  res_prob = mod_prob.fit(method='bfgs',disp=False)#(method='minimize')\n","  print(res_prob.summary())\n","  print(res_prob.prsquared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1665086903715,"user_tz":300,"elapsed":33505,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6c5ebaa6-fea6-4e53-ee8b-5083e0862003","id":"TpzeQKvl2yHb"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["#############\n","1\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -973.07\n","Model:                   OrderedModel   AIC:                             1964.\n","Method:            Maximum Likelihood   BIC:                             2037.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:08:02                                         \n","No. Observations:               23275                                         \n","Df Residuals:                   23266                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -5.7201      0.473    -12.081      0.000      -6.648      -4.792\n","Rival              -1.1750      0.204     -5.752      0.000      -1.575      -0.775\n","Population          0.3000      0.079      3.796      0.000       0.145       0.455\n","Income              0.0717      0.081      0.881      0.378      -0.088       0.231\n","PropertyValue       0.2679      0.086      3.104      0.002       0.099       0.437\n","DistGDP             0.4645      0.303      1.530      0.126      -0.130       1.059\n","DistInflation       0.8341      0.186      4.478      0.000       0.469       1.199\n","exit/unchanged     -7.4181      0.555    -13.359      0.000      -8.506      -6.330\n","unchanged/enter     2.6708      0.034     77.643      0.000       2.603       2.738\n","===================================================================================\n","0.1684624425549346\n","#############\n","2\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -1568.2\n","Model:                   OrderedModel   AIC:                             3154.\n","Method:            Maximum Likelihood   BIC:                             3227.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:08:13                                         \n","No. Observations:               23450                                         \n","Df Residuals:                   23441                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -2.7432      0.202    -13.604      0.000      -3.138      -2.348\n","Rival              -1.0033      0.110     -9.152      0.000      -1.218      -0.788\n","Population          0.1983      0.055      3.622      0.000       0.091       0.306\n","Income              0.2728      0.060      4.575      0.000       0.156       0.390\n","PropertyValue       0.2134      0.062      3.433      0.001       0.092       0.335\n","DistGDP             0.4537      0.235      1.933      0.053      -0.006       0.914\n","DistInflation       0.6824      0.137      4.994      0.000       0.415       0.950\n","exit/unchanged     -6.0439      0.298    -20.314      0.000      -6.627      -5.461\n","unchanged/enter     2.4724      0.019    130.749      0.000       2.435       2.509\n","===================================================================================\n","0.07664823580889923\n","#############\n","3\n","                             OrderedModel Results                             \n","==============================================================================\n","Dep. Variable:                 Action   Log-Likelihood:                -2970.7\n","Model:                   OrderedModel   AIC:                             5959.\n","Method:            Maximum Likelihood   BIC:                             6032.\n","Date:                Thu, 06 Oct 2022                                         \n","Time:                        20:08:23                                         \n","No. Observations:               23275                                         \n","Df Residuals:                   23266                                         \n","Df Model:                           9                                         \n","===================================================================================\n","                      coef    std err          z      P>|z|      [0.025      0.975]\n","-----------------------------------------------------------------------------------\n","Own                -0.6425      0.083     -7.759      0.000      -0.805      -0.480\n","Rival              -0.2347      0.047     -4.990      0.000      -0.327      -0.142\n","Population          0.0536      0.041      1.312      0.190      -0.026       0.134\n","Income              0.1119      0.043      2.607      0.009       0.028       0.196\n","PropertyValue       0.0991      0.042      2.356      0.018       0.017       0.182\n","DistGDP             0.0407      0.153      0.266      0.790      -0.259       0.341\n","DistInflation       0.2181      0.100      2.188      0.029       0.023       0.413\n","exit/unchanged     -5.5599      0.196    -28.435      0.000      -5.943      -5.177\n","unchanged/enter     2.2473      0.012    182.594      0.000       2.223       2.271\n","===================================================================================\n","0.014829956857719928\n"]}]},{"cell_type":"markdown","source":["# Regression"],"metadata":{"id":"OwewpVoWFu7P"}},{"cell_type":"code","source":["market = 3"],"metadata":{"id":"3Ex9iqTq2B_r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### GDP"],"metadata":{"id":"OrmTSU7C7RM-"}},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","from sklearn.linear_model import LinearRegression\n","for mk in range(market):\n","  rand_num = 500\n","  print('\\n')\n","  print('Market:{}################'.format(mk+1))\n","  print('MCD-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  gamma_new = []\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_mcd,Nj_mcd,disc_pop,disc_val,disc_inc,disc_gdp],axis=1)#,disc_infr],axis=1)\n","    y = ai_mcd - v[i]-1\n","\n","    X = X[tertile==mk+1]\n","    y= y[tertile==mk+1]      \n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_mcd = np.mean(np.array(gamma),axis=0)\n","  stdr_mcd = np.std(np.array(gamma),axis=0)\n","  print(''.join(['&{:.3f}'.format(meanr_mcd[i]) for i in range(len(meanr_mcd))]))\n","  print(''.join(['&({:.3f})'.format(stdr_mcd[i]) for i in range(len(stdr_mcd))]))\n","\n","  print('Other-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*4])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  Ni_other = np.hstack([Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","  Nj_other = np.hstack([Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","  disc_pop_other = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,])\n","  disc_val_other = np.hstack([disc_val,disc_val,disc_val,disc_val])\n","  disc_inc_other = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc])\n","  disc_gdp_other = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","  disc_infr_other = np.hstack([disc_infr,disc_infr,disc_infr,disc_infr])\n","\n","  mtype_int_4 = np.hstack([tertile,tertile,tertile,tertile])\n","  ai_other = np.hstack([ai_aw,ai_bk,ai_hvy,ai_wdy])\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_other,Nj_other,disc_pop_other,disc_val_other,disc_inc_other,disc_gdp_other],axis=1)#,disc_infr_other],axis=1)\n","    y = ai_other-v[i]-1\n","    X = X[mtype_int_4==mk+1]#[mtype_int_4==market]\n","    y= y[mtype_int_4==mk+1]#[mtype_int_4==market]\n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_other = np.mean(np.array(gamma),axis=0)\n","  stdr_other = np.std(np.array(gamma),axis=0)\n","  print(''.join(['&{:.3f}'.format(meanr_other[i]) for i in range(len(meanr_other))]))\n","  print(''.join(['&({:.3f})'.format(stdr_other[i]) for i in range(len(stdr_other))]))\n","\n","  print('Full-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*5])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  Ni_full = np.hstack([Ni_mcd,Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","  Nj_full = np.hstack([Nj_mcd,Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","  disc_pop_full = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,disc_pop])\n","  disc_val_full = np.hstack([disc_val,disc_val,disc_val,disc_val,disc_val])\n","  disc_inc_full = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc,disc_inc])\n","  disc_gdp_full = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","  disc_infr_full = np.hstack([disc_infr,disc_infr,disc_infr,disc_infr,disc_infr])\n","\n","  mtype_int_5 = np.hstack([tertile,tertile,tertile,tertile,tertile])\n","  ai_full = np.hstack([ai_mcd,ai_aw,ai_bk,ai_hvy,ai_wdy])\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_full,Nj_full,disc_pop_full,disc_val_full,disc_inc_full,disc_gdp_full],axis=1)#,disc_infr_full],axis=1)\n","    y = ai_full-v[i]-1\n","    X = X[mtype_int_5==mk+1]#[mtype_int_5==market]\n","    y= y[mtype_int_5==mk+1]#[mtype_int_5==market]\n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_full = np.mean(np.array(gamma),axis=0)\n","  stdr_full = np.std(np.array(gamma),axis=0)\n","  print(['{:2.6f}'.format(meanr_full[i]) for i in range(len(meanr_full))])\n","  print(['{:2.6f}'.format(stdr_full[i]) for i in range(len(stdr_full))])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GfrRC1SnBMVl","executionInfo":{"status":"ok","timestamp":1664734786492,"user_tz":300,"elapsed":45305,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"04e2a3ca-ebbc-4d0d-a66f-60ed06c20c93"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","Market:1################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 349.73it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.029&-0.013&0.002&0.007&0.003&-0.001\n","&(0.000)&(0.053)&(0.038)&(0.013)&(0.014)&(0.014)&(0.031)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 103.98it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.068&-0.005&0.002&0.001&0.000&0.001\n","&(0.000)&(0.036)&(0.016)&(0.007)&(0.007)&(0.007)&(0.016)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 102.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.045725', '-0.008073', '0.002022', '0.002189', '0.000900', '-0.000806']\n","['0.000000', '0.027983', '0.014728', '0.005698', '0.006480', '0.005982', '0.014107']\n","\n","\n","Market:2################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 351.27it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.028&-0.009&0.008&0.005&0.006&0.008\n","&(0.000)&(0.034)&(0.029)&(0.013)&(0.014)&(0.014)&(0.029)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:05<00:00, 86.18it/s] \n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.039&-0.007&0.001&0.001&0.003&0.004\n","&(0.000)&(0.027)&(0.012)&(0.007)&(0.007)&(0.007)&(0.014)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:05<00:00, 99.62it/s] \n"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.024803', '-0.009697', '0.002814', '0.002225', '0.003947', '0.003970']\n","['0.000000', '0.018516', '0.010445', '0.005579', '0.006114', '0.006201', '0.012564']\n","\n","\n","Market:3################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 348.94it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.022&0.000&0.003&0.008&0.004&0.038\n","&(0.000)&(0.021)&(0.016)&(0.014)&(0.014)&(0.015)&(0.028)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 110.19it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.029&-0.001&0.003&0.002&0.004&0.006\n","&(0.000)&(0.016)&(0.008)&(0.007)&(0.007)&(0.007)&(0.015)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:05<00:00, 86.07it/s]"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.013208', '-0.004698', '0.002733', '0.003604', '0.004062', '0.013139']\n","['0.000000', '0.011552', '0.006700', '0.006420', '0.006447', '0.006515', '0.012959']\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"markdown","source":["### Inflation rate"],"metadata":{"id":"WcHhnNBz7Ull"}},{"cell_type":"code","source":["import numpy as np\n","from tqdm import tqdm\n","from sklearn.linear_model import LinearRegression\n","for mk in range(market):\n","  rand_num = 500\n","  print('\\n')\n","  print('Market:{}################'.format(mk+1))\n","  print('MCD-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  gamma_new = []\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_mcd,Nj_mcd,disc_pop,disc_val,disc_inc,disc_infr],axis=1)#,disc_infr],axis=1)\n","    y = ai_mcd - v[i]-1\n","\n","    X = X[tertile==mk+1]\n","    y= y[tertile==mk+1]      \n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_mcd = np.mean(np.array(gamma),axis=0)\n","  stdr_mcd = np.std(np.array(gamma),axis=0)\n","  print(''.join(['&{:.3f}'.format(meanr_mcd[i]) for i in range(len(meanr_mcd))]))\n","  print(''.join(['&({:.3f})'.format(stdr_mcd[i]) for i in range(len(stdr_mcd))]))\n","\n","  print('Other-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*4])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  Ni_other = np.hstack([Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","  Nj_other = np.hstack([Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","  disc_pop_other = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,])\n","  disc_val_other = np.hstack([disc_val,disc_val,disc_val,disc_val])\n","  disc_inc_other = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc])\n","  disc_gdp_other = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","  disc_infr_other = np.hstack([disc_infr,disc_infr,disc_infr,disc_infr])\n","\n","  mtype_int_4 = np.hstack([tertile,tertile,tertile,tertile])\n","  ai_other = np.hstack([ai_aw,ai_bk,ai_hvy,ai_wdy])\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_other,Nj_other,disc_pop_other,disc_val_other,disc_inc_other,disc_infr_other],axis=1)#,disc_infr_other],axis=1)\n","    y = ai_other-v[i]-1\n","    X = X[mtype_int_4==mk+1]#[mtype_int_4==market]\n","    y= y[mtype_int_4==mk+1]#[mtype_int_4==market]\n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_other = np.mean(np.array(gamma),axis=0)\n","  stdr_other = np.std(np.array(gamma),axis=0)\n","  print(''.join(['&{:.3f}'.format(meanr_other[i]) for i in range(len(meanr_other))]))\n","  print(''.join(['&({:.3f})'.format(stdr_other[i]) for i in range(len(stdr_other))]))\n","\n","  print('Full-------------------------------------------------------------')\n","  np.random.seed(0)\n","  v = np.random.standard_normal([rand_num,Ni_mcd.shape[0]*5])\n","  score = []\n","  coef = []\n","  intercept = []\n","  gamma = []\n","  Ni_full = np.hstack([Ni_mcd,Ni_aw,Ni_bk,Ni_hvy,Ni_wdy])\n","  Nj_full = np.hstack([Nj_mcd,Nj_aw,Nj_bk,Nj_hvy,Nj_wdy])\n","  disc_pop_full = np.hstack([disc_pop,disc_pop,disc_pop,disc_pop,disc_pop])\n","  disc_val_full = np.hstack([disc_val,disc_val,disc_val,disc_val,disc_val])\n","  disc_inc_full = np.hstack([disc_inc,disc_inc,disc_inc,disc_inc,disc_inc])\n","  disc_gdp_full = np.hstack([disc_gdp,disc_gdp,disc_gdp,disc_gdp,disc_gdp])\n","  disc_infr_full = np.hstack([disc_infr,disc_infr,disc_infr,disc_infr,disc_infr])\n","\n","  mtype_int_5 = np.hstack([tertile,tertile,tertile,tertile,tertile])\n","  ai_full = np.hstack([ai_mcd,ai_aw,ai_bk,ai_hvy,ai_wdy])\n","  for i in tqdm(range(rand_num)):\n","    X = np.stack([Ni_full,Nj_full,disc_pop_full,disc_val_full,disc_inc_full,disc_infr_full],axis=1)#,disc_infr_full],axis=1)\n","    y = ai_full-v[i]-1\n","    X = X[mtype_int_5==mk+1]#[mtype_int_5==market]\n","    y= y[mtype_int_5==mk+1]#[mtype_int_5==market]\n","    reg = LinearRegression(fit_intercept=False).fit(X, y)\n","    score.append(reg.score(X, y))\n","    coef.append(reg.coef_)\n","    intercept.append(reg.intercept_)\n","    gamma.append(np.hstack([reg.intercept_,reg.coef_]))\n","  print('---->')  \n","  meanr_full = np.mean(np.array(gamma),axis=0)\n","  stdr_full = np.std(np.array(gamma),axis=0)\n","  print(['{:2.6f}'.format(meanr_full[i]) for i in range(len(meanr_full))])\n","  print(['{:2.6f}'.format(stdr_full[i]) for i in range(len(stdr_full))])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cvU1gRRxd6oQ","executionInfo":{"status":"ok","timestamp":1664735273756,"user_tz":300,"elapsed":40914,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"c703eaa0-2992-4e77-ffdb-b3f30416b863"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","\n","Market:1################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 316.46it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.033&-0.016&0.001&0.005&0.002&0.018\n","&(0.000)&(0.052)&(0.038)&(0.011)&(0.014)&(0.014)&(0.032)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:03<00:00, 125.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.068&-0.005&0.002&0.000&0.000&0.002\n","&(0.000)&(0.036)&(0.017)&(0.006)&(0.007)&(0.007)&(0.017)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 102.24it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.047032', '-0.009379', '0.001429', '0.001344', '0.000408', '0.006185']\n","['0.000000', '0.028098', '0.014872', '0.005008', '0.006533', '0.005800', '0.013952']\n","\n","\n","Market:2################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 349.85it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.030&-0.009&0.008&0.006&0.006&0.009\n","&(0.000)&(0.035)&(0.029)&(0.012)&(0.014)&(0.013)&(0.033)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 122.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.040&-0.008&0.002&0.001&0.003&0.008\n","&(0.000)&(0.027)&(0.012)&(0.006)&(0.007)&(0.007)&(0.016)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:05<00:00, 97.54it/s] \n"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.026129', '-0.011023', '0.002876', '0.001944', '0.003797', '0.009107']\n","['0.000000', '0.018715', '0.010812', '0.005368', '0.005897', '0.005985', '0.014111']\n","\n","\n","Market:3################\n","MCD-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:01<00:00, 347.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.019&0.002&0.010&0.012&0.008&0.010\n","&(0.000)&(0.021)&(0.017)&(0.013)&(0.014)&(0.014)&(0.036)\n","Other-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:03<00:00, 125.84it/s]\n"]},{"output_type":"stream","name":"stdout","text":["---->\n","&0.000&-0.029&-0.001&0.004&0.003&0.004&0.004\n","&(0.000)&(0.016)&(0.008)&(0.007)&(0.007)&(0.007)&(0.018)\n","Full-------------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 500/500 [00:04<00:00, 105.28it/s]"]},{"output_type":"stream","name":"stdout","text":["---->\n","['0.000000', '-0.012850', '-0.004044', '0.004826', '0.004959', '0.005050', '0.005140']\n","['0.000000', '0.011743', '0.007006', '0.005921', '0.006386', '0.006441', '0.016065']\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]}]}