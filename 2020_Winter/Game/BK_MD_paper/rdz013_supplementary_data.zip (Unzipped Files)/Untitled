{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"authorship_tag":"ABX9TyOi/rU9sSKzd8DKf1XZlhhK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTvmOgtuOaEa","executionInfo":{"status":"ok","timestamp":1626814980186,"user_tz":300,"elapsed":17254,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"bef92b6d-78b1-4961-aa6e-7b487423e10e"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qXDSmkncOSDH","executionInfo":{"status":"ok","timestamp":1626814982115,"user_tz":300,"elapsed":1931,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}}},"source":["import pandas as pd\n","data = pd.io.stata.read_stata('/content/drive/MyDrive/2020_WINTER/Game/BK_MD_paper/rdz013_supplementary_data.zip (Unzipped Files)/toivanen_waterson_nolondon_20022019.dta')\n","data.to_csv('/content/drive/MyDrive/2020_WINTER/Game/BK_MD_paper/rdz013_supplementary_data.zip (Unzipped Files)/toivanen_waterson_nolondon_20022019.csv')"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":414},"id":"EA1-LrcSWtJd","executionInfo":{"status":"ok","timestamp":1626815009531,"user_tz":300,"elapsed":141,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"edca1ee2-2a41-4e18-f93d-6c3d4c9c81f5"},"source":["import numpy as np\n","# np.array(data['district_code'])[0:1000]\n","# #np.sum(np.array(data['_entry'])>=2)\n","data[['district_code','year','mcd_entry','bk_entry','district_area','population','gdp_pc']]"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>district_code</th>\n","      <th>year</th>\n","      <th>mcd_entry</th>\n","      <th>bk_entry</th>\n","      <th>district_area</th>\n","      <th>population</th>\n","      <th>gdp_pc</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1991</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94</td>\n","      <td>91.400002</td>\n","      <td>89.300003</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1992</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>94</td>\n","      <td>91.900002</td>\n","      <td>89.300003</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>1993</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94</td>\n","      <td>92.000000</td>\n","      <td>89.300003</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1994</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>94</td>\n","      <td>92.199997</td>\n","      <td>89.300003</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>1995</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>94</td>\n","      <td>92.000000</td>\n","      <td>89.300003</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2105</th>\n","      <td>423</td>\n","      <td>1991</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5236</td>\n","      <td>125.000000</td>\n","      <td>89.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2106</th>\n","      <td>423</td>\n","      <td>1992</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5236</td>\n","      <td>126.599998</td>\n","      <td>89.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2107</th>\n","      <td>423</td>\n","      <td>1993</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5236</td>\n","      <td>127.699997</td>\n","      <td>89.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2108</th>\n","      <td>423</td>\n","      <td>1994</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5236</td>\n","      <td>129.199997</td>\n","      <td>89.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2109</th>\n","      <td>423</td>\n","      <td>1995</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5236</td>\n","      <td>133.000000</td>\n","      <td>89.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2110 rows Ã— 7 columns</p>\n","</div>"],"text/plain":["      district_code  year  mcd_entry  ...  district_area  population     gdp_pc\n","0                 1  1991          0  ...             94   91.400002  89.300003\n","1                 1  1992          1  ...             94   91.900002  89.300003\n","2                 1  1993          0  ...             94   92.000000  89.300003\n","3                 1  1994          1  ...             94   92.199997  89.300003\n","4                 1  1995          0  ...             94   92.000000  89.300003\n","...             ...   ...        ...  ...            ...         ...        ...\n","2105            423  1991          0  ...           5236  125.000000  89.000000\n","2106            423  1992          0  ...           5236  126.599998  89.000000\n","2107            423  1993          0  ...           5236  127.699997  89.000000\n","2108            423  1994          0  ...           5236  129.199997  89.000000\n","2109            423  1995          0  ...           5236  133.000000  89.000000\n","\n","[2110 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O0lwcs6yuyS8","executionInfo":{"status":"ok","timestamp":1626815041555,"user_tz":300,"elapsed":149,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"eda9deed-791b-47dc-acd2-c56eb521831f"},"source":["np.unique(np.array(data['gdp_pc']))"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 69.4,  70.7,  72.9,  74.4,  75.5,  76.1,  76.4,  78.2,  79.1,\n","        80.2,  81.5,  82.6,  84.7,  84.9,  85. ,  85.9,  86.6,  87.1,\n","        87.3,  87.7,  88.3,  89. ,  89.3,  89.6,  90.1,  90.4,  90.8,\n","        91.2,  91.5,  91.7,  92. ,  92.5,  92.8,  93.3,  94.5,  94.8,\n","        96.2,  96.7,  97.2,  98. ,  98.3,  99. , 100.9, 101.6, 102.8,\n","       103.1, 103.6, 104.2, 104.6, 104.9, 107.3, 108.7, 110. , 110.5,\n","       110.9, 112.7, 113.4, 120. , 129. , 134.8], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"IgLrx6vD8jg4","executionInfo":{"status":"ok","timestamp":1626815225867,"user_tz":300,"elapsed":132,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}}},"source":["TimePeriod = 5\n","SamplePath = 422\n","\n","market_size = np.array(data['gdp_pc'])#np.array(data['population'])/np.array(data['district_area'])#10.6-1017\n","market_size = market_size.reshape([SamplePath,TimePeriod])\n","market_size = market_size - np.min(market_size)\n","market_size = market_size/np.max(market_size)\n","market_size = np.int_(market_size >=1/3) + np.int_(market_size>=2/3)\n","market_size = market_size.T\n","#print(market_size[:,0:100])"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"jvvEjL1bdOry","executionInfo":{"status":"ok","timestamp":1626815230342,"user_tz":300,"elapsed":138,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}}},"source":["# market_size = np.array(data['population'])\n","# market_size = market_size.reshape([SamplePath,TimePeriod])\n","# market_size = market_size - np.dot(np.min(market_size,axis=1).reshape([-1,1]),np.ones([1,5]))\n","# market_size = market_size/np.dot(np.max(market_size,axis=1).reshape([-1,1]),np.ones([1,5]))\n","# market_size = np.int_(market_size >=1/3) + np.int_(market_size>=2/3)\n","# market_size = market_size.T\n","\n","action1 = np.array(data['mcd_entry'],dtype = int)\n","action2 = np.array(data['bk_entry'],dtype = int)\n","action1[np.where(action1>=2)] = 1\n","action2[np.where(action2>=2)] = 1\n","action1 = (action1.reshape([SamplePath,TimePeriod])).T\n","action2 = (action2.reshape([SamplePath,TimePeriod])).T"],"execution_count":20,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ICcW0uR-lUxk","executionInfo":{"status":"ok","timestamp":1626815235065,"user_tz":300,"elapsed":133,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"a2ed594a-905b-4340-d803-633f9e094ce4"},"source":["obs_data = np.zeros([3,3])\n","for t in range(TimePeriod-1):\n","  for s in range(SamplePath):\n","    obs_data[market_size[t,s],market_size[t+1,s]] +=1\n","#print(obs_data,np.sum(obs_data,axis=1))\n","obs_data = obs_data/ np.dot(np.sum(obs_data,axis=1).reshape([-1,1]),np.ones([1,3]))\n","print(obs_data)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["[[1. 0. 0.]\n"," [0. 1. 0.]\n"," [0. 0. 1.]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cnJez1GSiH7a","executionInfo":{"status":"ok","timestamp":1626815241452,"user_tz":300,"elapsed":388,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}}},"source":["import numpy as np\n","from scipy.special import logsumexp\n","from scipy.special import softmax\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","theta1 = np.array([1.5,1,-1.9,-1.8,1]) #RS, FC1,FC2, EC\n","\n","trans_true = np.array([0.9,0.1])\n","obser_true = np.reshape(np.stack([obs_data,obs_data],axis=0)[:,:,0:-1],-1)#[0.2,0.3]\n","theta23 = np.hstack([trans_true,obser_true])\n","\n","agent = 2\n","za_dim =(agent+1)*(2**agent)\n","za_old = np.arange(za_dim,dtype = int)\n","\n","z_old = np.arange(agent+1,dtype=int) #observation\n","a1_old = np.arange(2,dtype = int)\n","a2_old = np.arange(2,dtype = int)\n","\n","num_discrete = 100\n","x_old = np.linspace(0,1,num_discrete)\n","\n","np.random.seed(0)\n","x0_belief = np.ones(SamplePath)#np.random.random(SamplePath)\n","#x0_belief"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"id":"N3Sk0R4aM7eF","executionInfo":{"status":"ok","timestamp":1626815247232,"user_tz":300,"elapsed":984,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}}},"source":["def Dynamic(theta23):\n","\n","  trans_val = theta23[0:2]\n","  obser_val = theta23[2:]\n","  trans = np.zeros([2,2]) #s_t,s_{t+1}\n","  trans[:,0] = trans_val\n","  trans[:,1] = 1- trans[:,0]\n","  \n","  observe = np.zeros([2,3,3]) #s_{t+1},z_t,z_{t+1}\n","  for s in range(2):\n","    for z in range(3):\n","      observe[s,z,0] = obser_val[s*6+z*2+0]\n","      observe[s,z,1] = obser_val[s*6+z*2+1]\n","      observe[s,z,2] = 1- observe[s,z,0]-observe[s,z,1] \n","\n","  # for s in range(2):\n","  #   observe[s,0,1] = observe[s,1,0] = observe[s,1,2]= observe[s,2,1] = obser_val[s]\n","  #   observe[s,0,0] = 1 - observe[s,0,1] -observe[s,0,2]\n","  #   observe[s,1,1] = 1 - observe[s,1,0] -observe[s,1,2]\n","  #   observe[s,2,2] = 1 - observe[s,2,0] - observe[s,2,1]\n","\n","  return trans,observe\n","#print(Dynamic(theta23))\n","\n","def Reward(theta1,ag_i): # 3*2*2, 2,2\n","  rw = np.zeros([2,(agent+1)*(2**agent),2,2])#st,z*a_{t-1},a_{t,1},a_{t,2}\n","  for s in range(2):\n","    if ag_i==1:\n","      rw[s,:,1,0] = (za_old%(agent+1)) * theta1[s]/((2+0)**2) - theta1[2] - theta1[4] * (1-((za_old//(agent+1))//2))\n","      rw[s,:,1,1] = (za_old%(agent+1)) * theta1[s]/((2+1)**2) - theta1[2] - theta1[4] * (1-((za_old//(agent+1))//2))\n","    elif ag_i==2:\n","      rw[s,:,0,1] = (za_old%(agent+1)) * theta1[s]/((2+0)**2) - theta1[3] - theta1[4] * (1-((za_old//(agent+1))%2))\n","      rw[s,:,1,1] = (za_old%(agent+1)) * theta1[s]/((2+1)**2) - theta1[3] - theta1[4] * (1-((za_old//(agent+1))%2))    \n","\n","  return rw\n","#print(Reward(theta1,2))\n","\n","#trans,observe = Dynamic(theta23)  #s_t,s_{t+1} #s_{t+1},z_t,z_{t+1}\n","\n","def SigmaLambda(za_old,z_old,x_old,trans,observe,num_discrete=num_discrete,T = None): #xt,z_t,z_{t+1}\n","  if T==None: #generate function for Q function iteration\n","      x_new = np.zeros([num_discrete,3,3])\n","      sigma = np.zeros([num_discrete,3,3])\n","      x_old = np.vstack([x_old,1-x_old]).T\n","\n","      for z_new in z_old:\n","        #for za in za_old:#range(2):\n","        #za = za_old%(agent+1)\n","        x_new_tep = x_old.dot(np.reshape(trans[:,0],[-1,1]).dot(observe[0,:,z_new].reshape([1,-1])))\n","        sigma[:,:,z_new] = x_new_tep + x_old.dot(np.reshape(trans[:,1],[-1,1]).dot(observe[1,:,z_new].reshape([1,-1])))\n","        sigma_0 = np.where(sigma[:,:,z_new]!=0)\n","        x_new[:,:,z_new][sigma_0] = x_new_tep[sigma_0] /sigma[:,:,z_new][sigma_0] \n","\n","      belief_f = np.floor(x_new*(num_discrete-1))/(num_discrete-1)\n","      belief_c = np.ceil(x_new*(num_discrete-1))/(num_discrete-1)\n","      iterpolate = np.zeros(belief_f.shape)\n","      iterpolate[np.where((belief_f-belief_c)!=0)] = (x_new-belief_c)[np.where((belief_f-belief_c)!=0)]/(belief_f-belief_c)[np.where((belief_f-belief_c)!=0)]\n","  elif T==1: #generate 1 period data for data generation\n","      x_new = np.zeros(x_old.shape)\n","      sigma = np.zeros(x_old.shape)\n","      # #x_old = np.vstack([x_old,1-x_old]).T\n","      # za = za_old%(agent+1)\n","     \n","      x_new_tep = (x_old  *trans[0,0] +(1-x_old)*trans[1,0])* observe[0,za_old,z_old]\n","      sigma = x_new_tep + (x_old *trans[0,1] + (1-x_old)*trans[1,1] )* observe[1,za_old,z_old]\n","      x_new = x_new_tep/sigma\n","\n","      belief_f = np.floor(x_new*(num_discrete-1))/(num_discrete-1)\n","      belief_c = np.ceil(x_new*(num_discrete-1))/(num_discrete-1)\n","      iterpolate = np.zeros(belief_f.shape)\n","      iterpolate[np.where((belief_f-belief_c)!=0)] = (x_new-belief_c)[np.where((belief_f-belief_c)!=0)]/(belief_f-belief_c)[np.where((belief_f-belief_c)!=0)]\n","  else:      #generate whole belief for recover process\n","      x_new = np.zeros([T,x_old.shape[0]]) # T, N\n","      sigma = np.zeros([T-1,x_old.shape[0]]) # T-1 ,N\n","      x_new[0,:] = x_old\n","      #x_old = np.vstack([x_old,1-x_old]).T\n","\n","      for t in range(1,T):\n","        # a1 = a1_old[t-1,:]\n","        # a2 = a2_old[t-1,:]\n","        za = z_old[t-1,:]\n","        z = z_old[t,:]\n","        x_new_tep = (x_new[t-1,:] *trans[0,0] + (1-x_new[t-1,:])*trans[1,0] )* observe[0,za,z]\n","        sigma[t-1,:] = x_new_tep + (x_new[t-1,:] *trans[0,1] + (1-x_new[t-1,:])*trans[1,1] )* observe[1,za,z]\n","        x_new[t,:] = x_new_tep/sigma[t-1,:]\n","\n","      belief_f = np.floor(x_new*(num_discrete-1))/(num_discrete-1)\n","      belief_c = np.ceil(x_new*(num_discrete-1))/(num_discrete-1)\n","      iterpolate = np.zeros(belief_f.shape)\n","      iterpolate[np.where((belief_f-belief_c)!=0)] = (x_new-belief_c)[np.where((belief_f-belief_c)!=0)]/(belief_f-belief_c)[np.where((belief_f-belief_c)!=0)]      \n","\n","  return sigma,x_new,[iterpolate,np.int_(belief_f*(num_discrete-1)),np.int_(belief_c*(num_discrete-1))]\n","#print(SigmaLambda(None,z_old,x_old,trans,observe)[0][:,0,1,0,0])\n","\n","#trans,observe = Dynamic(theta23)  #s_t,s_{t+1} #s_{t+1},z_t,z_{t+1}\n","#sigma,x_new,xiterpolate = SigmaLambda(None,z_old,x_old,trans,observe)\n","\n","def ValueIteration(theta1,sigma,xiterpolate, num_discrete=num_discrete,beta = 0.95,\n","                   gamma = 0.5772,thread_inner = 1e-5,thread_outer = 1e-5): #xt,za, a1 or xt,za, a2\n","  rw1,rw2 = Reward(theta1,1), Reward(theta1,2) #st,z*a_{t-1},a_{t,1},a_{t,2}\n","  iterpolate,belief_f,belief_c = xiterpolate[0],xiterpolate[1],xiterpolate[2]#xt,zt,z_{t+1}\n","  x_old = np.linspace(0,1,num=num_discrete).reshape([-1,1])\n","  #x_old = np.vstack([x_old,1-x_old]).T\n","\n","  pi1_new = 0.5*np.ones([num_discrete,za_dim,2]) #xt,za,a1\n","\n","  pi2_old = pi1_new.copy()\n","  #count = 0\n","  #pi1_old = np.zeros([2,2])\n","  for ol in range(1000):\n","    pi1_old = pi1_new.copy()\n","    \n","    Q1_new = np.zeros([num_discrete,za_dim,2]) #xt,za,a1\n","    Q2_new = np.zeros([num_discrete,za_dim,2]) #xt,za,a2\n","\n","    for il in range(1000):\n","      Q2_old = Q2_new.copy() #xt,za,a2\n","      za = za_old%(agent+1)\n","\n","      for a2 in range(2):\n","        #a1 = 0\n","        V2_a10 = []\n","        for z_new in z_old:\n","          znew_a10= (0 *2+a2)*3 + z_new\n","          it0,bf0,bc0 = iterpolate[:,za,z_new],belief_f[:,za,z_new],belief_c[:,za,z_new]\n","          #print(znew_a10,bf0)\n","          V2_a10.append( np.stack([it0*Q2_old[bf0,znew_a10,0] + (1-it0)*Q2_old[bc0,znew_a10,0], it0*Q2_old[bf0,znew_a10,1] + (1-it0)*Q2_old[bc0,znew_a10,1] ],axis=2))\n","        V2_a10 =  np.stack(V2_a10,axis=3)\n","\n","        Q2_tepa10 = x_old.dot(rw2[0,:,0,a2].reshape([1,-1])) + (1-x_old).dot(rw2[1,:,0,a2].reshape([1,-1])) + beta * np.sum(sigma[:,za,:]*(gamma+logsumexp(V2_a10,axis=2)),axis=2)\n","\n","        #a1 = 1\n","        V2_a11 = []\n","        for z_new in z_old:\n","          znew_a11= (1 *2+a2)*3 + z_new\n","          it1,bf1,bc1 = iterpolate[:,za,z_new],belief_f[:,za,z_new],belief_c[:,za,z_new]\n","          V2_a11.append( np.stack([it1*Q2_old[bf1,znew_a11,0] + (1-it1)*Q2_old[bc1,znew_a11,0], it1*Q2_old[bf1,znew_a11,1] + (1-it1)*Q2_old[bc1,znew_a11,1] ],axis=2))\n","        V2_a11 =  np.stack(V2_a11,axis=3)\n","\n","        Q2_tepa11 = x_old.dot(rw2[0,:,1,a2].reshape([1,-1])) + (1-x_old).dot(rw2[1,:,1,a2].reshape([1,-1])) + beta * np.sum(sigma[:,za,:]*(gamma+logsumexp(V2_a11,axis=2)),axis=2)\n","\n","          \n","        Q2_new[:,:,a2] = pi1_old[:,:,0] *Q2_tepa10 + pi1_old[:,:,1] * Q2_tepa11\n","        #print(it0)\n","      #print(il,np.max(np.abs(np.nan_to_num((Q2_new-Q2_old)/Q2_old))))\n","      if np.max(np.abs(np.nan_to_num((Q2_new-Q2_old)/Q2_old))) <thread_inner: \n","        #print('Q2',il,np.max(np.abs(np.nan_to_num((Q2_new-Q2_old)/Q2_old))))\n","        break\n","\n","    pi2_new = softmax(Q2_new,axis=2)   \n","    count = np.max(np.abs(np.nan_to_num((pi2_old-pi2_new)/pi2_old)))\n","\n","\n","    pi2_old = pi2_new.copy()\n","    for il in range(1000):\n","      Q1_old = Q1_new.copy()\n","      za = za_old%(agent+1)\n","\n","      for a1 in range(2):\n","        #a2 = 0\n","        V1_a20 = []\n","        for z_new in z_old:\n","          znew_a20= (a1 *2+0)*3 + z_new\n","          it0,bf0,bc0 = iterpolate[:,za,z_new],belief_f[:,za,z_new],belief_c[:,za,z_new]\n","          V1_a20.append( np.stack([it0*Q1_old[bf0,znew_a20,0] + (1-it0)*Q1_old[bc0,znew_a20,0], it0*Q1_old[bf0,znew_a20,1] + (1-it0)*Q1_old[bc0,znew_a20,1] ],axis=2))\n","        V1_a20 =  np.stack(V1_a20,axis=3)\n","\n","        Q1_tepa20 = x_old.dot(rw1[0,:,a1,0].reshape([1,-1])) + (1-x_old).dot(rw1[1,:,a1,0].reshape([1,-1])) + beta * np.sum(sigma[:,za,:]*(gamma+logsumexp(V1_a20,axis=2)),axis=2)\n","\n","        #a2 = 1\n","        V1_a21 = []\n","        for z_new in z_old:\n","          znew_a21= (a1 *2+1)*3 + z_new\n","          it1,bf1,bc1 = iterpolate[:,za,z_new],belief_f[:,za,z_new],belief_c[:,za,z_new]\n","          V1_a21.append( np.stack([it1*Q1_old[bf1,znew_a21,0] + (1-it1)*Q1_old[bc1,znew_a21,0], it1*Q1_old[bf1,znew_a21,1] + (1-it1)*Q1_old[bc1,znew_a21,1] ],axis=2))\n","        V1_a21 =  np.stack(V1_a21,axis=3)\n","\n","        Q1_tepa21 = x_old.dot(rw1[0,:,a1,1].reshape([1,-1])) + (1-x_old).dot(rw1[1,:,a1,1].reshape([1,-1])) + beta * np.sum(sigma[:,za,:]*(gamma+logsumexp(V1_a21,axis=2)),axis=2)\n","\n","          \n","        Q1_new[:,:,a1] = pi2_old[:,:,0] *Q1_tepa20 + pi2_old[:,:,1] * Q1_tepa21\n","\n","      #print(il,np.max(np.abs(np.nan_to_num((Q1_new-Q1_old)/Q1_old))))\n","\n","      if np.max(np.abs(np.nan_to_num((Q1_new-Q1_old)/Q1_old))) <thread_inner:\n","        #print('Q1',il,np.max(np.abs(np.nan_to_num((Q1_new-Q1_old)/Q1_old))))\n","        break\n","\n","    pi1_new = softmax(Q1_new,axis=2)\n","    \n","    #print('pi1 pi2',ol,np.max(np.abs(np.nan_to_num((pi1_old-pi1_new)/pi1_old))),count)\n","\n","    if np.max(np.abs(np.nan_to_num((pi1_old-pi1_new)/pi1_old))) <thread_outer and count<thread_outer:\n","      #print(ol,np.max(np.abs((pi1_old-pi1_new)/pi1_new)))\n","      break\n","  return Q1_new,Q2_new,pi1_new,pi2_new\n","\n","# trans,observe = Dynamic(theta23)  #s_t,s_{t+1} #s_{t+1},z_t,z_{t+1}\n","# sigma,x_new,xiterpolate = SigmaLambda(za_old,z_old,x_old,trans,observe)\n","# Q1,Q2,pi1,pi2 = ValueIteration(theta1,sigma,xiterpolate)"],"execution_count":23,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"flYtELP1phln","executionInfo":{"status":"ok","timestamp":1626815250161,"user_tz":300,"elapsed":133,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"e4247d57-7f81-4868-937a-bbcdf9e4ac18"},"source":["theta23"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.9, 0.1, 1. , 0. , 0. , 1. , 0. , 0. , 1. , 0. , 0. , 1. , 0. ,\n","       0. ])"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U-1hATVv3Izg","executionInfo":{"status":"ok","timestamp":1626815417257,"user_tz":300,"elapsed":187,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"e708189a-871d-4884-b01f-222d0e323442"},"source":["from scipy.optimize import minimize\n","ini_x0 =  0.1*np.ones(14)#np.array(theta23)\n","print('start from:',ini_x0 )\n","\n","def func1(theta23,market_size=market_size, action1=action1,action2 = action2,T=TimePeriod ,x0 = x0_belief):\n","  trans,observe = Dynamic(theta23)  #s_t,s_{t+1} #s_{t+1},z_t,z_{t+1}\n","  sigma_val,_,_ = SigmaLambda(None,market_size,x0,trans,observe,T=T)\n","\n","  # sigma_val,_,_ = SigmaLambda(None,market_size,x_old,action1,action2,theta23= theta23,num_discrete=num_discrete,T = T)\n","  #print(observe[market_size[0:-1,:],market_size[1:T,:]])\n","  #print(sigma_val)\n","  res = -np.sum(np.log(sigma_val))\n","  print(theta23,res)\n","  return res\n","ineq_cons = [{'type': 'ineq', 'fun' : lambda x: np.array([1-x[2] - x[3]])},\n","             {'type': 'ineq', 'fun' : lambda x: np.array([1-x[4] - x[5]])},\n","             {'type': 'ineq', 'fun' : lambda x: np.array([1-x[6] - x[7]])},\n","             {'type': 'ineq', 'fun' : lambda x: np.array([1-x[8] - x[9]])},\n","             {'type': 'ineq', 'fun' : lambda x: np.array([1-x[10] - x[11]])},\n","             {'type': 'ineq', 'fun' : lambda x: np.array([1-x[12] - x[13]])}]\n","\n","res1 = minimize(func1,ini_x0, bounds=[[0.00001,0.99999],[0.00001,0.99999],\n","                                      [0,1],[0,1],[0,1],[0,1],[0,1],[0,1],\n","                                      [0,1],[0,1],[0,1],[0,1],[0,1],[0,1]],\n","                constraints = ineq_cons)\n","\n","#trans_est = np.vstack([res1.x,1-res1.x]).T.reshape([2,2,2,2])\n","print(res1)"],"execution_count":29,"outputs":[{"output_type":"stream","text":["start from: [0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1]\n","[0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1] 3720.408313639563\n","[0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1] 3720.408313639563\n","[0.10000001 0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.10000001 0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.1        0.10000001 0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408302076262\n","[0.1        0.1        0.1        0.10000001 0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.1        0.1        0.1        0.10000001 0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.1        0.1        0.1        0.1        0.10000001\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.408301241797\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.10000001 0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.4083137885746\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.10000001 0.1        0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.4083137885746\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.10000001 0.1        0.1        0.1\n"," 0.1        0.1       ] 3720.4082095698595\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.10000001 0.1        0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.10000001 0.1\n"," 0.1        0.1       ] 3720.408313639563\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.10000001\n"," 0.1        0.1       ] 3720.4082020596743\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.10000001 0.1       ] 3720.4083149806675\n","[0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.1        0.1        0.1        0.1        0.1\n"," 0.1        0.10000001] 3720.4083149806675\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000015e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000015e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000001e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -1.1563300388583999e-06\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.64009901e-08\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.64026082e-08 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000001e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -1.239776536507975e-06\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 1.49011612e-08 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] 1.1920929585684805e-07\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 1.49011612e-08\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] 1.1920929585684805e-07\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000001e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -1.0406970890768365e-05\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.63993831e-08 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.64076287e-08 1.00000000e+00\n"," 0.00000000e+00 0.00000000e+00] -0.0\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000001e+00\n"," 0.00000000e+00 0.00000000e+00] -1.1157989408658866e-05\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 1.49011612e-08 0.00000000e+00] 1.0728836180362577e-06\n","[1.00000000e-01 1.00000000e-01 1.00000000e+00 1.49982893e-09\n"," 1.50144702e-09 1.00000000e+00 0.00000000e+00 0.00000000e+00\n"," 1.00000000e+00 1.49822187e-09 1.50646755e-09 1.00000000e+00\n"," 0.00000000e+00 1.49011612e-08] 1.0728836180362577e-06\n","     fun: -0.0\n","     jac: array([   0.        ,    0.        ,  -77.59999532,    0.        ,\n","          0.        ,  -83.19999498,    8.00000042,    8.00000042,\n","       -698.39999416,    0.        ,    0.        , -748.79999374,\n","         72.00000081,   72.00000081])\n"," message: 'Optimization terminated successfully.'\n","    nfev: 32\n","     nit: 2\n","    njev: 2\n","  status: 0\n"," success: True\n","       x: array([1.00000000e-01, 1.00000000e-01, 1.00000000e+00, 1.49982893e-09,\n","       1.50144702e-09, 1.00000000e+00, 0.00000000e+00, 0.00000000e+00,\n","       1.00000000e+00, 1.49822187e-09, 1.50646755e-09, 1.00000000e+00,\n","       0.00000000e+00, 0.00000000e+00])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KmXQVZuit9Rd","executionInfo":{"status":"ok","timestamp":1626815452728,"user_tz":300,"elapsed":143,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"bf635be8-cecd-46b0-f956-53b8760f59c0"},"source":["theta1.reshape(-1)"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 1.5,  1. , -1.9, -1.8,  1. ])"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QTQdW7J_mt78","executionInfo":{"status":"ok","timestamp":1626815677102,"user_tz":300,"elapsed":221769,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"737392ca-0cd6-48ba-b69f-c692cef74622"},"source":["ini_x0 = theta1.reshape(-1)\n","print('start from:',ini_x0 )\n","\n","trans,observe = Dynamic(res1.x)  #s_t,s_{t+1} #s_{t+1},z_t,z_{t+1}\n","_,belief_val,_ = SigmaLambda(None,market_size,x0_belief,trans,observe,T=TimePeriod)\n","sigma,x_new,xiterpolate = SigmaLambda(None,z_old,x_old,trans,observe)\n","\n","def func2(theta1,sigma = sigma,xiterpolate=xiterpolate,belief_val=belief_val,market_size=market_size,action1 = action1,action2 = action2,T=TimePeriod,x0 = x0_belief):\n","  #theta1 = theta1.reshape([2,2,2])  \n"," \n","  _,_,pi1,pi2 = ValueIteration(theta1,sigma,xiterpolate)\n","  \n","  za = (action1[0:-1,:]*2 + action2[0:-1,:])*3 + market_size[1:T,:]\n","\n","\n","  belief_f = np.floor(belief_val[1:T,:]*(num_discrete-1))/(num_discrete-1)\n","  belief_c = np.ceil(belief_val[1:T,:]*(num_discrete-1))/(num_discrete-1)\n","  iterpolate = np.zeros(belief_f.shape)\n","  iterpolate[np.where((belief_f-belief_c)!=0)] = (belief_val[1:T,:]-belief_c)[np.where((belief_f-belief_c)!=0)]/(belief_f-belief_c)[np.where((belief_f-belief_c)!=0)]      \n","  belief_f,belief_c = np.int_(belief_f*(num_discrete-1)),np.int_(belief_c*(num_discrete-1))\n","\n","  p1 = iterpolate*pi1[belief_f,za,action1[1:T,:]] +(1- iterpolate)*pi1[belief_c,za,action1[1:T,:]]\n","  p2 = iterpolate*pi2[belief_f,za,action2[1:T,:]]+(1- iterpolate)*pi2[belief_c,za,action2[1:T,:]]\n","  res = - np.sum(np.log(p1)) -np.sum(np.log(p2))\n","  print(theta1,res)\n","  return res\n","# ineq_cons = {'type': 'ineq',\n","#              'fun' : lambda x: np.array([x[0] - x[1]])}\n","res2 = minimize(func2,ini_x0,bounds = [(1e-6,100),(1e-6,100),(-100,-1e-6),(-100,-1e-6),(1e-6,100)])#,constraints=ineq_cons)#,(1e-6,100)])#method='Nelder-Mead')\n","print(res2)"],"execution_count":31,"outputs":[{"output_type":"stream","text":["start from: [ 1.5  1.  -1.9 -1.8  1. ]\n","[ 1.5  1.  -1.9 -1.8  1. ] 6342.043713793701\n","[ 1.50000001  1.         -1.9        -1.8         1.        ] 6342.043714008552\n","[ 1.5         1.00000001 -1.9        -1.8         1.        ] 6342.043715725984\n","[ 1.5         1.         -1.89999999 -1.8         1.        ] 6342.043699337941\n","[ 1.5         1.         -1.9        -1.79999999  1.        ] 6342.043699244467\n","[ 1.5         1.         -1.9        -1.8         1.00000001] 6342.04371255972\n","[ 1.e-06  1.e-06 -1.e-06 -1.e-06  1.e+02] 19724.564280218186\n","[ 1.01e-06  1.00e-06 -1.00e-06 -1.00e-06  1.00e+02] 19724.564280189094\n","[ 1.00e-06  1.01e-06 -1.00e-06 -1.00e-06  1.00e+02] 19724.564279956336\n","[ 1.0e-06  1.0e-06 -9.9e-07 -1.0e-06  1.0e+02] 19724.564280602375\n","[ 1.0e-06  1.0e-06 -1.0e-06 -9.9e-07  1.0e+02] 19724.564281374915\n","[ 1.e-06  1.e-06 -1.e-06 -1.e-06  1.e+02] 19724.564282188185\n","[ 1.22871912  0.81914614 -1.5563775  -1.47446291 18.90455009] 5879.390058395139\n","[ 1.22871913  0.81914614 -1.5563775  -1.47446291 18.90455009] 5879.39005865929\n","[ 1.22871912  0.81914615 -1.5563775  -1.47446291 18.90455009] 5879.39006077211\n","[ 1.22871912  0.81914614 -1.55637749 -1.47446291 18.90455009] 5879.390043588852\n","[ 1.22871912  0.81914614 -1.5563775  -1.4744629  18.90455009] 5879.390043691832\n","[ 1.22871912  0.81914614 -1.5563775  -1.47446291 18.9045501 ] 5879.390058889647\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.46168931e+01] 2904.1047119657674\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.46168931e+01] 2904.104711936684\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.46168931e+01] 2904.1047117040225\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  1.46168931e+01] 2904.104712349569\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  1.46168931e+01] 2904.10471312206\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.46168931e+01] 2904.1047139356424\n","[ 1.e-06  1.e-06 -1.e-06 -1.e-06  1.e-06] 2340.0658176098395\n","[ 1.01e-06  1.00e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065817760601\n","[ 1.00e-06  1.01e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065818966712\n","[ 1.0e-06  1.0e-06 -9.9e-07 -1.0e-06  1.0e-06] 2340.065810389831\n","[ 1.0e-06  1.0e-06 -1.0e-06 -9.9e-07  1.0e-06] 2340.0658101398285\n","[ 1.00e-06  1.00e-06 -1.00e-06 -1.00e-06  1.01e-06] 2340.065810772586\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.13475585e+01] 2260.361436459692\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.13475585e+01] 2260.3614364309133\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.13475585e+01] 2260.3614362006797\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  1.13475585e+01] 2260.3614368337567\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  1.13475585e+01] 2260.3614376050896\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  1.13475585e+01] 2260.3614384264115\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  5.67377976e+00] 1223.7762137339141\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  5.67377976e+00] 1223.7762137641898\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  5.67377976e+00] 1223.7762140063705\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  5.67377976e+00] 1223.776212128956\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  5.67377976e+00] 1223.7762126627358\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  5.67377977e+00] 1223.7762149973887\n","[ 1.e-06  1.e-06 -1.e-06 -1.e-06  1.e-06] 2340.0658176098395\n","[ 1.01e-06  1.00e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065817760601\n","[ 1.00e-06  1.01e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065818966712\n","[ 1.0e-06  1.0e-06 -9.9e-07 -1.0e-06  1.0e-06] 2340.065810389831\n","[ 1.0e-06  1.0e-06 -1.0e-06 -9.9e-07  1.0e-06] 2340.0658101398285\n","[ 1.00e-06  1.00e-06 -1.00e-06 -1.00e-06  1.01e-06] 2340.065810772586\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.33124051e+00] 1115.3175837867857\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.33124051e+00] 1115.3175838745929\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.33124051e+00] 1115.3175845770324\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  4.33124051e+00] 1115.31758006288\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  4.33124051e+00] 1115.317580333653\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.33124052e+00] 1115.31758404395\n","[ 1.e-06  1.e-06 -1.e-06 -1.e-06  1.e-06] 2340.0658176098395\n","[ 1.01e-06  1.00e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065817760601\n","[ 1.00e-06  1.01e-06 -1.00e-06 -1.00e-06  1.00e-06] 2340.065818966712\n","[ 1.0e-06  1.0e-06 -9.9e-07 -1.0e-06  1.0e-06] 2340.065810389831\n","[ 1.0e-06  1.0e-06 -1.0e-06 -9.9e-07  1.0e-06] 2340.0658101398285\n","[ 1.00e-06  1.00e-06 -1.00e-06 -1.00e-06  1.01e-06] 2340.065810772586\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.11665187e+00] 1112.0628082164403\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.11665187e+00] 1112.0628083130186\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.11665187e+00] 1112.0628090856815\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  4.11665187e+00] 1112.0628041477946\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  4.11665187e+00] 1112.062804374349\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.11665188e+00] 1112.0628082602443\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07259572e+00] 1111.9699778955967\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07259572e+00] 1111.9699779939212\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07259572e+00] 1111.9699787805357\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  4.07259572e+00] 1111.9699737576402\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  4.07259572e+00] 1111.9699739752323\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07259573e+00] 1111.9699778938273\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07430623e+00] 1111.969828329445\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07430623e+00] 1111.9698284276983\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07430623e+00] 1111.9698292137757\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  4.07430623e+00] 1111.9698241941746\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  4.07430623e+00] 1111.969824412111\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07430624e+00] 1111.9698283294658\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07428625e+00] 1111.9698283186212\n","[ 1.01000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07428625e+00] 1111.9698284168817\n","[ 1.00000000e-06  1.01000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07428625e+00] 1111.96982920296\n","[ 1.00000000e-06  1.00000000e-06 -9.90000000e-07 -1.00000000e-06\n","  4.07428625e+00] 1111.9698241833198\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -9.90000000e-07\n","  4.07428625e+00] 1111.9698244012443\n","[ 1.00000000e-06  1.00000000e-06 -1.00000000e-06 -1.00000000e-06\n","  4.07428626e+00] 1111.9698283186153\n","      fun: 1111.9698283186212\n"," hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n","      jac: array([ 9.82604433e+00,  8.84338760e+01, -4.13530142e+02, -3.91737694e+02,\n","       -5.91171556e-04])\n","  message: b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n","     nfev: 84\n","      nit: 8\n","   status: 0\n","  success: True\n","        x: array([ 1.00000000e-06,  1.00000000e-06, -1.00000000e-06, -1.00000000e-06,\n","        4.07428625e+00])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PXwnPasL-C39","executionInfo":{"status":"ok","timestamp":1626123496014,"user_tz":300,"elapsed":836489,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"b3d20979-2535-43f6-bacd-a6dcab074bac"},"source":["#      fun: 1534.953377187229\n","#      jac: array([-8.19396973e-03, -1.03302002e-02, -1.09252930e-02, -1.45111084e-02,\n","#         1.79595947e-02, -1.02996826e-02, -2.15606689e-02, -2.03399658e-02,\n","#        -3.20434570e-04,  2.56805420e-02, -4.05923309e+01, -4.05993195e+01,\n","#        -1.54113770e-02, -1.01928711e-02])\n","#  message: 'Optimization terminated successfully.'\n","#     nfev: 622\n","#      nit: 37\n","#     njev: 36\n","#   status: 0\n","#  success: True\n","#        x: array([0.92156257, 0.29752188, 0.40475607, 0.49858983, 0.00744345,\n","#        0.22770791, 0.16510746, 0.02723546, 0.68532994, 0.0443368 ,\n","#        0.76340731, 0.23657295, 0.03244239, 0.51718273])\n","\n","#       fun: 1111.9699469827542\n","#  hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n","#       jac: array([ 1.81252017e+02,  3.56730880e+01, -4.13529960e+02, -3.91736285e+02,\n","#         2.27373675e-05])\n","#   message: b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n","#      nfev: 84\n","#       nit: 8\n","#    status: 0\n","#   success: True\n","#         x: array([ 1.00000000e-06,  1.00000000e-06, -1.00000000e-06, -1.00000000e-06,\n","#         4.07429096e+00])\n","\n","\n","\n","#      fun: 23.181837742382157\n","#      jac: array([-6.53696060e-03,  3.17610931e+02, -6.40373778e+00, -6.44128871e+00,\n","#         9.96850729e-01,  1.83537006e-02,  4.66693163e-01,  4.66693163e-01,\n","#        -1.37162818e+03, -3.52029365e+02, -1.56411858e+02, -1.56407848e+02,\n","#         9.85352871e+01,  9.85352871e+01])\n","#  message: 'Optimization terminated successfully.'\n","#     nfev: 686\n","#      nit: 43\n","#     njev: 41\n","#   status: 0\n","#  success: True\n","#        x: array([1.83082095e-02, 1.00000044e-05, 8.45247163e-01, 1.54732837e-01,\n","#        1.00000000e-05, 1.00000000e-05, 1.00000000e-05, 1.00000000e-05,\n","#        9.99970018e-01, 1.00045017e-05, 9.52676086e-03, 9.90453243e-01,\n","#        1.00000014e-05, 1.00000014e-05])\n","\n","\n","#       fun: 1111.969763128645\n","#  hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n","#       jac: array([ 5.16206455e-01,  3.25546807e+01, -4.13529642e+02, -3.91736739e+02,\n","#         5.45696821e-04])\n","#   message: b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n","#      nfev: 144\n","#       nit: 18\n","#    status: 0\n","#   success: True\n","#         x: array([ 1.0000000e-06,  1.0000000e-06, -1.0000000e-06, -1.0000000e-06,\n","#         4.0742856e+00])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["start from: [ 1.275  0.85  -1.615 -1.53   0.85 ]\n","[ 1.275  0.85  -1.615 -1.53   0.85 ] 204320.5507221644\n","[ 1.27500001  0.85       -1.615      -1.53        0.85      ] 204320.5507063992\n","[ 1.275       0.85000001 -1.615      -1.53        0.85      ] 204320.55070628718\n","[ 1.275       0.85       -1.61499999 -1.53        0.85      ] 204320.5508562444\n","[ 1.275       0.85       -1.615      -1.52999999  0.85      ] 204320.55086717108\n","[ 1.275       0.85       -1.615      -1.53        0.85000001] 204320.55052342347\n","[ 100.  100. -100. -100.  100.] 10184743.888888897\n","[ 100.00000001  100.         -100.         -100.          100.        ] 10184743.888915177\n","[ 100.          100.00000001 -100.         -100.          100.        ] 10184743.888915423\n","[ 100.          100.          -99.99999999 -100.          100.        ] 10184743.888636053\n","[ 100.          100.         -100.          -99.99999999  100.        ] 10184743.88860904\n","[ 100.          100.         -100.         -100.          100.00000001] 10184743.889321852\n","[ 10.16705457   9.78033386 -10.47643114 -10.39908699   9.78033386] 1032034.6345288293\n","[ 10.16705458   9.78033386 -10.47643114 -10.39908699   9.78033386] 1032034.6345551186\n","[ 10.16705457   9.78033387 -10.47643114 -10.39908699   9.78033386] 1032034.6345553687\n","[ 10.16705457   9.78033386 -10.47643113 -10.39908699   9.78033386] 1032034.6342759891\n","[ 10.16705457   9.78033386 -10.47643114 -10.39908698   9.78033386] 1032034.6342489796\n","[ 10.16705457   9.78033386 -10.47643114 -10.39908699   9.78033387] 1032034.6349617844\n","[ 2.14852757  1.72728801 -2.48551922 -2.40127131  1.72728801] 228412.291455667\n","[ 2.14852758  1.72728801 -2.48551922 -2.40127131  1.72728801] 228412.29147575842\n","[ 2.14852757  1.72728802 -2.48551922 -2.40127131  1.72728801] 228412.29147596675\n","[ 2.14852757  1.72728801 -2.48551921 -2.40127131  1.72728801] 228412.29126972795\n","[ 2.14852757  1.72728801 -2.48551922 -2.4012713   1.72728801] 228412.2912492932\n","[ 2.14852757  1.72728801 -2.48551922 -2.40127131  1.72728802] 228412.29176776123\n","[ 1.50258024  1.07855995 -1.84179648 -1.75699242  1.07855995] 199086.82712179562\n","[ 1.50258025  1.07855995 -1.84179648 -1.75699242  1.07855995] 199086.82712234947\n","[ 1.50258024  1.07855996 -1.84179648 -1.75699242  1.07855995] 199086.8271223859\n","[ 1.50258024  1.07855995 -1.84179647 -1.75699242  1.07855995] 199086.82711890954\n","[ 1.50258024  1.07855995 -1.84179648 -1.75699241  1.07855995] 199086.82711700047\n","[ 1.50258024  1.07855995 -1.84179648 -1.75699242  1.07855996] 199086.8271312011\n","[ 1.49512301  1.07102635 -1.83696288 -1.75008334  1.06793807] 199077.34534882457\n","[ 1.49512302  1.07102635 -1.83696288 -1.75008334  1.06793807] 199077.34534893464\n","[ 1.49512301  1.07102636 -1.83696288 -1.75008334  1.06793807] 199077.34534896718\n","[ 1.49512301  1.07102635 -1.83696287 -1.75008334  1.06793807] 199077.34534951497\n","[ 1.49512301  1.07102635 -1.83696288 -1.75008333  1.06793807] 199077.34534859326\n","[ 1.49512301  1.07102635 -1.83696288 -1.75008334  1.06793808] 199077.34535199322\n","[ 1.49349342  1.06932196 -1.83851709 -1.74980981  1.06206372] 199075.83811587954\n","[ 1.49349343  1.06932196 -1.83851709 -1.74980981  1.06206372] 199075.83811587235\n","[ 1.49349342  1.06932197 -1.83851709 -1.74980981  1.06206372] 199075.83811590416\n","[ 1.49349342  1.06932196 -1.83851708 -1.74980981  1.06206372] 199075.83811731904\n","[ 1.49349342  1.06932196 -1.83851709 -1.7498098   1.06206372] 199075.838117028\n","[ 1.49349342  1.06932196 -1.83851709 -1.74980981  1.06206373] 199075.8381172438\n","[ 1.49289126  1.06854454 -1.84488161 -1.75331348  1.05130808] 199073.642543556\n","[ 1.49289127  1.06854454 -1.84488161 -1.75331348  1.05130808] 199073.64254346077\n","[ 1.49289126  1.06854455 -1.84488161 -1.75331348  1.05130808] 199073.64254349226\n","[ 1.49289126  1.06854454 -1.8448816  -1.75331348  1.05130808] 199073.64254533208\n","[ 1.49289126  1.06854454 -1.84488161 -1.75331347  1.05130808] 199073.64254592604\n","[ 1.49289126  1.06854454 -1.84488161 -1.75331348  1.05130809] 199073.64254323355\n","[ 1.49429055  1.06951132 -1.86108004 -1.7663603   1.02899763] 199069.86224547995\n","[ 1.49429056  1.06951132 -1.86108004 -1.7663603   1.02899763] 199069.86224535023\n","[ 1.49429055  1.06951133 -1.86108004 -1.7663603   1.02899763] 199069.86224538233\n","[ 1.49429055  1.06951132 -1.86108003 -1.7663603   1.02899763] 199069.8622470814\n","[ 1.49429055  1.06951132 -1.86108004 -1.76636029  1.02899763] 199069.86224851667\n","[ 1.49429055  1.06951132 -1.86108004 -1.7663603   1.02899764] 199069.86224355776\n","[ 1.49708588  1.07163668 -1.87667573 -1.78688842  1.00769331] 199067.03147086815\n","[ 1.49708589  1.07163668 -1.87667573 -1.78688842  1.00769331] 199067.03147084007\n","[ 1.49708588  1.07163669 -1.87667573 -1.78688842  1.00769331] 199067.03147087464\n","[ 1.49708588  1.07163668 -1.87667572 -1.78688842  1.00769331] 199067.03147229325\n","[ 1.49708588  1.07163668 -1.87667573 -1.78688841  1.00769331] 199067.03147200664\n","[ 1.49708588  1.07163668 -1.87667573 -1.78688842  1.00769332] 199067.03146918747\n","[ 1.49875376  1.07269643 -1.89024768 -1.79129893  1.00276504] 199066.94604521134\n","[ 1.49875377  1.07269643 -1.89024768 -1.79129893  1.00276504] 199066.94604534583\n","[ 1.49875376  1.07269644 -1.89024768 -1.79129893  1.00276504] 199066.94604538186\n","[ 1.49875376  1.07269643 -1.89024767 -1.79129893  1.00276504] 199066.94604381645\n","[ 1.49875376  1.07269643 -1.89024768 -1.79129892  1.00276504] 199066.946046049\n","[ 1.49875376  1.07269643 -1.89024768 -1.79129893  1.00276505] 199066.94604547636\n","[ 1.49799883  1.07207246 -1.88375763 -1.79190592  1.00482527] 199066.45762714196\n","[ 1.49799884  1.07207246 -1.88375763 -1.79190592  1.00482527] 199066.4576272351\n","[ 1.49799883  1.07207247 -1.88375763 -1.79190592  1.00482527] 199066.45762727078\n","[ 1.49799883  1.07207246 -1.88375762 -1.79190592  1.00482527] 199066.45762716315\n","[ 1.49799883  1.07207246 -1.88375763 -1.79190591  1.00482527] 199066.45762734744\n","[ 1.49799883  1.07207246 -1.88375763 -1.79190592  1.00482528] 199066.457626948\n","[ 1.49743714  1.07138671 -1.88322943 -1.79198205  1.00550153] 199066.43508931185\n","[ 1.49743715  1.07138671 -1.88322943 -1.79198205  1.00550153] 199066.43508940976\n","[ 1.49743714  1.07138672 -1.88322943 -1.79198205  1.00550153] 199066.4350894454\n","[ 1.49743714  1.07138671 -1.88322942 -1.79198205  1.00550153] 199066.43508936634\n","[ 1.49743714  1.07138671 -1.88322943 -1.79198204  1.00550153] 199066.4350893686\n","[ 1.49743714  1.07138671 -1.88322943 -1.79198205  1.00550154] 199066.4350892338\n","[ 1.49525809  1.06871706 -1.88251995 -1.79213637  1.00680761] 199066.38694822876\n","[ 1.4952581   1.06871706 -1.88251995 -1.79213637  1.00680761] 199066.38694833335\n","[ 1.49525809  1.06871707 -1.88251995 -1.79213637  1.00680761] 199066.38694836845\n","[ 1.49525809  1.06871706 -1.88251994 -1.79213637  1.00680761] 199066.38694829616\n","[ 1.49525809  1.06871706 -1.88251995 -1.79213636  1.00680761] 199066.38694803632\n","[ 1.49525809  1.06871706 -1.88251995 -1.79213637  1.00680762] 199066.38694838333\n","[ 1.49086894  1.06333645 -1.88216047 -1.79251082  1.0080368 ] 199066.3119779323\n","[ 1.49086895  1.06333645 -1.88216047 -1.79251082  1.0080368 ] 199066.31197803668\n","[ 1.49086894  1.06333646 -1.88216047 -1.79251082  1.0080368 ] 199066.31197807172\n","[ 1.49086894  1.06333645 -1.88216046 -1.79251082  1.0080368 ] 199066.3119780016\n","[ 1.49086894  1.06333645 -1.88216047 -1.79251081  1.0080368 ] 199066.31197751858\n","[ 1.49086894  1.06333645 -1.88216047 -1.79251082  1.00803681] 199066.31197830196\n","[ 1.47913642  1.04891995 -1.88251444 -1.7936443   1.00951479] 199066.14498455563\n","[ 1.47913643  1.04891995 -1.88251444 -1.7936443   1.00951479] 199066.14498464105\n","[ 1.47913642  1.04891996 -1.88251444 -1.7936443   1.00951479] 199066.14498467545\n","[ 1.47913642  1.04891995 -1.88251443 -1.7936443   1.00951479] 199066.1449846172\n","[ 1.47913642  1.04891995 -1.88251444 -1.79364429  1.00951479] 199066.14498389544\n","[ 1.47913642  1.04891995 -1.88251444 -1.7936443   1.0095148 ] 199066.1449851698\n","[ 1.46370701  1.0297643  -1.88429678 -1.79518222  1.00965323] 199065.95883845905\n","[ 1.46370702  1.0297643  -1.88429678 -1.79518222  1.00965323] 199065.9588384999\n","[ 1.46370701  1.02976431 -1.88429678 -1.79518222  1.00965323] 199065.9588385329\n","[ 1.46370701  1.0297643  -1.88429677 -1.79518222  1.00965323] 199065.95883849883\n","[ 1.46370701  1.0297643  -1.88429678 -1.79518221  1.00965323] 199065.95883784984\n","[ 1.46370701  1.0297643  -1.88429678 -1.79518222  1.00965324] 199065.95883904395\n","[ 1.45609828  1.0142408  -1.88719323 -1.79753667  1.006134  ] 199065.84609363193\n","[ 1.45609829  1.0142408  -1.88719323 -1.79753667  1.006134  ] 199065.84609361115\n","[ 1.45609828  1.01424081 -1.88719323 -1.79753667  1.006134  ] 199065.84609364127\n","[ 1.45609828  1.0142408  -1.88719322 -1.79753667  1.006134  ] 199065.84609389288\n","[ 1.45609828  1.0142408  -1.88719323 -1.79753666  1.006134  ] 199065.84609341557\n","[ 1.45609828  1.0142408  -1.88719323 -1.79753667  1.00613401] 199065.84609358216\n","[ 1.45577429  1.01286111 -1.88799908 -1.7967724   1.00640631] 199065.82553855146\n","[ 1.4557743   1.01286111 -1.88799908 -1.7967724   1.00640631] 199065.82553853118\n","[ 1.45577429  1.01286112 -1.88799908 -1.7967724   1.00640631] 199065.82553856116\n","[ 1.45577429  1.01286111 -1.88799907 -1.7967724   1.00640631] 199065.82553855673\n","[ 1.45577429  1.01286111 -1.88799908 -1.79677239  1.00640631] 199065.8255385445\n","[ 1.45577429  1.01286111 -1.88799908 -1.7967724   1.00640632] 199065.82553855266\n","[ 1.45686043  1.01378888 -1.88802756 -1.79669489  1.00624269] 199065.8245740239\n","[ 1.45686044  1.01378888 -1.88802756 -1.79669489  1.00624269] 199065.82457400474\n","[ 1.45686043  1.01378889 -1.88802756 -1.79669489  1.00624269] 199065.8245740345\n","[ 1.45686043  1.01378888 -1.88802755 -1.79669489  1.00624269] 199065.8245740238\n","[ 1.45686043  1.01378888 -1.88802756 -1.79669488  1.00624269] 199065.82457404336\n","[ 1.45686043  1.01378888 -1.88802756 -1.79669489  1.0062427 ] 199065.8245740023\n","[ 1.45798865  1.01447316 -1.88803151 -1.79665117  1.00611754] 199065.82381044587\n","[ 1.45798866  1.01447316 -1.88803151 -1.79665117  1.00611754] 199065.82381042896\n","[ 1.45798865  1.01447317 -1.88803151 -1.79665117  1.00611754] 199065.82381045862\n","[ 1.45798865  1.01447316 -1.8880315  -1.79665117  1.00611754] 199065.8238104431\n","[ 1.45798865  1.01447316 -1.88803151 -1.79665116  1.00611754] 199065.82381047698\n","[ 1.45798865  1.01447316 -1.88803151 -1.79665117  1.00611755] 199065.82381041284\n","[ 1.45956553  1.01412878 -1.88813497 -1.79669627  1.00591598] 199065.8214865932\n","[ 1.45956554  1.01412878 -1.88813497 -1.79669627  1.00591598] 199065.82148657774\n","[ 1.45956553  1.01412879 -1.88813497 -1.79669627  1.00591598] 199065.82148660716\n","[ 1.45956553  1.01412878 -1.88813496 -1.79669627  1.00591598] 199065.8214865836\n","[ 1.45956553  1.01412878 -1.88813497 -1.79669626  1.00591598] 199065.82148663397\n","[ 1.45956553  1.01412878 -1.88813497 -1.79669627  1.00591599] 199065.8214865477\n","[ 1.47232887  1.00923205 -1.88784984 -1.79613188  1.00553335] 199065.8084550702\n","[ 1.47232888  1.00923205 -1.88784984 -1.79613188  1.00553335] 199065.80845505837\n","[ 1.47232887  1.00923206 -1.88784984 -1.79613188  1.00553335] 199065.80845508186\n","[ 1.47232887  1.00923205 -1.88784983 -1.79613188  1.00553335] 199065.8084551003\n","[ 1.47232887  1.00923205 -1.88784984 -1.79613187  1.00553335] 199065.8084552408\n","[ 1.47232887  1.00923205 -1.88784984 -1.79613188  1.00553336] 199065.80845488916\n","[ 1.47991194  1.00303217 -1.88819316 -1.7964295   1.00520683] 199065.79457737395\n","[ 1.47991195  1.00303217 -1.88819316 -1.7964295   1.00520683] 199065.7945773705\n","[ 1.47991194  1.00303218 -1.88819316 -1.7964295   1.00520683] 199065.79457738996\n","[ 1.47991194  1.00303217 -1.88819315 -1.7964295   1.00520683] 199065.7945773549\n","[ 1.47991194  1.00303217 -1.88819316 -1.79642949  1.00520683] 199065.79457750247\n","[ 1.47991194  1.00303217 -1.88819316 -1.7964295   1.00520684] 199065.79457724025\n","[ 1.50262952  0.97877239 -1.88838159 -1.79683698  1.00524313] 199065.76225167618\n","[ 1.50262953  0.97877239 -1.88838159 -1.79683698  1.00524313] 199065.76225168546\n","[ 1.50262952  0.9787724  -1.88838159 -1.79683698  1.00524313] 199065.7622516901\n","[ 1.50262952  0.97877239 -1.88838158 -1.79683698  1.00524313] 199065.76225162623\n","[ 1.50262952  0.97877239 -1.88838159 -1.79683697  1.00524313] 199065.76225170115\n","[ 1.50262952  0.97877239 -1.88838159 -1.79683698  1.00524314] 199065.76225163956\n","[ 1.5076721   0.96857947 -1.8879809  -1.79666251  1.00600152] 199065.75379817776\n","[ 1.50767211  0.96857947 -1.8879809  -1.79666251  1.00600152] 199065.7537981824\n","[ 1.5076721   0.96857948 -1.8879809  -1.79666251  1.00600152] 199065.75379818224\n","[ 1.5076721   0.96857947 -1.88798089 -1.79666251  1.00600152] 199065.75379816483\n","[ 1.5076721   0.96857947 -1.8879809  -1.7966625   1.00600152] 199065.75379817793\n","[ 1.5076721   0.96857947 -1.8879809  -1.79666251  1.00600153] 199065.75379817124\n","[ 1.50617051  0.96690365 -1.88793647 -1.79665611  1.00626925] 199065.7529399886\n","[ 1.50617052  0.96690365 -1.88793647 -1.79665611  1.00626925] 199065.75293998956\n","[ 1.50617051  0.96690366 -1.88793647 -1.79665611  1.00626925] 199065.75293998932\n","[ 1.50617051  0.96690365 -1.88793646 -1.79665611  1.00626925] 199065.75293998155\n","[ 1.50617051  0.96690365 -1.88793647 -1.7966561   1.00626925] 199065.75293998444\n","[ 1.50617051  0.96690365 -1.88793647 -1.79665611  1.00626926] 199065.75293999433\n","[ 1.5058231   0.96726785 -1.88780964 -1.79655736  1.0063698 ] 199065.75293703482\n","[ 1.50582311  0.96726785 -1.88780964 -1.79655736  1.0063698 ] 199065.75293703447\n","[ 1.5058231   0.96726786 -1.88780964 -1.79655736  1.0063698 ] 199065.75293703427\n","[ 1.5058231   0.96726785 -1.88780963 -1.79655736  1.0063698 ] 199065.75293704265\n","[ 1.5058231   0.96726785 -1.88780964 -1.79655735  1.0063698 ] 199065.75293703907\n","[ 1.5058231   0.96726785 -1.88780964 -1.79655736  1.00636981] 199065.75293702993\n","[ 1.50600152  0.96708081 -1.88787477 -1.79660808  1.00631816] 199065.75291765915\n","[ 1.50600153  0.96708081 -1.88787477 -1.79660808  1.00631816] 199065.75291765924\n","[ 1.50600152  0.96708082 -1.88787477 -1.79660808  1.00631816] 199065.7529176591\n","[ 1.50600152  0.96708081 -1.88787476 -1.79660808  1.00631816] 199065.75291765947\n","[ 1.50600152  0.96708081 -1.88787477 -1.79660807  1.00631816] 199065.75291765906\n","[ 1.50600152  0.96708081 -1.88787477 -1.79660808  1.00631817] 199065.75291765944\n","      fun: 199065.75291765915\n"," hess_inv: <5x5 LbfgsInvHessProduct with dtype=float64>\n","      jac: array([ 0.00873115, -0.00582077,  0.03201421, -0.00873115,  0.02910383])\n","  message: b'CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH'\n","     nfev: 174\n","      nit: 24\n","   status: 0\n","  success: True\n","        x: array([ 1.50600152,  0.96708081, -1.88787477, -1.79660808,  1.00631816])\n"],"name":"stdout"}]}]}