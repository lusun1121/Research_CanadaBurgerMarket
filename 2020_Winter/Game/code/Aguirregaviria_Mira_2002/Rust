{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Rust","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"i4NhcMCme7KE"},"source":["# 0. Upload package:\n"," 'line_profiler' is used for test the speed details of function"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qNNeU8Mgl9rC","executionInfo":{"status":"ok","timestamp":1627309929842,"user_tz":300,"elapsed":4319,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"382ec0fe-7b1b-4271-aa19-0c32e3856ec6"},"source":["pip install line_profiler"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting line_profiler\n","  Downloading line_profiler-3.3.0-cp37-cp37m-manylinux2010_x86_64.whl (63 kB)\n","\u001b[?25l\r\u001b[K     |█████▏                          | 10 kB 21.6 MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 20 kB 10.4 MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 30 kB 7.0 MB/s eta 0:00:01\r\u001b[K     |████████████████████▌           | 40 kB 3.6 MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▋      | 51 kB 4.1 MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 61 kB 4.3 MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 63 kB 1.6 MB/s \n","\u001b[?25hRequirement already satisfied: IPython>=0.13 in /usr/local/lib/python3.7/dist-packages (from line_profiler) (5.5.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (0.7.5)\n","Requirement already satisfied: simplegeneric>0.8 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (0.8.1)\n","Requirement already satisfied: prompt-toolkit<2.0.0,>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (1.0.18)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (5.0.5)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (4.8.0)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (57.2.0)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (4.4.2)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from IPython>=0.13->line_profiler) (2.6.1)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->IPython>=0.13->line_profiler) (1.15.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.0.0,>=1.0.4->IPython>=0.13->line_profiler) (0.2.5)\n","Requirement already satisfied: ipython-genutils in /usr/local/lib/python3.7/dist-packages (from traitlets>=4.2->IPython>=0.13->line_profiler) (0.2.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->IPython>=0.13->line_profiler) (0.7.0)\n","Installing collected packages: line-profiler\n","Successfully installed line-profiler-3.3.0\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"rRZrVzFmfNpo"},"source":["# 1. generate needed function: \n","Dynamic (observation and transition), Reward, Sigma, Belief, Q, Pi"]},{"cell_type":"code","metadata":{"id":"THYGjC4Tk68k"},"source":["import numpy as np\n","from scipy.special import logsumexp\n","from tqdm import tqdm\n","dim_z = int(175)\n","\n","p0 = [0.1275,0.6009,0.2569]\n","params_true = p0 #+ p1 +theta2\n","# dynamic = Dynamic(params_true)\n","theta1_true = [9.8106,1.1e-2]#,1.2e-1]\n","\n","\n","\n","#z_old = np.kron(np.ones(dim_x,dtype = int),\n","z_old =  np.arange(dim_z,dtype = int)#) \n","#x_old = np.kron(np.linspace(0,1,num = dim_x),np.ones(dim_z))\n","\n","\n","def Dynamic(params):\n","    #params = np.around(params,3)\n","    # theta2 = np.around(params[6:8],3)\n","    # p0 = np.around(params[0:3],3)\n","    # p1 = np.around(params[3:6],3)\n","    #theta2 = params[6:8]\n","    p0 = params[0:3]\n","    #p1 = params[3:6]\n","    \n","    # ztranc: [2,175*2,175*2] [s , z * action, z' *s']\n","    # stranc: [2,175*2,175*2] [s , z * action, z'*s']\n","\n","    ztranc = np.zeros([dim_z*2,dim_z])\n","    #stranc = np.zeros([2,dim_z*2,dim_z*2])\n","\n","    ztranc[0:dim_z,:] = p0[0]*np.eye(dim_z,k=0) + p0[1] *np.eye(dim_z,k=1) + p0[2]*np.eye(dim_z,k=2) + (1-np.sum(p0)) *np.eye(dim_z,k=3)\n","    #ztranc[1,0:dim_z,:] = np.kron(np.ones(2),p1[0]*np.eye(dim_z,k=0) + p1[1] *np.eye(dim_z,k=1) + p1[2]*np.eye(dim_z,k=2) + (1-np.sum(p1)) *np.eye(dim_z,k=3))\n","\n","    ztranc[dim_z-1,dim_z-1] = 1\n","    ztranc[dim_z-2,dim_z-1] = 1-ztranc[dim_z-2,dim_z-2]\n","    ztranc[dim_z-3,dim_z-1] = 1-np.sum(ztranc[dim_z-3,:dim_z-1])\n","\n","\n","    ztranc[dim_z:2*dim_z,0] = np.ones(dim_z)\n","\n","    #stranc[0,0:dim_z,:] = np.hstack([theta2[0] *np.ones([dim_z,dim_z]),(1-theta2[0]) *np.ones([dim_z,dim_z])])\n","    #stranc[1,0:dim_z,:] = np.hstack([theta2[1] *np.ones([dim_z,dim_z]),(1-theta2[1]) *np.ones([dim_z,dim_z])])\n","    #stranc[:,dim_z:2*dim_z,0] = np.ones([2,dim_z])\n","    #return stranc*\n","    return ztranc#\n","#print(Dynamic(params_true)[0:175,:])\n","\n","def Reward(theta1):\n","    reward = np.zeros(dim_z*2) \n","\n","    Rc = theta1[0]\n","    r0 = theta1[1]\n","    z_old = np.arange(dim_z,dtype = int) \n","    #x_old = np.kron(np.linspace(0,1,num = dim_x),np.ones(dim_z))\n","\n","    reward[0:dim_z] = - r0*z_old\n","    reward[dim_z:2*dim_z] = -Rc\n","\n","    return reward \n","\n","#print(Reward(theta1_true))\n","trans = Dynamic(params_true) #za,z'\n","def Lfunc(theta1,pi_old = 0.5*np.ones(dim_z),trans= trans,beta = 0.85,gamma = 0.5772):\n","    #print(x_old)\n","    pi_new = np.repeat(np.hstack([pi_old,pi_old]).reshape([-1,1]),dim_z,axis=1)\n","    pi_new = np.hstack([pi_new,1-pi_new])\n","\n","    r = Reward(theta1) # a=0,z=0,1,2,..;a=1,z=0,1,2,...\n","    hk_mat = beta*np.hstack([trans,trans]) * pi_new\n","    hk_mat_inv = np.linalg.pinv( np.diag(np.ones(dim_z*2)) - hk_mat)\n","    hk = hk_mat_inv.dot(r)\n","\n","    gk = gamma - np.log(np.hstack([pi_old,1-pi_old]))\n","    gk = hk_mat_inv.dot(hk_mat.dot(gk))\n","\n","    pi_final = hk+gk\n","    pi_final = pi_final[0:dim_z] -pi_final[dim_z:2*dim_z]\n","    pi_final = np.exp(pi_final)/(1+np.exp(pi_final))\n","    return pi_final\n","\n","max_item = 1000\n","thread = 1e-7\n","pi_old = 0.5*np.ones(dim_z)\n","for i in range(max_item):\n","    pi_new =  Lfunc(theta1_true,pi_old = pi_old )\n","\n","    error = np.max(np.abs((pi_new-pi_old)/pi_old))\n","    #print(error)\n","\n","    if error <=thread:\n","      break\n","    pi_old = pi_new\n","\n","# from line_profiler import LineProfiler\n","# lp = LineProfiler()\n","# lp_wrapper = lp(Qfunc)\n","# lp_wrapper(theta1_true,a0_sigma,a0_xnew,a1_sigma,a1_xnew)\n","# lp.print_stats()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SJzUQvcugCcN"},"source":["Plot policy function pi(action|belief,mileage)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"vk9ubrXmmgvb","executionInfo":{"status":"ok","timestamp":1627324621443,"user_tz":300,"elapsed":377,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"d871aa9d-1b42-449f-90f4-b44a6d5155a3"},"source":["import matplotlib.pyplot as plt\n","\n","#zz = np.linspace(0,1,dim_z)\n","zz_label = np.arange(dim_z,dtype=int)\n","plt.plot(zz_label,pi_new,'+')\n","\n","plt.xlabel('mileage')\n","plt.ylabel('policy a=0')\n","plt.title('Rc={},r1={}'.format(theta1_true[0],theta1_true[1]))\n","#plt.xlim(130,175)\n","plt.ylim(0,1)\n","\n","plt.show()\n","#plt.legend()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TlCfw6wxgZKy"},"source":["#2. Data generation process"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ULY0Ayy8lAEz","executionInfo":{"status":"ok","timestamp":1627324623869,"user_tz":300,"elapsed":167,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"e2d3c5a4-b3ea-4814-ab9c-6a964eadca55"},"source":["import pandas as pd\n","import time\n","def DataGenerate(SampleSize, TimePeriod, p0 = p0,policy = pi_new):\n","    \n","    state = np.zeros([TimePeriod,SampleSize],dtype = int ) #mileage: 175:0,...,174\n","    state[0,:] = np.random.randint(0,20,size=SampleSize)\n","    action = np.zeros([TimePeriod,SampleSize],dtype = int)\n","    #rho = 1\n","    #params = p0\n","\n","    print(\"generate dataset -->\")\n","    \n","    pi0 = policy[state[0]]\n","    action[0,:] = np.intc(np.random.uniform(0,1,size = SampleSize) > pi0).copy()\n","\n","    for t in tqdm(range(1,TimePeriod)):\n","\n","       \n","        delta_z0 = np.random.choice([0,1,2,3],p=[p0[0],p0[1],p0[2],1-np.sum(p0)],size=SampleSize).copy()\n","        state[t,np.where(action[t-1,:]==0)] = state[t-1,np.where(action[t-1,:]==0)] + delta_z0[np.where(action[t-1,:]==0)]\n","        state[t,np.where(action[t-1,:]==1)] = 0\n","\n","       \n","        state[t,np.where(state[t,:]>=(dim_z-1))] = 174\n","    \n","        pi0 = policy[state[t]]\n","        action[t,:] = np.intc(np.random.uniform(0,1,size = SampleSize) > pi0).copy()\n","\n","            \n","\n","\n","    state_new = np.reshape(state.T,[-1])\n","    action_new = np.reshape(action.T,[-1])\n","    data = {'state':state_new,'action':action_new}\n","    dat_new = pd.DataFrame(data=data)\n","    \n","    return dat_new,{'state':state,'action':action}\n","SampleSize = 3000\n","TimePeriod = 100\n","res = DataGenerate(SampleSize,TimePeriod, p0 = p0,policy = pi_new)\n","#%%"],"execution_count":null,"outputs":[{"output_type":"stream","text":["100%|██████████| 99/99 [00:00<00:00, 2958.28it/s]"],"name":"stderr"},{"output_type":"stream","text":["generate dataset -->\n"],"name":"stdout"},{"output_type":"stream","text":["\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"QvpxhsmAgeHN"},"source":["Show the replacement times of each sample path in the new generated data set"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"x5qjxf1RaeTQ","executionInfo":{"status":"ok","timestamp":1627324626768,"user_tz":300,"elapsed":430,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"04b8ad5b-fac6-4658-9ff5-ee2d805c796d"},"source":["ac = res[1]['action']\n","st = res[1]['state']\n","num_ac = np.sum(ac,axis=0,dtype=int)\n","plt.boxplot(num_ac)\n","plt.show()\n","\n","tt = np.arange(TimePeriod,dtype = int)\n","for ss in range(10):\n","  plt.plot(tt,st[:,ss])"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"XHo1PUaAgvw0"},"source":["#3. Recover Process:\n","3.1 Recover the dynamic part"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XZeEYRwUcsSn","executionInfo":{"status":"ok","timestamp":1627324639721,"user_tz":300,"elapsed":170,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"e479ee05-d064-42e1-f47e-035b26dce8e7"},"source":["print(theta1_true)\n","print(p0)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[9.8106, 0.011]\n","[0.1275, 0.6009, 0.2569]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1pRquueQkmp9","executionInfo":{"status":"ok","timestamp":1627324805410,"user_tz":300,"elapsed":1057,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"fc03cca3-519d-4521-eda0-37c734d6fae6"},"source":["from scipy.special import logsumexp\n","from scipy.optimize import minimize #scipy version = 1.4.1\n","from scipy import optimize\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","#SampleSize = 300\n","#TimePeriod = 100\n","data = np.array(res[0])\n","state = data[:,0].reshape([SampleSize,TimePeriod]).T\n","action = data[:,1].reshape([SampleSize,TimePeriod]).T\n","#x0_dk =  np.random.uniform(size = x0.shape)\n","\n","def loglike1_func(params,action=action,state=state,TimePeriod=TimePeriod):\n","\n","    trans = Dynamic(params)\n","    res = -np.sum(np.log(trans[action[:-1,:]*dim_z+state[:-1,:],state[1:,:]]))\n","\n","    #print(params,res)\n","    return res#-np.sum(np.log(sigma))\n","\n","def loglike1():\n","        #x0 = [0.046,0.301,0.559,0.099,0.559,0.301,0.923,0.001]\n","        x0 = np.array(p0)*0.95004\n","        cons= (  {'type': 'ineq', 'fun': lambda x: 1-x[0]-x[1]-x[2]-0.001 })\n","        bounds = [(0.001,0.998),(0.001,0.998),(0.001,0.998)]\n","        fitted1 = minimize(\n","            loglike1_func,\n","            x0=x0,\n","            bounds = bounds,# method = 'Nelder-Mead')\n","            constraints= cons)#,\n","            #method = 'trust-constr')\n","        return fitted1\n","fitted1_dk = loglike1()\n","print(fitted1_dk)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["     fun: 288434.78446374065\n","     jac: array([0.8203125 , 0.90234375, 0.53515625])\n"," message: 'Optimization terminated successfully.'\n","    nfev: 75\n","     nit: 13\n","    njev: 13\n","  status: 0\n"," success: True\n","       x: array([0.12813855, 0.60035374, 0.25693287])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPMI320FQ80d","executionInfo":{"status":"ok","timestamp":1627324812285,"user_tz":300,"elapsed":172,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"cfe06bbb-dbe6-4cfc-8ff6-6a6a4b4f215c"},"source":["print(p0,loglike1_func(p0))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.1275, 0.6009, 0.2569] 288435.4849966031\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"XuOjo_OPg7IH"},"source":["3.2.1 Recover the reward structure (with build-in package)"]},{"cell_type":"code","metadata":{"id":"amIwf08Po0c_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627325251445,"user_tz":300,"elapsed":23008,"user":{"displayName":"Lu Sun","photoUrl":"","userId":"12220989488268625125"}},"outputId":"8c1d54b3-88a6-4782-9e6c-f25d8379ea2e"},"source":["theta1_ini = 0.85*np.array(theta1_true)\n","pi_ini = 0.5*np.ones(dim_z)\n","dy_val = Dynamic(fitted1_dk.x)\n","def loglike2_func(theta1_ini,pi_ini,action=action,state=state,TimePeriod=TimePeriod,max_item = 1000,thread = 1e-7):\n","\n","  pi_old = Lfunc(theta1_ini,pi_old=pi_ini,trans=dy_val)#0.6*np.ones(dim_z)\n","  for i in range(max_item):\n","      LogL = lambda theta1: -np.sum(np.log((1-action)*Lfunc(theta1,pi_old = pi_old,trans=dy_val)[state]+\\\n","                                             action *(1-Lfunc(theta1,pi_old = pi_old,trans=dy_val)[state])))\n","      cons= ( {'type': 'ineq', 'fun': lambda x: x[0]-1e-6 },\\\n","              {'type': 'ineq', 'fun': lambda x: x[1]-1e-6 },\\\n","              {'type': 'ineq', 'fun': lambda x: 100-x[0]},\\\n","              {'type': 'ineq', 'fun': lambda x: 100-x[1]})   \n","         \n","      fitted2 = minimize( LogL, x0=theta1_ini,#bounds = bounds, \n","       constraints= cons)#, args=(p0, p1, theta2))\n","      print(fitted2.x)      \n","      pi_new = Lfunc(fitted2.x,pi_old=pi_old,trans=dy_val)\n","\n","      error1 = np.max(np.abs((pi_new-pi_old)/pi_old))\n","      error2 = np.max(np.abs((fitted2.x-theta1_ini)/theta1_ini))\n","\n","      print(error1,error2)\n","\n","      if error1 <=thread and error2 <=thread:\n","        break\n","      pi_old = pi_new\n","      theta1_ini = fitted2.x\n","  return fitted2,pi_new\n","loglike2_func(theta1_ini,pi_ini)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[8.33901 0.00935]\n","0.8770003294359275 0.0\n","[8.33901 0.00935]\n","3.0628178394484804 0.0\n","[8.33901 0.00935]\n","0.23122594024063994 0.0\n","[8.33901 0.00935]\n","0.018564827576986034 0.0\n","[8.33901 0.00935]\n","0.0001869824483658035 0.0\n","[10.00750277  0.01135543]\n","0.019845688399931317 0.2144841750039231\n","[9.87795579 0.01102568]\n","0.04022441703569275 0.029038302990150523\n","[9.8863347  0.01104707]\n","0.004375163168133858 0.001939731728116296\n","[9.88570696 0.01104555]\n","0.000232222640667025 0.00013785567909496937\n","[9.88570696 0.01104558]\n","2.1522790642944556e-05 2.875477269018626e-06\n","[9.88570696 0.01104558]\n","2.0507833972071195e-07 9.31517971326888e-10\n","[9.88570696 0.01104558]\n","3.5833942320168036e-09 9.177318463793888e-10\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["(     fun: 12415.571066516659\n","     jac: array([-0.0123291 ,  1.71435547])\n"," message: 'Optimization terminated successfully.'\n","    nfev: 15\n","     nit: 1\n","    njev: 1\n","  status: 0\n"," success: True\n","       x: array([9.88570696, 0.01104558]),\n"," array([0.99994528, 0.99994111, 0.99993661, 0.99993177, 0.99992656,\n","        0.99992095, 0.99991492, 0.99990843, 0.99990144, 0.99989392,\n","        0.99988582, 0.99987711, 0.99986774, 0.99985765, 0.9998468 ,\n","        0.99983511, 0.99982254, 0.99980902, 0.99979446, 0.9997788 ,\n","        0.99976195, 0.99974382, 0.99972432, 0.99970334, 0.99968076,\n","        0.99965648, 0.99963035, 0.99960225, 0.99957202, 0.99953952,\n","        0.99950455, 0.99946695, 0.99942652, 0.99938304, 0.9993363 ,\n","        0.99928604, 0.99923201, 0.99917394, 0.99911152, 0.99904444,\n","        0.99897236, 0.99889491, 0.99881171, 0.99872233, 0.99862634,\n","        0.99852327, 0.99841259, 0.99829379, 0.99816628, 0.99802945,\n","        0.99788265, 0.99772518, 0.99755632, 0.99737529, 0.99718124,\n","        0.99697331, 0.99675057, 0.99651203, 0.99625666, 0.99598335,\n","        0.99569096, 0.99537827, 0.99504399, 0.99468678, 0.99430524,\n","        0.99389789, 0.9934632 , 0.99299954, 0.99250525, 0.99197859,\n","        0.99141775, 0.99082085, 0.99018597, 0.9895111 , 0.9887942 ,\n","        0.98803317, 0.98722584, 0.98637002, 0.98546346, 0.9845039 ,\n","        0.98348903, 0.98241654, 0.98128409, 0.98008934, 0.97882997,\n","        0.97750366, 0.97610813, 0.97464111, 0.9731004 , 0.97148385,\n","        0.96978936, 0.96801492, 0.96615863, 0.96421864, 0.96219326,\n","        0.96008087, 0.95788002, 0.95558936, 0.95320771, 0.95073402,\n","        0.94816742, 0.94550717, 0.94275272, 0.93990368, 0.93695984,\n","        0.93392115, 0.93078774, 0.92755991, 0.92423813, 0.92082303,\n","        0.91731543, 0.91371627, 0.91002667, 0.90624789, 0.90238133,\n","        0.89842853, 0.89439116, 0.89027098, 0.8860699 , 0.8817899 ,\n","        0.87743307, 0.87300158, 0.86849767, 0.86392366, 0.85928191,\n","        0.85457484, 0.84980491, 0.84497462, 0.84008649, 0.83514306,\n","        0.83014687, 0.82510048, 0.82000645, 0.81486732, 0.80968562,\n","        0.80446389, 0.7992046 , 0.79391023, 0.78858321, 0.78322595,\n","        0.77784081, 0.77243012, 0.76699617, 0.76154118, 0.75606736,\n","        0.75057683, 0.74507171, 0.73955402, 0.73402577, 0.72848888,\n","        0.72294524, 0.71739668, 0.711845  , 0.70629191, 0.70073911,\n","        0.69518823, 0.68964088, 0.68409864, 0.67856306, 0.67303573,\n","        0.66751829, 0.66201252, 0.65652042, 0.65104449, 0.64558802,\n","        0.64015567, 0.63475452, 0.62939577, 0.62409773, 0.61889112,\n","        0.61382765, 0.60899829, 0.60454837, 0.60079132, 0.59795377]))"]},"metadata":{"tags":[]},"execution_count":71}]}]}