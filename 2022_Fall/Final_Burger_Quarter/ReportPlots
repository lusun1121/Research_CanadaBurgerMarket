{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMDACsTX7ZLXEXYaqD1zfie"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tKrJ4bEw83dj","executionInfo":{"status":"ok","timestamp":1669817015408,"user_tz":360,"elapsed":20074,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"4e6ae39b-ec9f-4cad-fdc2-c5f4d56428cb"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["pip install --upgrade --no-deps statsmodels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TaSrqcg_COVr","executionInfo":{"status":"ok","timestamp":1669682230385,"user_tz":360,"elapsed":8412,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"52bf9504-bdcf-446c-ad22-7a4753c24f23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.7/dist-packages (0.12.2)\n","Collecting statsmodels\n","  Downloading statsmodels-0.13.5-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (9.9 MB)\n","\u001b[K     |████████████████████████████████| 9.9 MB 6.7 MB/s \n","\u001b[?25hInstalling collected packages: statsmodels\n","  Attempting uninstall: statsmodels\n","    Found existing installation: statsmodels 0.12.2\n","    Uninstalling statsmodels-0.12.2:\n","      Successfully uninstalled statsmodels-0.12.2\n","Successfully installed statsmodels-0.13.5\n"]}]},{"cell_type":"code","source":["import pickle\n","from os.path import exists\n","path_name = '/content/drive/MyDrive/2022_Fall/Research_Burger/Final_Burger_Quarter/Picture/'\n","name_list = ['InflationRate','RealGDP_wb','Income','PropertyValue','Rival']\n","\n","reg_list = []\n","for i in name_list:\n","  for j in name_list:\n","    if exists(path_name+i+'_'+j+'.txt'):\n","      reg_list.append(i+'_'+j+'.txt')\n","print(reg_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wBBhzbKY9isM","executionInfo":{"status":"ok","timestamp":1669817016906,"user_tz":360,"elapsed":1503,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"f8f7a677-4b66-4f4e-aa21-d9641d8678d2"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["['InflationRate_RealGDP_wb.txt', 'InflationRate_Income.txt', 'InflationRate_PropertyValue.txt', 'InflationRate_Rival.txt', 'RealGDP_wb_Rival.txt']\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import scipy.stats as stats\n","from statsmodels.miscmodels.ordinal_model import OrderedModel\n","#from statsmodels.discrete.discrete_model import OrderedModel\n","from pandas.api.types import CategoricalDtype\n","\n","res={}\n","for i in reg_list:\n","  with open(path_name+i,'rb') as fp:\n","    res[i] = pickle.load(fp)"],"metadata":{"id":"lWur83UTBgIj","colab":{"base_uri":"https://localhost:8080/","height":339},"executionInfo":{"status":"error","timestamp":1669817040843,"user_tz":360,"elapsed":1515,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"a59c19fb-7981-4e65-b712-e7f2f7587129"},"execution_count":3,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-3-b2ee97a5a9d5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreg_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath_name\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m     \u001b[0mres\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'statsmodels.miscmodels.ordinal_model'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["for lt in range(len(reg_list)):\n","  res_inf_with = res[reg_list[lt]]\n","  n_line = len(res_inf_with[0].params.index)\n","  print('----------------------------------------')\n","  for j in range(n_line):\n","    tab_tt = res_inf_with[0].params.index[j]\n","    #print(res_inf_with[0].pvalues[j],res_inf_with[1].pvalues[j],res_inf_with[2].pvalues[j])\n","    ll = '\\multirow{2}{*}{'+tab_tt+'$(\\gamma_{'+tab_tt+'})$}&'\n","          \n","\n","    for i in range(3):\n","      if res_inf_with[i].pvalues[j]<=1/1000:\n","        ll += '{:.4f}'.format(res_inf_with[i].params[j]) + '****'\n","      elif res_inf_with[i].pvalues[j] <=1/100:\n","        ll += '{:.4f}'.format(res_inf_with[i].params[j]) + '***'\n","      elif res_inf_with[i].pvalues[j]<=5/100:\n","        ll += '{:.4f}'.format(res_inf_with[i].params[j]) + '**'\n","      elif res_inf_with[i].pvalues[j]<=10/100:\n","        ll += '{:.4f}'.format(res_inf_with[i].params[j]) + '*'\n","      else:\n","        ll += '{:.4f}'.format(res_inf_with[i].params[j]) \n","\n","      if i<2:\n","        ll+='&'\n","      else:\n","        ll+='\\\\\\\\'\n","    \n","    # print('***'+\\\n","    #       '&{:.4f}'.format(0.2)+'**'+'&{:.4f}'.format(0.3)+'*\\\\\\\\')\n","    # print('&({:.4f})&({:.4f})&({:.4f})\\\\\\\\\\hline'.format(0.1,0.2,0.1))\n","\n","    # print('\\\\\\\\')\n","    # print('{:.4f}***&{:.4f}***&{:.4f}***\\\\\\\\'.format(res_inf_with[0].params[j],\n","    #                                         res_inf_with[1].params[j],\n","    #                                         res_inf_with[2].params[j]))\n","    print(ll)\n","    print('&({:.4f})&({:.4f})&({:.4f})\\\\\\\\\\hline'.format(res_inf_with[0].bse[j],\n","                                            res_inf_with[1].bse[j],\n","                                            res_inf_with[2].bse[j]))\n","  print('Pseudo $R^2$&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res_inf_with[0].prsquared,res_inf_with[1].prsquared,res_inf_with[2].prsquared))\n","\n","\n","\n","#     \\multirow{2}{*}{Rival-store Competition $(\\gamma_{rival})$}     &\n","# -0.6154***&-0.4340***&-0.0962***\\\\\n","# &(0.0845)&(0.0424)&(0.0160)\\\\\\hline\n","#    \\multirow{2}{*}{Population $(\\gamma_{pop})$}&\n","# 0.0113***&0.0100***&0.0015\\\\\n","# &(0.0023)&(0.0022)&(0.0016)\\\\\\hline\n","#      \\multirow{2}{*}{Income $(\\gamma_{inc})$}&\n","# -0.0001&0.0047***&0.0013\\\\\n","# &(0.0021)&(0.0015)&(0.0014)\\\\\\hline\n","#    \\multirow{2}{*}{Property Value $(\\gamma_{pro})$}&\n","# 0.0009*&0.0008***&0.0003\\\\\n","# &(0.0005)&(0.0003)&(0.0002)\\\\\\hline\n","#    \\multirow{2}{*}{Real GDP  $(\\gamma_{gdp})$}&\n","# 0.7978***&0.6910***&0.3363***\\\\\n","# &(0.1311)&(0.1037)&(0.0846)\\\\\\hline\n","#      \\multirow{2}{*}{Cutoff 1 $(c_1)$}&\n","# -2.9407&-2.2397&-2.4121\\\\\n","# &(0.2187)&(0.1050)&(0.0798)\\\\\\hline\n","#     \\multirow{2}{*}{Cutoff 2 $(c_{2})$}&\n","# 1.9027&1.7252&1.5549\\\\\n","# &(0.0312)&(0.0136)&(0.0088)\\\\\\hline\n","#       Number of Observations&23275&23450&23275\\\\\\hline\n","#       Pseudo $R^2$&0.1871&0.0870&0.0160\\\\\n","#       \\hline\n","#     \\end{tabular}\n","#     \\caption{Ordered Probit Regressions: continuous yearly real GDP, population, income, and property value. The standard deviation error are in the parentheses. The symbols ***, **, and * stand for the significance level within 1\\%, 5\\%, and 10\\%, respectively.}\n","#     \\label{table17}\n","# \\end{table}\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t-DrLhooBzn_","executionInfo":{"status":"ok","timestamp":1669235906220,"user_tz":360,"elapsed":294,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"6ffd7734-2718-4517-9c5d-c37a86bb316e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["----------------------------------------\n","\\multirow{2}{*}{Own$(\\gamma_{Own})$}&-2.0024****&-0.9283****&-0.2055****\\\\\n","&(0.1628)&(0.0662)&(0.0242)\\\\\\hline\n","\\multirow{2}{*}{Rival$(\\gamma_{Rival})$}&-0.5133****&-0.3832****&-0.0884****\\\\\n","&(0.0706)&(0.0363)&(0.0137)\\\\\\hline\n","\\multirow{2}{*}{Population$(\\gamma_{Population})$}&0.0964****&0.0873****&0.0130\\\\\n","&(0.0198)&(0.0187)&(0.0133)\\\\\\hline\n","\\multirow{2}{*}{Income$(\\gamma_{Income})$}&-0.0129&0.4052***&0.1308\\\\\n","&(0.1778)&(0.1244)&(0.1196)\\\\\\hline\n","\\multirow{2}{*}{PropertyValue$(\\gamma_{PropertyValue})$}&0.0673*&0.0710***&0.0225\\\\\n","&(0.0387)&(0.0238)&(0.0203)\\\\\\hline\n","\\multirow{2}{*}{RealGDP_wb$(\\gamma_{RealGDP_wb})$}&0.2682****&0.2595****&0.1140****\\\\\n","&(0.0507)&(0.0404)&(0.0311)\\\\\\hline\n","\\multirow{2}{*}{InflationRate$(\\gamma_{InflationRate})$}&-0.0115&0.0134&-0.0241\\\\\n","&(0.0351)&(0.0266)&(0.0187)\\\\\\hline\n","\\multirow{2}{*}{exit/unchanged$(\\gamma_{exit/unchanged})$}&-3.3556****&-2.6834****&-2.9199****\\\\\n","&(0.2038)&(0.1212)&(0.0875)\\\\\\hline\n","\\multirow{2}{*}{unchanged/enter$(\\gamma_{unchanged/enter})$}&1.9963****&1.8674****&1.7397****\\\\\n","&(0.0228)&(0.0106)&(0.0064)\\\\\\hline\n","Pseudo $R^2$&0.1539&0.0730&0.0137\\\\\n","----------------------------------------\n","\\multirow{2}{*}{Own$(\\gamma_{Own})$}&-1.7768****&-0.7603****&-0.1808****\\\\\n","&(0.1442)&(0.0612)&(0.0236)\\\\\\hline\n","\\multirow{2}{*}{Rival$(\\gamma_{Rival})$}&-0.3420****&-0.2504****&-0.0621****\\\\\n","&(0.0688)&(0.0334)&(0.0121)\\\\\\hline\n","\\multirow{2}{*}{Income$(\\gamma_{Income})$}&0.4370****&0.6975****&0.3544****\\\\\n","&(0.1133)&(0.1031)&(0.1029)\\\\\\hline\n","\\multirow{2}{*}{InflationRate$(\\gamma_{InflationRate})$}&-0.1607****&-0.0963****&-0.0567****\\\\\n","&(0.0297)&(0.0227)&(0.0170)\\\\\\hline\n","\\multirow{2}{*}{exit/unchanged$(\\gamma_{exit/unchanged})$}&-4.1469****&-3.4426****&-3.1499****\\\\\n","&(0.1642)&(0.0852)&(0.0674)\\\\\\hline\n","\\multirow{2}{*}{unchanged/enter$(\\gamma_{unchanged/enter})$}&1.9656****&1.8471****&1.7379****\\\\\n","&(0.0205)&(0.0097)&(0.0063)\\\\\\hline\n","Pseudo $R^2$&0.1230&0.0505&0.0113\\\\\n","----------------------------------------\n","\\multirow{2}{*}{Own$(\\gamma_{Own})$}&-1.8076****&-0.7538****&-0.1784****\\\\\n","&(0.1468)&(0.0614)&(0.0236)\\\\\\hline\n","\\multirow{2}{*}{Rival$(\\gamma_{Rival})$}&-0.3665****&-0.2368****&-0.0592****\\\\\n","&(0.0694)&(0.0330)&(0.0120)\\\\\\hline\n","\\multirow{2}{*}{PropertyValue$(\\gamma_{PropertyValue})$}&0.1323****&0.1214****&0.0526***\\\\\n","&(0.0261)&(0.0191)&(0.0178)\\\\\\hline\n","\\multirow{2}{*}{InflationRate$(\\gamma_{InflationRate})$}&-0.1451****&-0.0957****&-0.0572****\\\\\n","&(0.0301)&(0.0227)&(0.0170)\\\\\\hline\n","\\multirow{2}{*}{exit/unchanged$(\\gamma_{exit/unchanged})$}&-4.1764****&-3.6016****&-3.2395****\\\\\n","&(0.1594)&(0.0763)&(0.0541)\\\\\\hline\n","\\multirow{2}{*}{unchanged/enter$(\\gamma_{unchanged/enter})$}&1.9696****&1.8467****&1.7376****\\\\\n","&(0.0208)&(0.0097)&(0.0063)\\\\\\hline\n","Pseudo $R^2$&0.1267&0.0492&0.0109\\\\\n","----------------------------------------\n","\\multirow{2}{*}{Own$(\\gamma_{Own})$}&-1.7605****&-0.6897****&-0.1713****\\\\\n","&(0.1440)&(0.0594)&(0.0235)\\\\\\hline\n","\\multirow{2}{*}{Rival$(\\gamma_{Rival})$}&-0.3268****&-0.1886****&-0.0519****\\\\\n","&(0.0688)&(0.0321)&(0.0117)\\\\\\hline\n","\\multirow{2}{*}{InflationRate$(\\gamma_{InflationRate})$}&-0.1827****&-0.1163****&-0.0656****\\\\\n","&(0.0291)&(0.0224)&(0.0167)\\\\\\hline\n","\\multirow{2}{*}{exit/unchanged$(\\gamma_{exit/unchanged})$}&-4.3994****&-3.7640****&-3.3160****\\\\\n","&(0.1516)&(0.0720)&(0.0479)\\\\\\hline\n","\\multirow{2}{*}{unchanged/enter$(\\gamma_{unchanged/enter})$}&1.9630****&1.8405****&1.7368****\\\\\n","&(0.0204)&(0.0095)&(0.0063)\\\\\\hline\n","Pseudo $R^2$&0.1183&0.0407&0.0098\\\\\n","----------------------------------------\n","\\multirow{2}{*}{Own$(\\gamma_{Own})$}&-1.9238****&-0.8540****&-0.2031****\\\\\n","&(0.1510)&(0.0637)&(0.0242)\\\\\\hline\n","\\multirow{2}{*}{Rival$(\\gamma_{Rival})$}&-0.4548****&-0.3293****&-0.0856****\\\\\n","&(0.0687)&(0.0355)&(0.0136)\\\\\\hline\n","\\multirow{2}{*}{RealGDP_wb$(\\gamma_{RealGDP_wb})$}&0.3773****&0.3449****&0.1588****\\\\\n","&(0.0360)&(0.0321)&(0.0251)\\\\\\hline\n","\\multirow{2}{*}{exit/unchanged$(\\gamma_{exit/unchanged})$}&-3.3343****&-2.9110****&-2.8966****\\\\\n","&(0.1624)&(0.0834)&(0.0606)\\\\\\hline\n","\\multirow{2}{*}{unchanged/enter$(\\gamma_{unchanged/enter})$}&1.9820****&1.8585****&1.7391****\\\\\n","&(0.0212)&(0.0102)&(0.0064)\\\\\\hline\n","Pseudo $R^2$&0.1442&0.0625&0.0129\\\\\n"]}]},{"cell_type":"code","source":["import pickle\n","\n","mk_list = {0:'Low',1:'Medium',2:'High'}\n","ei_list = {0:'GDP',1:'INF'}\n","res = []\n","for ei in range(1,2):\n","\n","  res_temp = []\n","  for mk in range(3):\n","    with open(path_name+'Mk'+mk_list[mk]+'_EI'+ei_list[ei]+'_Dim16.txt','rb') as fp:\n","      res_temp.append(pickle.load(fp))\n","  res.append(res_temp)"],"metadata":{"id":"i2VMfbxNP3sl","executionInfo":{"status":"ok","timestamp":1669817107898,"user_tz":360,"elapsed":783,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","ei = 0\n","res[ei][2]['res_par_rw'].x\n","\n","print('Base Profit in Recession ($\\\\theta_{base,rec}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[0],res[ei][0]['res_par_rw'].x[6],\n","                                                             res[ei][1]['res_par_rw'].x[0],res[ei][1]['res_par_rw'].x[6],\n","                                                             res[ei][2]['res_par_rw'].x[0],res[ei][2]['res_par_rw'].x[6]))\n","print('Base Profit in Expansion ($\\\\theta_{base,exp}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[1],res[ei][0]['res_par_rw'].x[7],\n","                                                             res[ei][1]['res_par_rw'].x[1],res[ei][1]['res_par_rw'].x[7],\n","                                                             res[ei][2]['res_par_rw'].x[1],res[ei][2]['res_par_rw'].x[7]))\n","print('Own-store ($\\\\theta_{own}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[2],res[ei][0]['res_par_rw'].x[8],\n","                                                             res[ei][1]['res_par_rw'].x[2],res[ei][1]['res_par_rw'].x[8],\n","                                                             res[ei][2]['res_par_rw'].x[2],res[ei][2]['res_par_rw'].x[8]))\n","print('Rival-store ($\\\\theta_{rival}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[3],res[ei][0]['res_par_rw'].x[9],\n","                                                             res[ei][1]['res_par_rw'].x[3],res[ei][1]['res_par_rw'].x[9],\n","                                                             res[ei][2]['res_par_rw'].x[3],res[ei][2]['res_par_rw'].x[9]))\n","print('Income&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[4],res[ei][0]['res_par_rw'].x[10],\n","                                                             res[ei][1]['res_par_rw'].x[4],res[ei][1]['res_par_rw'].x[10],\n","                                                             res[ei][2]['res_par_rw'].x[4],res[ei][2]['res_par_rw'].x[10]))\n","print('Entry Sunk Cost ($\\\\theta_{entry}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_par_rw'].x[5],res[ei][0]['res_par_rw'].x[11],\n","                                                             res[ei][1]['res_par_rw'].x[5],res[ei][1]['res_par_rw'].x[11],\n","                                                             res[ei][2]['res_par_rw'].x[5],res[ei][2]['res_par_rw'].x[11]))\n","print('\\hline')\n","print('$\\mathcal{L^{POSG}}$&\\multicolumn{2}{c}{'+str(np.int(res[ei][0]['log_tol'][0]))+\\\n","      '}&\\multicolumn{2}{|c}{'+str(np.int(res[ei][1]['log_tol'][0]))+'}&\\multicolumn{2}{|c}{'+\\\n","      str(np.int(res[ei][2]['log_tol'][0]))+'}\\\\\\\\')\n","# res[ei][1]['log_tol'][0]\n","\n","\n","print('-------------------------------------------')\n","#print('Base Profit in Negtive GDP Growth ($\\\\theta_{base,neg}^i$)&'\n","print('Base Profit in Mild Inflation Rate ($\\theta_{base,mild}^i$)'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[0],res[ei][0]['res_com_rw'].x[6],\n","                                                             res[ei][1]['res_com_rw'].x[0],res[ei][1]['res_com_rw'].x[6],\n","                                                             res[ei][2]['res_com_rw'].x[0],res[ei][2]['res_com_rw'].x[6]))\n","#print('Base Profit in Positive GDP Growth ($\\\\theta_{base,pos}^i$)&'\n","print('Base Profit in High Inflation Rate ($\\theta_{base,high}^i$)'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[1],res[ei][0]['res_com_rw'].x[7],\n","                                                             res[ei][1]['res_com_rw'].x[1],res[ei][1]['res_com_rw'].x[7],\n","                                                             res[ei][2]['res_com_rw'].x[1],res[ei][2]['res_com_rw'].x[7]))\n","print('Own-store ($\\\\theta_{own}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[2],res[ei][0]['res_com_rw'].x[8],\n","                                                             res[ei][1]['res_com_rw'].x[2],res[ei][1]['res_com_rw'].x[8],\n","                                                             res[ei][2]['res_com_rw'].x[2],res[ei][2]['res_com_rw'].x[8]))\n","print('Rival-store ($\\\\theta_{rival}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[3],res[ei][0]['res_com_rw'].x[9],\n","                                                             res[ei][1]['res_com_rw'].x[3],res[ei][1]['res_com_rw'].x[9],\n","                                                             res[ei][2]['res_com_rw'].x[3],res[ei][2]['res_com_rw'].x[9]))\n","print('Entry Sunk Cost ($\\\\theta_{entry}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[4],res[ei][0]['res_com_rw'].x[10],\n","                                                             res[ei][1]['res_com_rw'].x[4],res[ei][1]['res_com_rw'].x[10],\n","                                                             res[ei][2]['res_com_rw'].x[4],res[ei][2]['res_com_rw'].x[10]))\n","print('Entry Sunk Cost ($\\\\theta_{entry}^i$)&'+'{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}&{:.4f}\\\\\\\\'.format(res[ei][0]['res_com_rw'].x[5],res[ei][0]['res_com_rw'].x[11],\n","                                                             res[ei][1]['res_com_rw'].x[5],res[ei][1]['res_com_rw'].x[11],\n","                                                             res[ei][2]['res_com_rw'].x[5],res[ei][2]['res_com_rw'].x[11]))\n","print('\\hline')\n","print('$\\mathcal{L^{COSG}}$&\\multicolumn{2}{c}{'+str(np.int(res[ei][0]['log_tol'][1]))+\\\n","      '}&\\multicolumn{2}{|c}{'+str(np.int(res[ei][1]['log_tol'][1]))+'}&\\multicolumn{2}{|c}{'+\\\n","      str(np.int(res[ei][2]['log_tol'][1]))+'}\\\\\\\\')\n","print('----------------------------------------')\n","print('POSG&'+str(np.int(res[ei][0]['log_dy'][0]))+'&'+str(np.int(res[ei][0]['log_rw'][0]))+'&'+str(np.int(res[ei][0]['log_tol'][0]))+\\\n","      '&'+str(np.int(res[ei][1]['log_dy'][0]))+'&'+str(np.int(res[ei][1]['log_rw'][0]))+'&'+str(np.int(res[ei][1]['log_tol'][0]))+\\\n","      '&'+str(np.int(res[ei][2]['log_dy'][0]))+'&'+str(np.int(res[ei][2]['log_rw'][0]))+'&'+str(np.int(res[ei][2]['log_tol'][0]))+\\\n","      '\\\\\\\\')\n","print('COSG&'+str(np.int(res[ei][0]['log_dy'][1]))+'&'+str(np.int(res[ei][0]['log_rw'][1]))+'&'+str(np.int(res[ei][0]['log_tol'][1]))+\\\n","      '&'+str(np.int(res[ei][1]['log_dy'][1]))+'&'+str(np.int(res[ei][1]['log_rw'][1]))+'&'+str(np.int(res[ei][1]['log_tol'][1]))+\\\n","      '&'+str(np.int(res[ei][2]['log_dy'][1]))+'&'+str(np.int(res[ei][2]['log_rw'][1]))+'&'+str(np.int(res[ei][2]['log_tol'][1]))+\\\n","      '\\\\\\\\')\n","print('\\hline')\n","print('$\\\\left\\\\Vert\\\\frac{\\\\mathcal{L}^{POSG}-\\\\mathcal{L}^{COSG}}{\\\\mathcal{L}^{COSG}}\\\\right\\\\Vert$&')\n","print('{:.4f}'.format(res[ei][0]['log_dy'][2])+\\\n","      '$\\%$&'+'{:.4f}'.format(res[ei][0]['log_rw'][2])+'$\\%$& '+'{:.4f}'.format(res[ei][0]['log_tol'][2])+'$\\%$&' +'{:.4f}'.format(res[ei][1]['log_dy'][2])+\\\n","      '$\\%$&'+'{:.4f}'.format(res[ei][1]['log_rw'][2])+'$\\%$& '+'{:.4f}'.format(res[ei][1]['log_tol'][2])+'$\\%$&'+'{:.4f}'.format(res[ei][2]['log_dy'][2])+\\\n","      '$\\%$&'+'{:.4f}'.format(res[ei][2]['log_rw'][2])+'$\\%$& '+'{:.4f}'.format(res[ei][2]['log_tol'][2])+'$\\%$\\\\\\\\')\n","print('------------------------------------')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EW4OeDD4Q15O","executionInfo":{"status":"ok","timestamp":1669817275391,"user_tz":360,"elapsed":11,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"60b760a4-5b2d-4629-d50a-c74349e5e46c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Base Profit in Recession ($\\theta_{base,rec}^i$)&2.3989&1.3292&2.0029&1.4040&2.3150&1.4524\\\\\n","Base Profit in Expansion ($\\theta_{base,exp}^i$)&3.3443&1.6278&2.2958&1.7557&2.4189&1.7051\\\\\n","Own-store ($\\theta_{own}^i$)&-1.8732&-0.4286&-0.4717&-0.4622&-0.3904&-0.3766\\\\\n","Rival-store ($\\theta_{rival}^i$)&-0.2188&-0.1039&-0.0806&-0.1007&-0.0089&-0.0147\\\\\n","Income&0.0728&0.0139&0.0488&0.0439&0.0128&0.0200\\\\\n","Entry Sunk Cost ($\\theta_{entry}^i$)&11.2171&10.2875&13.8279&10.4196&14.9267&10.0736\\\\\n","\\hline\n","$\\mathcal{L^{POSG}}$&\\multicolumn{2}{c}{-74216}&\\multicolumn{2}{|c}{-70609}&\\multicolumn{2}{|c}{-61492}\\\\\n","-------------------------------------------\n","Base Profit in Mild Inflation Rate ($\theta_{base,mild}^i$)2.4782&1.3747&2.0578&1.4271&2.3325&1.5058\\\\\n","Base Profit in High Inflation Rate ($\theta_{base,high}^i$)3.4652&1.6797&2.3676&1.8623&2.4337&1.7655\\\\\n","Own-store ($\\theta_{own}^i$)&-1.6730&-0.4176&-0.4620&-0.4453&-0.3887&-0.3752\\\\\n","Rival-store ($\\theta_{rival}^i$)&-0.2107&-0.0977&-0.0636&-0.0879&-0.0023&-0.0063\\\\\n","Entry Sunk Cost ($\\theta_{entry}^i$)&0.0799&0.0274&0.0515&0.0506&0.0147&0.0231\\\\\n","Entry Sunk Cost ($\\theta_{entry}^i$)&11.2049&10.2942&13.8151&10.3991&14.9225&10.0634\\\\\n","\\hline\n","$\\mathcal{L^{COSG}}$&\\multicolumn{2}{c}{-75043}&\\multicolumn{2}{|c}{-71434}&\\multicolumn{2}{|c}{-62311}\\\\\n","----------------------------------------\n","POSG&-12203&-62012&-74216&-12300&-58308&-70609&-12294&-49198&-61492\\\\\n","COSG&-13014&-62029&-75043&-13118&-58316&-71434&-13105&-49206&-62311\\\\\n","\\hline\n","$\\left\\Vert\\frac{\\mathcal{L}^{POSG}-\\mathcal{L}^{COSG}}{\\mathcal{L}^{COSG}}\\right\\Vert$&\n","6.2321$\\%$&0.0269$\\%$& 1.1031$\\%$&6.2294$\\%$&0.0141$\\%$& 1.1555$\\%$&6.1891$\\%$&0.0164$\\%$& 1.3146$\\%$\\\\\n","------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:26: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:54: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:58: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:62: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n","Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n"]}]},{"cell_type":"code","source":["\\begin{table}[h!]\n","    \\begin{subtable}[h!]{\\textwidth}\n","        \\centering\n","        \\small\n","    \\begin{tabular}{c|cc|cc|cc}\n","    \\hline\n","    Market Type & \\multicolumn{2}{c}{Low}& \\multicolumn{2}{|c}{Medium}& \\multicolumn{2}{|c}{High}\\\\\n","    \\hline\n","    Firm $i$& MCD &Other& MCD &Other& MCD &Other\\\\\n","    \\hline\n","Base Profit in Recession ($\\theta_{base,rec}^i$)&2.4097&1.3108&2.0109&1.4085&2.3302&1.4748\\\\\n","Base Profit in Expansion ($\\theta_{base,exp}^i$)&3.4163&1.6298&2.3426&1.8010&2.4252&1.7287\\\\\n","Own-store ($\\theta_{own}^i$)&-1.7906&-0.4069&-0.4485&-0.4388&-0.3877&-0.3770\\\\\n","Rival-store ($\\theta_{rival}^i$)&-0.2061&-0.0996&-0.0497&-0.0803&-0.0039&-0.0083\\\\\n","Entry Sunk Cost ($\\theta_{entry}^i$)&11.2017&10.2814&13.8214&10.4156&14.9237&10.0694\\\\\n","\\hline\n","$\\mathcal{L^{POSG}}$&\\multicolumn{2}{c}{-72305}&\\multicolumn{2}{|c}{-68684}&\\multicolumn{2}{|c}{-59486}\\\\\n","%-------------------------------------------\n","     \\hline\n","    \\end{tabular}\n","       \\caption{POSG Model}\n","       \\label{POSG_INF_EST}\n","    \\end{subtable}\n","    \\hfill\n","    \\begin{subtable}[h!]{\\textwidth}\n","        \\centering\n","        \\small\n","    \\begin{tabular}{c|cc|cc|cc}\n","    \\hline\n","    Market Type & \\multicolumn{2}{c}{Low}& \\multicolumn{2}{|c}{Medium}& \\multicolumn{2}{|c}{High}\\\\\n","    \\hline\n","    Firm $i$& MCD &Other& MCD &Other& MCD &Other\\\\\n","    \\hline\n","Base Profit in Mild Inflation Rate ($\theta_{base,mild}^i$)2.4189&1.4709&1.9745&1.1134&2.3417&1.3730\\\\\n","Base Profit in High Inflation Rate ($\theta_{base,high}^i$)3.6323&1.8570&2.5527&2.2927&2.4527&1.9578\\\\\n","Own-store ($\\theta_{own}^i$)&-1.5653&-0.4948&-0.4423&-0.4314&-0.3861&-0.3753\\\\\n","Rival-store ($\\theta_{rival}^i$)&-0.2028&-0.1153&-0.0349&-0.0704&-0.0000&-0.0014\\\\\n","Entry Sunk Cost ($\\theta_{entry}^i$)&11.2216&10.2957&13.8199&10.3688&14.9182&10.0697\\\\\n","\\hline\n","$\\mathcal{L^{COSG}}$&\\multicolumn{2}{c}{-73135}&\\multicolumn{2}{|c}{-69509}&\\multicolumn{2}{|c}{-60306}\\\\\n","%----------------------------------------\n","     \\hline\n","    \\end{tabular}\n","        \\caption{COSG Model}\n","        \\label{COSG_INF_EST}\n","     \\end{subtable}\n","     \\hfill\n","     \\begin{subtable}[h!]{\\textwidth}\n","         \\centering\n","         \\small\n","        \\begin{tabular}{c|ccc|ccc|ccc}\n","        \\hline\n","        Market Type &\\multicolumn{3}{c|}{Low}&\\multicolumn{3}{c|}{Medium}&\\multicolumn{3}{c}{High}\\\\\n","        \\hline\n","             Log-likelihood&$\\mathcal{L}_{dynamic}$ & $\\mathcal{L}_{reward}$ &$\\mathcal{L}_{total}$&$\\mathcal{L}_{dynamic}$ & $\\mathcal{L}_{reward}$ &$\\mathcal{L}_{total}$ &$\\mathcal{L}_{dynamic}$ & $\\mathcal{L}_{reward}$ &$\\mathcal{L}_{total}$   \\\\\n","             \\hline\n","POSG&-10283&-62021&-72305&-10360&-58323&-68684&-10283&-49203&-59486\\\\\n","COSG&-11094&-62040&-73135&-11178&-58331&-69509&-11094&-49212&-60306\\\\\n","\\hline\n","$\\left\\Vert\\frac{\\mathcal{L}^{POSG}-\\mathcal{L}^{COSG}}{\\mathcal{L}^{COSG}}\\right\\Vert$&\n","7.3106$\\%$&0.0306$\\%$& 1.1350$\\%$&7.3106$\\%$&0.0141$\\%$& 1.1874$\\%$&7.3106$\\%$&0.0180$\\%$& 1.3596$\\%$\\\\\n","             \\hline\n","        \\end{tabular}\n","        \\caption{Log-likelihood Comparison}\n","        \\label{LogLike_INF_EST}\n","     \\end{subtable}\n","     \\caption{Estimation Results on Canada Burger Market with One-quarter-lag Inflation Rate Indicator}\n","     \\label{EstRes_Inflation}\n","\\end{table}"],"metadata":{"id":"fX_5YA7xRO0g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pickle\n","import matplotlib.pyplot as plt\n","import numpy as np\n","path_plot = '/content/drive/MyDrive/2022_Fall/Research_Burger/'\n","\n","with open(path_plot+'global.txt','rb') as fp:\n","  res_inf = pickle.load(fp)\n","ll=np.zeros([3,9])\n","xx = np.arange(9)*0.1+0.1\n","#print(res_inf[0])\n","for i in range(9):\n","  ll[:,i] = np.array([res_inf[i][1].fun,res_inf[i][2].fun,-(res_inf[i][1].fun-res_inf[i][2].fun)/res_inf[i][2].fun])\n","plt.plot(xx,ll[2],'+:',label = 'unbounded')\n","\n","\n","\n","with open(path_plot+'global1.txt','rb') as fp:\n","  res_inf = pickle.load(fp)\n","ll=np.zeros([3,9])\n","xx = np.arange(9)*0.1+0.1\n","#print(res_inf[0])\n","for i in range(9):\n","  ll[:,i] = np.array([res_inf[i][1].fun,res_inf[i][2].fun,-(res_inf[i][1].fun-res_inf[i][2].fun)/res_inf[i][2].fun])\n","plt.plot(xx,ll[2],'+:',label = 'bounded')\n","plt.legend()\n","plt.title('Inflation Rate')\n","plt.ylim(0,0.1)\n","plt.xlabel('dynamic weight')\n","plt.show()\n","\n","\n","with open(path_plot+'global_gdp.txt','rb') as fp:\n","  res_inf = pickle.load(fp)\n","ll=np.zeros([3,9])\n","xx = np.arange(9)*0.1+0.1\n","#print(res_inf[0])\n","for i in range(9):\n","  ll[:,i] = np.array([res_inf[i][1].fun,res_inf[i][2].fun,-(res_inf[i][1].fun-res_inf[i][2].fun)/res_inf[i][2].fun])\n","plt.plot(xx,ll[2],'+:',label = 'unbounded')\n","\n","\n","\n","with open(path_plot+'global1_gdp.txt','rb') as fp:\n","  res_inf = pickle.load(fp)\n","ll=np.zeros([3,9])\n","xx = np.arange(9)*0.1+0.1\n","#print(res_inf[0])\n","for i in range(9):\n","  ll[:,i] = np.array([res_inf[i][1].fun,res_inf[i][2].fun,-(res_inf[i][1].fun-res_inf[i][2].fun)/res_inf[i][2].fun])\n","plt.plot(xx,ll[2],'+:',label = 'bounded')\n","plt.legend()\n","plt.title('GDP')\n","plt.xlabel('dynamic weight')\n","plt.ylim(0,0.1)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"WOqQ0D_U3fXI","executionInfo":{"status":"ok","timestamp":1669817891416,"user_tz":360,"elapsed":721,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"4f0b7a99-d53e-4228-a497-1ef72b34308c"},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}