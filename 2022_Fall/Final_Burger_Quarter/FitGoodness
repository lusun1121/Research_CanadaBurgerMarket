{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPTYnX7JzcvgazRrDzWdkE6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ptB1YujYxI9Q","executionInfo":{"status":"ok","timestamp":1670607834060,"user_tz":360,"elapsed":22154,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"0017ee8d-b5d6-4391-d5a9-a39d84cfa5b5"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import pickle\n","\n","save_pic = '/content/drive/MyDrive/2022_Fall/Research_Burger/Final_Burger_Quarter/Picture/'\n","title_mk ={1:'Low',2:'Medium',3:'High'}\n","economy_ind = {True:'GDP',False:'INF'}\n","dimention_dim = {0:'Small',1:'Large'}\n","policy_res = {}\n","for mk in range(1,4):\n","  for gdp_true in range(0,2):\n","    with open(save_pic+'Policy_Mk'+title_mk[mk]+'_EI'+economy_ind[gdp_true]+'_Dim256.txt','rb') as fp:\n","      policy_res[economy_ind[gdp_true]+str(mk)+'_DLarge'] = pickle.load(fp)\n","    with open(save_pic+'Policy_Mk'+title_mk[mk]+'_EI'+economy_ind[gdp_true]+'_DimSmall.txt','rb') as fp:\n","      policy_res[economy_ind[gdp_true]+str(mk)+'_DSmall'] = pickle.load(fp)\n"],"metadata":{"id":"p_n3XSIWxRE1","executionInfo":{"status":"ok","timestamp":1670607852723,"user_tz":360,"elapsed":4928,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["#Data Initial"],"metadata":{"id":"v7vGLXu49xN8"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","#obser = 2\n","I = 2 #MCD and Other homogenous\n","J = 3 #Action: 0,1,2\n","#NZ = obser\n","TimeLength = 140\n","dim_hstate = 2\n","dim_observe = 2#obser\n","data = pd.read_csv('/content/drive/MyDrive/2022_Fall/Research_Burger/DataFinalDiscrete.csv')\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"ZsQL08oFzxCz","executionInfo":{"status":"ok","timestamp":1670607941414,"user_tz":360,"elapsed":1021,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"outputId":"7e826a68-6aa0-4f54-9133-40fde10377b8"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        Action  Own  Rival  Pop  Inc  Val  GDP  INF  MarketType agent  year\n","0            1    0      0    2    2    3    1    1         1.0    aw  1970\n","1            1    0      0    2    2    3    0    1         1.0    aw  1970\n","2            1    0      0    2    2    3    1    1         1.0    aw  1970\n","3            1    0      0    2    2    3    1    1         1.0    aw  1970\n","4            1    0      0    2    2    3    0    0         1.0    aw  1971\n","...        ...  ...    ...  ...  ...  ...  ...  ...         ...   ...   ...\n","279995       1    0      0    1    3    2    1    1         1.0   wdy  2003\n","279996       1    0      0    1    3    2    1    0         1.0   wdy  2004\n","279997       1    0      0    1    3    2    1    1         1.0   wdy  2004\n","279998       1    0      0    1    3    2    1    1         1.0   wdy  2004\n","279999       1    0      0    1    3    2    1    1         1.0   wdy  2004\n","\n","[280000 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-cb4dea23-fa75-4eed-9d95-db5701f604fa\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Action</th>\n","      <th>Own</th>\n","      <th>Rival</th>\n","      <th>Pop</th>\n","      <th>Inc</th>\n","      <th>Val</th>\n","      <th>GDP</th>\n","      <th>INF</th>\n","      <th>MarketType</th>\n","      <th>agent</th>\n","      <th>year</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>aw</td>\n","      <td>1970</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>aw</td>\n","      <td>1970</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>aw</td>\n","      <td>1970</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>aw</td>\n","      <td>1970</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>aw</td>\n","      <td>1971</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>279995</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>wdy</td>\n","      <td>2003</td>\n","    </tr>\n","    <tr>\n","      <th>279996</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>wdy</td>\n","      <td>2004</td>\n","    </tr>\n","    <tr>\n","      <th>279997</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>wdy</td>\n","      <td>2004</td>\n","    </tr>\n","    <tr>\n","      <th>279998</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>wdy</td>\n","      <td>2004</td>\n","    </tr>\n","    <tr>\n","      <th>279999</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>wdy</td>\n","      <td>2004</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>280000 rows Ã— 11 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb4dea23-fa75-4eed-9d95-db5701f604fa')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-cb4dea23-fa75-4eed-9d95-db5701f604fa button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-cb4dea23-fa75-4eed-9d95-db5701f604fa');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["def Dynamic(theta23):\n","  trans_val = theta23[0:2]\n","  obser_val = theta23[2:]\n","\n","  trans = np.zeros([dim_hstate,dim_hstate]) #s_t^h,s_{t+1}^h\n","  trans[:,0] = trans_val\n","  trans[:,1] = 1-trans[:,0]\n","  obser = np.zeros([dim_hstate,dim_observe])\n","  obser[:,0] = [obser_val,1-obser_val]\n","  #obser[:,0] = obser_val\n","  obser[:,1] = 1-obser[:,0]\n","  return trans,obser\n","#print(Dynamic(np.array([0.95, 0.05]+ [0.125, 0.125])))#,0.125]+[0.1])))#,0.1,0.1])))  \n","\n","def SigmaLambda(theta23,num_discrete,z_old = None,x_old=None,T=None,):\n","  trans,obser = Dynamic(theta23)\n","  if T==None: #generate function for Q function\n","    x_old =  np.linspace(0,1,num=num_discrete)\n","    x_new = np.zeros([num_discrete,dim_observe]) #x_old,z_old,z_new\n","    sigma = np.zeros([num_discrete,dim_observe])\n","\n","    for z in range(dim_observe):\n","      #for z_prime in range(dim_observe):\n","        x_temp = (x_old*trans[0,0] + (1-x_old) * trans[1,0])*obser[0,z]#,z_prime]\n","        sigma[:,z] = x_temp + (x_old*trans[0,1] + (1-x_old) * trans[1,1])*obser[1,z]#,z_prime]\n","        sigma_nonzero = np.where(sigma[:,z]!=0)\n","        x_new[:,z][sigma_nonzero] = x_temp[sigma_nonzero]/sigma[:,z][sigma_nonzero]\n","  elif T==1:\n","    x_temp = (x_old*trans[0,0]+(1-x_old)*trans[1,0])*obser[0,z_old]\n","    sigma = x_temp + (x_old*trans[0,1]+(1-x_old)*trans[1,1])*obser[1,z_old]\n","    #sigma_nonzero = np.where(sigma!=0)\n","    x_new = x_temp/sigma#[sigma_nonzero]/sigma[sigma_nonzero]\n","  else: #generate whole blief in recover process\n","    x_new = np.zeros([T,len(x_old)])\n","    sigma = np.zeros([T-1,len(x_old)])\n","    x_new[0] = x_old\n","    for t in range(T-1):\n","      #z = z_old[t,:]\n","      z_prime = z_old[t+1,:]\n","      x_temp = (x_new[t]*trans[0,0]+(1-x_new[t])*trans[1,0])*obser[0,z_prime]\n","      sigma[t] = x_temp + (x_new[t]*trans[0,1]+(1-x_new[t])*trans[1,1])*obser[1,z_prime]\n","      sigma_nonzero = np.where(sigma[t]!=0)\n","      x_new[t+1][sigma_nonzero] = x_temp[sigma_nonzero]/sigma[t][sigma_nonzero]\n","\n","  belief_f = np.floor(x_new*(num_discrete-1))/(num_discrete-1)\n","  belief_c = np.ceil(x_new*(num_discrete-1))/(num_discrete-1)\n","  iterpolate = np.zeros(belief_f.shape)\n","  iterpolate[np.where((belief_f-belief_c)!=0)] = (x_new-belief_c)[np.where((belief_f-belief_c)!=0)]/(belief_f-belief_c)[np.where((belief_f-belief_c)!=0)]      \n","\n","  return sigma,x_new,[iterpolate,np.int_(belief_f*(num_discrete-1)),np.int_(belief_c*(num_discrete-1))]\n","dim_a = 3\n","dy_aiso = np.zeros([dim_a,4,4])\n","for ai in range(dim_a):\n","  for ni_old in range(4):\n","    for ni_new in range(4):\n","      if ni_new == ni_old + ai-1:\n","        dy_aiso[ai,ni_old,ni_new] = 1\n","dy_aiso[0,0,0] = 1\n","dy_aiso[2,3,3] = 1"],"metadata":{"id":"JpzS9Eh_0682","executionInfo":{"status":"ok","timestamp":1670607944010,"user_tz":360,"elapsed":151,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["from tqdm import tqdm\n","\n","def DataGeneration(gdp_true,mk,dim,T=TimeLength,data = data,obser = 2): # (N=5*60*133)\n","  if gdp_true:\n","    z_data = data['GDP'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength]).T\n","    x_data = (1/obser)*np.ones(z_data.shape[1])*0 +1\n","    theta23 = np.array([0.8499    , 0.0251    , 0.93451554])\n","  else:\n","    z_data = data['INF'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength]).T\n","    x_data = (1/obser)*np.ones(z_data.shape[1])*0 \n","    theta23 = np.array([0.8501   , 0.0251   , 0.8380984])\n","\n","  Ni_mcd = data['Own'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  Ni_aw = data['Own'][(data['MarketType']==mk)&(data['agent']=='aw')].to_numpy()\n","  Ni_bk = data['Own'][(data['MarketType']==mk)&(data['agent']=='bk')].to_numpy()\n","  Ni_hvy = data['Own'][(data['MarketType']==mk)&(data['agent']=='hvy')].to_numpy()\n","  Ni_wdy = data['Own'][(data['MarketType']==mk)&(data['agent']=='wdy')].to_numpy()\n","\n","  ai_mcd = data['Action'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  ai_aw = data['Action'][(data['MarketType']==mk)&(data['agent']=='aw')].to_numpy()\n","  ai_bk = data['Action'][(data['MarketType']==mk)&(data['agent']=='bk')].to_numpy()\n","  ai_hvy = data['Action'][(data['MarketType']==mk)&(data['agent']=='hvy')].to_numpy()\n","  ai_wdy = data['Action'][(data['MarketType']==mk)&(data['agent']=='wdy')].to_numpy()\n","  ai_other = data['Action'][(data['MarketType']==mk)&(data['agent']!='mcd')].to_numpy()\n","\n","  disc_pop = data['Pop'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  disc_val = data['Val'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  disc_inc = data['Inc'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","\n","  disc_pop_mx = data['Pop'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","  disc_val_mx = data['Val'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","  disc_inc_mx = data['Inc'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","\n","\n","  #% F_dz: Make simple & intuitive (4x4) versions for exposition purposes\n","  fz1_4x4 = np.zeros([4,4])#;\n","  fz2_4x4 = np.zeros([4,4])#;\n","  fz3_4x4 = np.zeros([4,4])#;\n","  for x0 in range(4):\n","      for x1 in range(4):\n","          numer1 =  np.sum((disc_pop_mx[:,1:] == x1) * (disc_pop_mx[:,0:-1] == x0))#;\n","          denom1 =  np.sum((disc_pop_mx[:,0:-1] == x0))#;\n","          numer2 =  np.sum((disc_val_mx[:,1:] == x1) * (disc_val_mx[:,0:-1] == x0))#;\n","          denom2 =  np.sum((disc_val_mx[:,0:-1] == x0))#;\n","          numer3 =  np.sum((disc_inc_mx[:,1:] == x1) * (disc_inc_mx[:,0:-1] == x0))#;\n","          denom3 =  np.sum((disc_inc_mx[:,0:-1] == x0))#;\n","          fz1_4x4[x0,x1] = numer1 / denom1#;\n","          fz2_4x4[x0,x1] = numer2 / denom2#;\n","          fz3_4x4[x0,x1] = numer3 / denom3#;\n","  if dimention_dim[dim]=='Small':\n","    num = 50\n","  else:\n","    num = 15\n","  #Nsub = 1/num#int(300/num)\n","  MTsub = int(len(ai_mcd)/TimeLength)\n","  N_Full = 250 #int(Nsub*num)\n","  N=int(N_Full*MTsub)\n","\n","  Pi_new = policy_res[ economy_ind[gdp_true]+str(mk)+'_D'+dimention_dim[dim]]\n","\n","  pi1 = Pi_new[0]#Action,belief,state\n","  pi2 = Pi_new[1]\n","  trans,obser = Dynamic(theta23)\n","  #_,_,pi1,pi2 = ValuePartial(theta1,theta2 = theta2,num=num)\n","\n","  hstate = np.zeros([T,N],dtype= int)    #hidden state (s^h)\n","  ostate1 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n1)\n","  ostate2 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate3 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate4 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate5 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","\n","  zstate = np.zeros([T,N],dtype = int)   #observation state z\n","  if dimention_dim[dim] =='Large':\n","    s1state = np.zeros([T,N],dtype = int)   #population state z\n","    s2state = np.zeros([T,N],dtype = int)   #property value state z\n","    s3state = np.zeros([T,N],dtype = int)   #income state z\n","  else:\n","    if not gdp_true:\n","      s3state = np.zeros([T,N],dtype = int)   #income state z\n"," \n","\n","  belief = np.zeros([T,N])                #belief x\n","  action1 = np.zeros([T,N],dtype = int)   #agent1's action\n","  action2 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action3 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action4 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action5 = np.zeros([T,N],dtype = int)   #agent2's action\n","\n","  sigma = np.zeros([T-1,N])\n","\n","  belief[0,:] = np.kron(x_data,np.ones(N_Full))#+1#np.random.uniform(size=N)\n","  hstate[0,:] = np.int_(belief[0,:]<=np.random.random(size=N))#1#np.random.randint(0,dim_sh,size=N) # random generate market type\n","  #zstate_mat = np.random.random(size=N)\n","  zstate[0,:] = np.int_(np.kron(z_data[0],np.ones(N_Full,dtype = int)))#np.int_(obser[hstate[0],0]<=zstate_mat) # random generate income\n","  if dimention_dim[dim] =='Large':\n","    s1state[0,:] = np.int_(np.kron(disc_pop.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","    s2state[0,:] = np.int_(np.kron(disc_val.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    s3state[0,:] = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)\n","  else:\n","    if not gdp_true:\n","      s3state[0,:] = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)\n","\n","\n","  ostate1[0,:] = np.int_(np.kron(Ni_mcd.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","  ostate2[0,:] = np.int_(np.kron(Ni_aw.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate3[0,:] = np.int_(np.kron(Ni_bk.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate4[0,:] = np.int_(np.kron(Ni_hvy.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate5[0,:] = np.int_(np.kron(Ni_wdy.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","\n","  action1[0,:] = np.int_(np.kron(ai_mcd.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  action2[0,:] = np.int_(np.kron(ai_aw.reshape([-1,TimeLength]).T[0],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","  action3[0,:] = np.int_(np.kron(ai_bk.reshape([-1,TimeLength]).T[0],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  action4[0,:] = np.int_(np.kron(ai_hvy.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","  action5[0,:] = np.int_(np.kron(ai_wdy.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  for t in tqdm(range(T-1)):\n","    # generate new hidden state and observation state\n","    state_mat1 = np.random.random(size=N)\n","    hstate[t+1,:] = np.int_(trans[hstate[t,:],0]<=state_mat1)\n","\n","    # zstate_mat = np.random.random(size=N)\n","    # zstate[t+1,:] = np.int_(obser[hstate[t+1],0]<=zstate_mat) # random generate income\n","    zstate[t+1,:] = np.int_(np.kron(z_data[t+1],np.ones(N_Full,dtype = int)))\n","    if dimention_dim[dim] =='Large':\n","      s1statet = np.int_(np.kron(disc_pop.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      s2statet = np.int_(np.kron(disc_val.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      s3statet = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      # s1statet1 = np.int_(np.kron(disc_pop.reshape([-1,TimeLength]).T[t+1], np.ones(N_Full)))\n","      # s2statet1 = np.int_(np.kron(disc_val.reshape([-1,TimeLength]).T[t+1], np.ones(N_Full)))\n","      # s3statet1 = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t+1], np.ones(N_Full)))\n","      s1state_mat = np.random.random(size=N)\n","      ps11 = fz1_4x4[s1statet,0]\n","      ps12 = fz1_4x4[s1statet,1]\n","      ps13 = fz1_4x4[s1statet,2]\n","      s1state[t+1,:] = np.int_(ps11<=s1state_mat) + np.int_(ps11 + ps12 <= s1state_mat) + np.int_(ps11 + ps12 + ps13 <= s1state_mat)\n","      s2state_mat = np.random.random(size=N)\n","      ps21 = fz2_4x4[s2statet,0]\n","      ps22 = fz2_4x4[s2statet,1]\n","      ps23 = fz2_4x4[s2statet,2]\n","      s2state[t+1,:] = np.int_(ps21<=s2state_mat) + np.int_(ps21 + ps22 <= s2state_mat) + np.int_(ps21 + ps22 + ps23 <= s2state_mat)\n","      s3state_mat = np.random.random(size=N)\n","      ps31 = fz3_4x4[s3statet,0]\n","      ps32 = fz3_4x4[s3statet,1]\n","      ps33 = fz3_4x4[s3statet,2]\n","      s3state[t+1,:] = np.int_(ps31<=s3state_mat) + np.int_(ps31 + ps32 <= s3state_mat) + np.int_(ps31 + ps32 + ps33 <= s3state_mat)\n","    else:\n","      if not gdp_true:\n","        s3statet = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","        # s3statet1 = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t+1], np.ones(N_Full)))\n","        s3state_mat = np.random.random(size=N)\n","        ps31 = fz3_4x4[s3statet,0]\n","        ps32 = fz3_4x4[s3statet,1]\n","        ps33 = fz3_4x4[s3statet,2]\n","        s3state[t+1,:] = np.int_(ps31<=s3state_mat) + np.int_(ps31 + ps32 <= s3state_mat) + np.int_(ps31 + ps32 + ps33 <= s3state_mat)        \n","    ostate1t = np.int_(np.kron(Ni_mcd.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","    ostate2t = np.int_(np.kron(Ni_aw.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate3t = np.int_(np.kron(Ni_bk.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate4t = np.int_(np.kron(Ni_hvy.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate5t = np.int_(np.kron(Ni_wdy.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    # action1t = action1[t]#np.int_(np.kron(ai_mcd.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","    # action2t = action2[t]#np.int_(np.kron(ai_aw.reshape([-1,TimeLength]).T[t],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","    # action3t = action3[t]#np.int_(np.kron(ai_bk.reshape([-1,TimeLength]).T[t],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","    # action4t = action4[t]#np.int_(np.kron(ai_hvy.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","    # action5t = action5[t]#np.int_(np.kron(ai_wdy.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","\n","    ostate1[t+1,:] = np.int_(np.where(dy_aiso[action1[t],ostate1t,:]==1)[1])#n1\n","    ostate2[t+1,:] = np.int_(np.where(dy_aiso[action2[t],ostate2t,:]==1)[1])#n2\n","    ostate3[t+1,:] = np.int_(np.where(dy_aiso[action3[t],ostate3t,:]==1)[1])#n2\n","    ostate4[t+1,:] = np.int_(np.where(dy_aiso[action4[t],ostate4t,:]==1)[1])#n2\n","    ostate5[t+1,:] = np.int_(np.where(dy_aiso[action5[t],ostate5t,:]==1)[1])#n2\n","\n","    # update new belief\n","    sigma[t,:],belief[t+1,:],_ = SigmaLambda(theta23,num,z_old=zstate[t+1],x_old =belief[t],T=1)\n","    \n","    # iterpolate belief\n","    belief_f = np.floor(belief[t+1,:] *(num-1))/(num-1)\n","    belief_c = np.ceil(belief[t+1,:] *(num-1))/(num-1)\n","    iterpolate = np.zeros(belief_f.shape)\n","    iter_n0 = np.where((belief_f-belief_c)!=0)\n","    iterpolate[iter_n0] = (belief[t+1,:] -belief_c)[iter_n0]/(belief_f-belief_c)[iter_n0]\n","    belief_fint,belief_cint = np.int_(belief_f*(num-1)),np.int_(belief_c*(num-1))\n","\n","    # generate new action for both agents\n","    osj_mcd = ostate2[t+1,:] + ostate3[t+1,:]  + ostate4[t+1,:] + ostate5[t+1,:]\n","    osj_aw = ostate1[t+1,:] + ostate3[t+1,:] + ostate4[t+1,:]  + ostate5[t+1,:]\n","    osj_bk = ostate1[t+1,:] + ostate2[t+1,:] + ostate4[t+1,:] + ostate5[t+1,:]\n","    osj_hvy = ostate1[t+1,:] + ostate2[t+1,:] + ostate3[t+1,:]  + ostate5[t+1,:]\n","    osj_wdy = ostate1[t+1,:] + ostate2[t+1,:] + ostate3[t+1,:]  + ostate4[t+1,:]\n","    osj_mcd = (osj_mcd <= 3)*osj_mcd + (osj_mcd > 3)*3\n","    osj_aw = (osj_aw <= 3)*osj_aw + (osj_aw > 3)*3     \n","    osj_bk = (osj_bk <= 3)*osj_bk + (osj_bk > 3)*3\n","    osj_hvy = (osj_hvy <= 3)*osj_hvy + (osj_hvy > 3)*3\n","    osj_wdy = (osj_wdy <= 3)*osj_wdy + (osj_wdy > 3)*3\n","    if dimention_dim[dim] =='Large':\n","      os1 = np.int_(ostate1[t+1,:]*4**4 +osj_mcd*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os2 = np.int_(ostate2[t+1,:]*4**4 + osj_aw*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os3 = np.int_(ostate3[t+1,:]*4**4 +osj_bk*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os4 = np.int_(ostate4[t+1,:]*4**4 + osj_hvy*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os5 = np.int_(ostate5[t+1,:]*4**4 +osj_wdy*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","    else:\n","      if gdp_true:\n","        os1 = np.int_(ostate1[t+1,:]*4 +osj_mcd)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os2 = np.int_(ostate2[t+1,:]*4 + osj_aw)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os3 = np.int_(ostate3[t+1,:]*4 +osj_bk)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os4 = np.int_(ostate4[t+1,:]*4 + osj_hvy)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os5 = np.int_(ostate5[t+1,:]*4 +osj_wdy)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )        \n","      else:\n","        os1 = np.int_(ostate1[t+1,:]*4**2 +osj_mcd*4+ s3statet[t+1])\n","        os2 = np.int_(ostate2[t+1,:]*4**2 + osj_aw*4+ s3statet[t+1] )\n","        os3 = np.int_(ostate3[t+1,:]*4**2 +osj_bk*4 + s3statet[t+1] )\n","        os4 = np.int_(ostate4[t+1,:]*4**2 + osj_hvy*4 + s3statet[t+1] )\n","        os5 = np.int_(ostate5[t+1,:]*4**2 +osj_wdy*4+ s3statet[t+1] )         \n","    action_mat1 = np.random.random(size=N)\n","    #print(np.unique(belief_fint))\n","    p11 = iterpolate*pi1[0,belief_fint,os1] + (1-iterpolate)*pi1[0,belief_cint,os1]\n","    p12 = iterpolate*pi1[1,belief_fint,os1] + (1-iterpolate)*pi1[1,belief_cint,os1]\n","    action1[t+1,:] = np.int_(p11<=action_mat1) + np.int_(p12 + p11 <= action_mat1)\n","    \n","    action_mat2 = np.random.random(size=N)\n","    p21 = iterpolate*pi2[0,belief_fint,os2] + (1-iterpolate)*pi2[0,belief_cint,os2]\n","    p22 = iterpolate*pi2[1,belief_fint,os2] + (1-iterpolate)*pi2[1,belief_cint,os2]\n","    action2[t+1,:] = np.int_(p21<=action_mat2) + np.int_(p22 + p21 <= action_mat2)\n","\n","    action_mat3 = np.random.random(size=N)\n","    p31 = iterpolate*pi2[0,belief_fint,os3] + (1-iterpolate)*pi2[0,belief_cint,os3]\n","    p32 = iterpolate*pi2[1,belief_fint,os3] + (1-iterpolate)*pi2[1,belief_cint,os3]\n","    action3[t+1,:] = np.int_(p31<=action_mat3) + np.int_(p32 + p31 <= action_mat3)\n","\n","    action_mat4 = np.random.random(size=N)\n","    p41 = iterpolate*pi2[0,belief_fint,os4] + (1-iterpolate)*pi2[0,belief_cint,os4]\n","    p42 = iterpolate*pi2[1,belief_fint,os4] + (1-iterpolate)*pi2[1,belief_cint,os4]\n","    action4[t+1,:] = np.int_(p41<=action_mat4) + np.int_(p42 + p41 <= action_mat4)\n","\n","    action_mat5 = np.random.random(size=N)\n","    p51 = iterpolate*pi2[0,belief_fint,os5] + (1-iterpolate)*pi2[0,belief_cint,os5]\n","    p52 = iterpolate*pi2[1,belief_fint,os5] + (1-iterpolate)*pi2[1,belief_cint,os5]\n","    action5[t+1,:] = np.int_(p51<=action_mat5) + np.int_(p52 + p51 <= action_mat5)\n","\n","  if dimention_dim[dim] =='Large':\n","    return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'s1state':s1state,'s2state':s2state,'s3state':s3state,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}\n","  else:\n","    if gdp_true:\n","      return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}  \n","    else:\n","      return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'s3state':s3state,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}\n","\n","import matplotlib.pyplot as plt\n","year = np.arange(TimeLength,dtype=int)/4+1970\n","from sklearn.metrics import mean_squared_error\n","\n","color_list = {'Ni_aw':'b','Ni_bk':'g','Ni_hvy':'orange','Ni_mcd':'r','Ni_wdy':'c'}\n","name_list = {'Ni_aw':'A&W','Ni_bk':'Burger King','Ni_hvy':'Harvey\\'s','Ni_mcd':'McDonald\\'s','Ni_wdy':'Wendy\\'s'}\n","\n","                               \n","for mk in range(3,4):#(1,4):#\n","  for gdp_true in range(0,1):#(0,2):#\n","    #print(gdp_true)\n","    for dim in range(0,1):#(0,2):#\n","      print('########################################################################')\n","      print(economy_ind[gdp_true], ', Market:', mk, ', Dimemtion:'+dimention_dim[dim])\n","      print('########################################################################')\n","\n","      #pi_new = policy_res[ economy_ind[gdp_true]+str(mk)+'_D'+dimention_dim[dim]]\n","      res_data = DataGeneration(gdp_true,mk,dim)\n","\n","      ostate2 = res_data['ostate2']\n","      ostate3 = res_data['ostate3']\n","      ostate4 = res_data['ostate4']\n","      ostate5 = res_data['ostate5']\n","      ostate1 = res_data['ostate1']\n","      Ni_aw = res_data['Ni_aw']\n","      Ni_bk = res_data['Ni_bk']\n","      Ni_hvy = res_data['Ni_hvy']\n","      Ni_wdy = res_data['Ni_wdy']\n","      Ni_mcd = res_data['Ni_mcd']\n","\n","\n","      NFull = res_data['NFull']\n","      MTsub = res_data['MTsub']\n","\n","      data_true = pd.DataFrame(data = [])\n","      data_true['Ni_aw'] = Ni_aw # Sample,Time\n","      data_true['Ni_bk'] = Ni_bk\n","      data_true['Ni_hvy'] = Ni_hvy\n","      data_true['Ni_wdy'] = Ni_wdy\n","      data_true['Ni_mcd'] = Ni_mcd\n","\n","      data_true['Time'] = np.kron(np.ones(MTsub),np.arange(TimeLength))/4+1970\n","      data_est = pd.DataFrame(data = [])\n","      data_est['Ni_aw'] = ostate2.T.reshape(-1)\n","      data_est['Ni_bk'] = ostate3.T.reshape(-1)\n","      data_est['Ni_hvy'] = ostate4.T.reshape(-1)\n","      data_est['Ni_wdy'] = ostate5.T.reshape(-1)\n","      data_est['Ni_mcd'] = ostate1.T.reshape(-1)\n","\n","      data_est['Time'] = np.kron(np.ones(NFull*MTsub),np.arange(TimeLength))/4+1970\n","      mean_true = data_true.groupby(['Time']).describe()\n","      mean_true = mean_true#[mean_true.index%1==0.75]#[mean_true.index%1==0.75]\n","      mean_est = data_est.groupby(['Time']).describe()\n","      mean_est = mean_est#[mean_est.index%1==0.75]#[mean_est.index%1==0.75]\n","      xx = mean_est.index.to_numpy()\n","\n","      haha = []\n","      for i in (mean_true.columns):\n","        if i[1]=='mean':\n","            yy1 = mean_true[i].to_numpy()\n","            yy2 = mean_est[i].to_numpy()\n","            yy1_std = mean_true[(i[0],'std')].to_numpy()\n","            yy2_std = mean_est[(i[0],'std')].to_numpy()\n","            haha.append([i[0],yy1[3],yy1_std[3],yy2[3],yy2_std[3],yy1[-1],yy1_std[-1],yy2[-1],yy2_std[-1]])\n","            plt.plot(xx,yy1,':',label='True Value, '+name_list[i[0]],color= color_list[i[0]])\n","            plt.plot(xx,yy2,'--',label='Estimation, '+name_list[i[0]],color= color_list[i[0]])\n","\n","      plt.legend(fontsize=8,ncol=2)\n","      plt.title(title_mk[mk]+'-type Markek')\n","      plt.ylim(0,1.9)\n","      plt.ylabel('Number of Stores')\n","      plt.xlabel('Year')\n","      save_pic = '/content/drive/MyDrive/2022_Fall/Research_Burger/Final_Burger_Quarter/Picture/'\n","      plt.savefig( save_pic+'GoodOfFitOnePeriod_Mk'+title_mk[mk]+''+economy_ind[gdp_true]+'_Dim16.png',dpi=300)\n","      plt.show()\n","            \n","\n","      print(economy_ind[gdp_true], ', Market:', mk, ', Dimemtion:'+dimention_dim[dim])\n","      print('Term &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\\\\')\n","      print('\\\\hline')#print('-----------------------------------------------------------------------------------------------------------')\n","      for j in range(len(haha)):\n","        if 'Ni' in haha[j][0]:\n","          print(name_list[haha[j][0]],\n","              '&1970 Q3&  {:.4f} ({:.4f}) &   {:.4f} ({:.4f})    &2004 Q3&  {:.4f} ({:.4f}) &   {:.4f} ({:.4f})\\\\\\\\'.format(haha[j][1],\n","                                                                                                                   haha[j][2],\n","                                                                                                                   haha[j][3],\n","                                                                                                                   haha[j][4],\n","                                                                                                                   haha[j][5],\n","                                                                                                                   haha[j][6],\n","                                                                                                                   haha[j][7],\n","                                                                                                                   haha[j][8]))\n","      # N1_true_full = np.stack([Ni_mcd for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N1_est_full = ostate1.T\n","      # N2_true_full = np.stack([Ni_aw for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N2_est_full = ostate2.T\n","      # N3_true_full = np.stack([Ni_bk for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N3_est_full = ostate3.T\n","      # N4_true_full = np.stack([Ni_hvy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N4_est_full = ostate4.T\n","      # N5_true_full = np.stack([Ni_wdy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N5_est_full =ostate5.T\n","\n","\n","      # for t in range(TimeLength):\n","      #   #if t%4 ==3:\n","      #     print(t/4+1970,np.corrcoef(N1_true_full[:,t],N1_est_full[:,t])[0,1],\n","      #           np.corrcoef(N2_true_full[:,t],N2_est_full[:,t])[0,1],\n","      #           np.corrcoef(N3_true_full[:,t],N3_est_full[:,t])[0,1],\n","      #           np.corrcoef(N4_true_full[:,t],N4_est_full[:,t])[0,1],\n","      #           np.corrcoef(N5_true_full[:,t],N5_est_full[:,t])[0,1])"],"metadata":{"id":"tnzq_5lwC_YD","executionInfo":{"status":"ok","timestamp":1670608002762,"user_tz":360,"elapsed":21152,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"colab":{"base_uri":"https://localhost:8080/","height":558},"outputId":"758577ba-33b6-4f48-9325-21ccc51834cb"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["########################################################################\n","INF , Market: 3 , Dimemtion:Small\n","########################################################################\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-9c721082b3f9>:9: DeprecationWarning: setting an array element with a sequence. This was supported in some cases where the elements are arrays with a single element. For example `np.array([1, np.array([2])], dtype=int)`. In the future this will raise the same ValueError as `np.array([1, [2]], dtype=int)`.\n","  obser[:,0] = [obser_val,1-obser_val]\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 139/139 [00:09<00:00, 14.49it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["INF , Market: 3 , Dimemtion:Small\n","Term &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\n","\\hline\n","A&W &1970 Q3&  0.1579 (0.3862) &   0.1617 (0.3895)    &2004 Q3&  0.6015 (0.7171) &   0.6003 (0.7093)\\\\\n","Burger King &1970 Q3&  0.0226 (0.1490) &   0.0270 (0.1624)    &2004 Q3&  0.3684 (0.5291) &   0.3705 (0.5259)\\\\\n","Harvey's &1970 Q3&  0.1353 (0.3434) &   0.1390 (0.3475)    &2004 Q3&  0.3835 (0.5995) &   0.3865 (0.6001)\\\\\n","Wendy's &1970 Q3&  0.0000 (0.0000) &   0.0045 (0.0666)    &2004 Q3&  0.3684 (0.4996) &   0.3693 (0.5020)\\\\\n","McDonald's &1970 Q3&  0.0376 (0.1909) &   0.0522 (0.2236)    &2004 Q3&  1.5113 (0.8222) &   1.5179 (0.8149)\\\\\n"]}]},{"cell_type":"markdown","source":["# Comparison"],"metadata":{"id":"R_3VPmfm961U"}},{"cell_type":"code","source":["from tqdm import tqdm\n","\n","def DataGeneration(gdp_true,mk,dim,T=TimeLength,data = data,obser = 2): # (N=5*60*133)\n","  if gdp_true:\n","    z_data = data['GDP'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength]).T\n","    x_data = (1/obser)*np.ones(z_data.shape[1])*0 +1\n","    theta23 = np.array([0.8499    , 0.0251    , 0.93451554])\n","  else:\n","    z_data = data['INF'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength]).T\n","    x_data = (1/obser)*np.ones(z_data.shape[1])*0 \n","    theta23 = np.array([0.8501   , 0.0251   , 0.8380984])\n","\n","  Ni_mcd = data['Own'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  Ni_aw = data['Own'][(data['MarketType']==mk)&(data['agent']=='aw')].to_numpy()\n","  Ni_bk = data['Own'][(data['MarketType']==mk)&(data['agent']=='bk')].to_numpy()\n","  Ni_hvy = data['Own'][(data['MarketType']==mk)&(data['agent']=='hvy')].to_numpy()\n","  Ni_wdy = data['Own'][(data['MarketType']==mk)&(data['agent']=='wdy')].to_numpy()\n","\n","  ai_mcd = data['Action'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  ai_aw = data['Action'][(data['MarketType']==mk)&(data['agent']=='aw')].to_numpy()\n","  ai_bk = data['Action'][(data['MarketType']==mk)&(data['agent']=='bk')].to_numpy()\n","  ai_hvy = data['Action'][(data['MarketType']==mk)&(data['agent']=='hvy')].to_numpy()\n","  ai_wdy = data['Action'][(data['MarketType']==mk)&(data['agent']=='wdy')].to_numpy()\n","  ai_other = data['Action'][(data['MarketType']==mk)&(data['agent']!='mcd')].to_numpy()\n","\n","  disc_pop = data['Pop'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  disc_val = data['Val'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","  disc_inc = data['Inc'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy()\n","\n","  disc_pop_mx = data['Pop'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","  disc_val_mx = data['Val'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","  disc_inc_mx = data['Inc'][(data['MarketType']==mk)&(data['agent']=='mcd')].to_numpy().reshape([-1,TimeLength])\n","\n","\n","  #% F_dz: Make simple & intuitive (4x4) versions for exposition purposes\n","  fz1_4x4 = np.zeros([4,4])#;\n","  fz2_4x4 = np.zeros([4,4])#;\n","  fz3_4x4 = np.zeros([4,4])#;\n","  for x0 in range(4):\n","      for x1 in range(4):\n","          numer1 =  np.sum((disc_pop_mx[:,1:] == x1) * (disc_pop_mx[:,0:-1] == x0))#;\n","          denom1 =  np.sum((disc_pop_mx[:,0:-1] == x0))#;\n","          numer2 =  np.sum((disc_val_mx[:,1:] == x1) * (disc_val_mx[:,0:-1] == x0))#;\n","          denom2 =  np.sum((disc_val_mx[:,0:-1] == x0))#;\n","          numer3 =  np.sum((disc_inc_mx[:,1:] == x1) * (disc_inc_mx[:,0:-1] == x0))#;\n","          denom3 =  np.sum((disc_inc_mx[:,0:-1] == x0))#;\n","          fz1_4x4[x0,x1] = numer1 / denom1#;\n","          fz2_4x4[x0,x1] = numer2 / denom2#;\n","          fz3_4x4[x0,x1] = numer3 / denom3#;\n","  if dimention_dim[dim]=='Small':\n","    num = 50\n","  else:\n","    num = 15\n","  #Nsub = 1/num#int(300/num)\n","  MTsub = int(len(ai_mcd)/TimeLength)\n","  N_Full = 250 #int(Nsub*num)\n","  N=int(N_Full*MTsub)\n","\n","  Pi_new = policy_res[ economy_ind[gdp_true]+str(mk)+'_D'+dimention_dim[dim]]\n","\n","  pi1 = Pi_new[0]#Action,belief,state\n","  pi2 = Pi_new[1]\n","  trans,obser = Dynamic(theta23)\n","  #_,_,pi1,pi2 = ValuePartial(theta1,theta2 = theta2,num=num)\n","\n","  hstate = np.zeros([T,N],dtype= int)    #hidden state (s^h)\n","  ostate1 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n1)\n","  ostate2 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate3 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate4 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","  ostate5 = np.zeros([T,N],dtype = int)  #observalbe state s^o =(n2)\n","\n","  zstate = np.zeros([T,N],dtype = int)   #observation state z\n","  if dimention_dim[dim] =='Large':\n","    s1state = np.zeros([T,N],dtype = int)   #population state z\n","    s2state = np.zeros([T,N],dtype = int)   #property value state z\n","    s3state = np.zeros([T,N],dtype = int)   #income state z\n","  else:\n","    if not gdp_true:\n","      s3state = np.zeros([T,N],dtype = int)   #income state z\n"," \n","\n","  belief = np.zeros([T,N])                #belief x\n","  action1 = np.zeros([T,N],dtype = int)   #agent1's action\n","  action2 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action3 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action4 = np.zeros([T,N],dtype = int)   #agent2's action\n","  action5 = np.zeros([T,N],dtype = int)   #agent2's action\n","\n","  sigma = np.zeros([T-1,N])\n","\n","  belief[0,:] = np.kron(x_data,np.ones(N_Full))#+1#np.random.uniform(size=N)\n","  hstate[0,:] = np.int_(belief[0,:]<=np.random.random(size=N))#1#np.random.randint(0,dim_sh,size=N) # random generate market type\n","  #zstate_mat = np.random.random(size=N)\n","  zstate[0,:] = np.int_(np.kron(z_data[0],np.ones(N_Full,dtype = int)))#np.int_(obser[hstate[0],0]<=zstate_mat) # random generate income\n","  if dimention_dim[dim] =='Large':\n","    s1state[0,:] = np.int_(np.kron(disc_pop.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","    s2state[0,:] = np.int_(np.kron(disc_val.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    s3state[0,:] = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)\n","  else:\n","    if not gdp_true:\n","      s3state[0,:] = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)\n","\n","\n","  ostate1[0,:] = np.int_(np.kron(Ni_mcd.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","  ostate2[0,:] = np.int_(np.kron(Ni_aw.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate3[0,:] = np.int_(np.kron(Ni_bk.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate4[0,:] = np.int_(np.kron(Ni_hvy.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","  ostate5[0,:] = np.int_(np.kron(Ni_wdy.reshape([-1,TimeLength]).T[0], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","\n","  action1[0,:] = np.int_(np.kron(ai_mcd.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  action2[0,:] = np.int_(np.kron(ai_aw.reshape([-1,TimeLength]).T[0],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","  action3[0,:] = np.int_(np.kron(ai_bk.reshape([-1,TimeLength]).T[0],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  action4[0,:] = np.int_(np.kron(ai_hvy.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","  action5[0,:] = np.int_(np.kron(ai_wdy.reshape([-1,TimeLength]).T[0],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","  for t in tqdm(range(T-1)):\n","    # generate new hidden state and observation state\n","    state_mat1 = np.random.random(size=N)\n","    hstate[t+1,:] = np.int_(trans[hstate[t,:],0]<=state_mat1)\n","\n","    zstate_mat = np.random.random(size=N)\n","    zstate[t+1,:] = np.int_(obser[hstate[t+1],0]<=zstate_mat) # random generate income\n","    #zstate[t+1,:] = np.int_(np.kron(z_data[t+1],np.ones(N_Full,dtype = int)))\n","    if dimention_dim[dim] =='Large':\n","      s1statet = s1state[t]#np.int_(np.kron(disc_pop.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      s2statet = s2state[t]#np.int_(np.kron(disc_val.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      s3statet = s3state[t]#np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","      s1state_mat = np.random.random(size=N)\n","      ps11 = fz1_4x4[s1statet,0]\n","      ps12 = fz1_4x4[s1statet,1]\n","      ps13 = fz1_4x4[s1statet,2]\n","      s1state[t+1,:] = np.int_(ps11<=s1state_mat) + np.int_(ps11 + ps12 <= s1state_mat) + np.int_(ps11 + ps12 + ps13 <= s1state_mat)\n","      s2state_mat = np.random.random(size=N)\n","      ps21 = fz2_4x4[s2statet,0]\n","      ps22 = fz2_4x4[s2statet,1]\n","      ps23 = fz2_4x4[s2statet,2]\n","      s2state[t+1,:] = np.int_(ps21<=s2state_mat) + np.int_(ps21 + ps22 <= s2state_mat) + np.int_(ps21 + ps22 + ps23 <= s2state_mat)\n","      s3state_mat = np.random.random(size=N)\n","      ps31 = fz3_4x4[s3statet,0]\n","      ps32 = fz3_4x4[s3statet,1]\n","      ps33 = fz3_4x4[s3statet,2]\n","      s3state[t+1,:] = np.int_(ps31<=s3state_mat) + np.int_(ps31 + ps32 <= s3state_mat) + np.int_(ps31 + ps32 + ps33 <= s3state_mat)\n","    else:\n","      if not gdp_true:\n","        s3statet = s3state[t]#np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))\n","        # s3statet1 = np.int_(np.kron(disc_inc.reshape([-1,TimeLength]).T[t+1], np.ones(N_Full)))\n","        s3state_mat = np.random.random(size=N)\n","        ps31 = fz3_4x4[s3statet,0]\n","        ps32 = fz3_4x4[s3statet,1]\n","        ps33 = fz3_4x4[s3statet,2]\n","        s3state[t+1,:] = np.int_(ps31<=s3state_mat) + np.int_(ps31 + ps32 <= s3state_mat) + np.int_(ps31 + ps32 + ps33 <= s3state_mat)        \n","    ostate1t = ostate1[t]#np.int_(np.kron(Ni_mcd.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)                              \n","    ostate2t = ostate2[t]#np.int_(np.kron(Ni_aw.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate3t = ostate3[t]#np.int_(np.kron(Ni_bk.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate4t = ostate4[t]#np.int_(np.kron(Ni_hvy.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    ostate5t = ostate5[t] #np.int_(np.kron(Ni_wdy.reshape([-1,TimeLength]).T[t], np.ones(N_Full)))#0#np.random.randint(0,dim_so,size=N)  \n","    # action1t = action1[t]#np.int_(np.kron(ai_mcd.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","    # action2t = action2[t]#np.int_(np.kron(ai_aw.reshape([-1,TimeLength]).T[t],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","    # action3t = action3[t]#np.int_(np.kron(ai_bk.reshape([-1,TimeLength]).T[t],   np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","    # action4t = action4[t]#np.int_(np.kron(ai_hvy.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)  \n","    # action5t = action5[t]#np.int_(np.kron(ai_wdy.reshape([-1,TimeLength]).T[t],  np.ones(N_Full)))#np.ones(N,dtype = int)   #agent1's action open store (initial n1=0)\n","\n","    ostate1[t+1,:] = np.int_(np.where(dy_aiso[action1[t],ostate1t,:]==1)[1])#n1\n","    ostate2[t+1,:] = np.int_(np.where(dy_aiso[action2[t],ostate2t,:]==1)[1])#n2\n","    ostate3[t+1,:] = np.int_(np.where(dy_aiso[action3[t],ostate3t,:]==1)[1])#n2\n","    ostate4[t+1,:] = np.int_(np.where(dy_aiso[action4[t],ostate4t,:]==1)[1])#n2\n","    ostate5[t+1,:] = np.int_(np.where(dy_aiso[action5[t],ostate5t,:]==1)[1])#n2\n","\n","    # update new belief\n","    sigma[t,:],belief[t+1,:],_ = SigmaLambda(theta23,num,z_old=zstate[t+1],x_old =belief[t],T=1)\n","    \n","    # iterpolate belief\n","    belief_f = np.floor(belief[t+1,:] *(num-1))/(num-1)\n","    belief_c = np.ceil(belief[t+1,:] *(num-1))/(num-1)\n","    iterpolate = np.zeros(belief_f.shape)\n","    iter_n0 = np.where((belief_f-belief_c)!=0)\n","    iterpolate[iter_n0] = (belief[t+1,:] -belief_c)[iter_n0]/(belief_f-belief_c)[iter_n0]\n","    belief_fint,belief_cint = np.int_(belief_f*(num-1)),np.int_(belief_c*(num-1))\n","\n","    # generate new action for both agents\n","    osj_mcd = ostate2[t+1,:] + ostate3[t+1,:]  + ostate4[t+1,:] + ostate5[t+1,:]\n","    osj_aw = ostate1[t+1,:] + ostate3[t+1,:] + ostate4[t+1,:]  + ostate5[t+1,:]\n","    osj_bk = ostate1[t+1,:] + ostate2[t+1,:] + ostate4[t+1,:] + ostate5[t+1,:]\n","    osj_hvy = ostate1[t+1,:] + ostate2[t+1,:] + ostate3[t+1,:]  + ostate5[t+1,:]\n","    osj_wdy = ostate1[t+1,:] + ostate2[t+1,:] + ostate3[t+1,:]  + ostate4[t+1,:]\n","    osj_mcd = (osj_mcd <= 3)*osj_mcd + (osj_mcd > 3)*3\n","    osj_aw = (osj_aw <= 3)*osj_aw + (osj_aw > 3)*3     \n","    osj_bk = (osj_bk <= 3)*osj_bk + (osj_bk > 3)*3\n","    osj_hvy = (osj_hvy <= 3)*osj_hvy + (osj_hvy > 3)*3\n","    osj_wdy = (osj_wdy <= 3)*osj_wdy + (osj_wdy > 3)*3\n","    if dimention_dim[dim] =='Large':\n","      os1 = np.int_(ostate1[t+1,:]*4**4 +osj_mcd*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os2 = np.int_(ostate2[t+1,:]*4**4 + osj_aw*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os3 = np.int_(ostate3[t+1,:]*4**4 +osj_bk*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os4 = np.int_(ostate4[t+1,:]*4**4 + osj_hvy*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","      os5 = np.int_(ostate5[t+1,:]*4**4 +osj_wdy*4**3 + s1statet[t+1]*4**2+ s2statet[t+1]*4+ s3statet[t+1] )\n","    else:\n","      if gdp_true:\n","        os1 = np.int_(ostate1[t+1,:]*4 +osj_mcd)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os2 = np.int_(ostate2[t+1,:]*4 + osj_aw)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os3 = np.int_(ostate3[t+1,:]*4 +osj_bk)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os4 = np.int_(ostate4[t+1,:]*4 + osj_hvy)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )\n","        os5 = np.int_(ostate5[t+1,:]*4 +osj_wdy)#*4**3 + s1state[t+1,:]*4**2+ s2state[t+1,:]*4+ s3state[t+1,:] )        \n","      else:\n","        os1 = np.int_(ostate1[t+1,:]*4**2 +osj_mcd*4+ s3statet[t+1])\n","        os2 = np.int_(ostate2[t+1,:]*4**2 + osj_aw*4+ s3statet[t+1] )\n","        os3 = np.int_(ostate3[t+1,:]*4**2 +osj_bk*4 + s3statet[t+1] )\n","        os4 = np.int_(ostate4[t+1,:]*4**2 + osj_hvy*4 + s3statet[t+1] )\n","        os5 = np.int_(ostate5[t+1,:]*4**2 +osj_wdy*4+ s3statet[t+1] )         \n","    action_mat1 = np.random.random(size=N)\n","    #print(np.unique(belief_fint))\n","    p11 = iterpolate*pi1[0,belief_fint,os1] + (1-iterpolate)*pi1[0,belief_cint,os1]\n","    p12 = iterpolate*pi1[1,belief_fint,os1] + (1-iterpolate)*pi1[1,belief_cint,os1]\n","    action1[t+1,:] = np.int_(p11<=action_mat1) + np.int_(p12 + p11 <= action_mat1)\n","    \n","    action_mat2 = np.random.random(size=N)\n","    p21 = iterpolate*pi2[0,belief_fint,os2] + (1-iterpolate)*pi2[0,belief_cint,os2]\n","    p22 = iterpolate*pi2[1,belief_fint,os2] + (1-iterpolate)*pi2[1,belief_cint,os2]\n","    action2[t+1,:] = np.int_(p21<=action_mat2) + np.int_(p22 + p21 <= action_mat2)\n","\n","    action_mat3 = np.random.random(size=N)\n","    p31 = iterpolate*pi2[0,belief_fint,os3] + (1-iterpolate)*pi2[0,belief_cint,os3]\n","    p32 = iterpolate*pi2[1,belief_fint,os3] + (1-iterpolate)*pi2[1,belief_cint,os3]\n","    action3[t+1,:] = np.int_(p31<=action_mat3) + np.int_(p32 + p31 <= action_mat3)\n","\n","    action_mat4 = np.random.random(size=N)\n","    p41 = iterpolate*pi2[0,belief_fint,os4] + (1-iterpolate)*pi2[0,belief_cint,os4]\n","    p42 = iterpolate*pi2[1,belief_fint,os4] + (1-iterpolate)*pi2[1,belief_cint,os4]\n","    action4[t+1,:] = np.int_(p41<=action_mat4) + np.int_(p42 + p41 <= action_mat4)\n","\n","    action_mat5 = np.random.random(size=N)\n","    p51 = iterpolate*pi2[0,belief_fint,os5] + (1-iterpolate)*pi2[0,belief_cint,os5]\n","    p52 = iterpolate*pi2[1,belief_fint,os5] + (1-iterpolate)*pi2[1,belief_cint,os5]\n","    action5[t+1,:] = np.int_(p51<=action_mat5) + np.int_(p52 + p51 <= action_mat5)\n","\n","  if dimention_dim[dim] =='Large':\n","    return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'s1state':s1state,'s2state':s2state,'s3state':s3state,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}\n","  else:\n","    if gdp_true:\n","      return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}  \n","    else:\n","      return {'ostate1':ostate1,'ostate2':ostate2,'ostate3':ostate3,'ostate4':ostate4,'ostate5':ostate5, \n","            'action1':action1,'action2':action2,'action3':action3,'action4':action4,'action5':action5,\n","            'zstate':zstate,'s3state':s3state,'belief':belief,'sigma':sigma,'hstate':hstate,\n","            'Ni_mcd':Ni_mcd,'Ni_aw':Ni_aw,'Ni_bk':Ni_bk,'Ni_hvy':Ni_hvy,'Ni_wdy':Ni_wdy,\n","            'ai_mcd':ai_mcd,'ai_aw':ai_aw,'ai_bk':ai_bk,'ai_hvy':ai_hvy,'ai_wdy':ai_wdy,\n","            'z_data':z_data,'disc_pop':disc_pop,'disc_val':disc_val,'disc_inc':disc_inc,'x_data':x_data,\n","            'MTsub': MTsub,'NFull':N_Full}\n","\n","import matplotlib.pyplot as plt\n","year = np.arange(TimeLength,dtype=int)/4+1970\n","from sklearn.metrics import mean_squared_error\n","for mk in range(1,4):#(3,4):#\n","  for gdp_true in range(0,1):#(0,2):#\n","    #print(gdp_true)\n","    for dim in range(0,1):#(0,2):#\n","      print('########################################################################')\n","      print(economy_ind[gdp_true], ', Market:', mk, ', Dimemtion:'+dimention_dim[dim])\n","      print('########################################################################')\n","\n","      #pi_new = policy_res[ economy_ind[gdp_true]+str(mk)+'_D'+dimention_dim[dim]]\n","      res_data = DataGeneration(gdp_true,mk,dim)\n","\n","      ostate2 = res_data['ostate2']\n","      ostate3 = res_data['ostate3']\n","      ostate4 = res_data['ostate4']\n","      ostate5 = res_data['ostate5']\n","      ostate1 = res_data['ostate1']\n","      Ni_aw = res_data['Ni_aw']\n","      Ni_bk = res_data['Ni_bk']\n","      Ni_hvy = res_data['Ni_hvy']\n","      Ni_wdy = res_data['Ni_wdy']\n","      Ni_mcd = res_data['Ni_mcd']\n","\n","\n","      # action2 = res_data['action2']\n","      # action3 = res_data['action3']\n","      # action4 = res_data['action4']\n","      # action5 = res_data['action5']\n","      # action1 = res_data['action1']\n","      # ai_aw = res_data['ai_aw']\n","      # ai_bk = res_data['ai_bk']\n","      # ai_hvy = res_data['ai_hvy']\n","      # ai_wdy = res_data['ai_wdy']\n","      # ai_mcd = res_data['ai_mcd']\n","      NFull = res_data['NFull']\n","      MTsub = res_data['MTsub']\n","      # # mean_squared_error(a1_true.T,action1.T,multioutput='raw_values')\n","      # a1_true = ai_mcd.reshape([-1,TimeLength])\n","      # a1_est = np.mean(action1.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","      # a2_true = ai_aw.reshape([-1,TimeLength])\n","      # a2_est = np.mean(action2.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","      # a3_true = ai_bk.reshape([-1,TimeLength])\n","      # a3_est = np.mean(action3.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","      # a4_true = ai_hvy.reshape([-1,TimeLength])\n","      # a4_est = np.mean(action4.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","      # a5_true = ai_wdy.reshape([-1,TimeLength])\n","      # a5_est = np.mean(action5.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","\n","      # res = mean_squared_error(np.vstack([a1_true,a2_true,a3_true,a4_true,a5_true]),\n","      #                          np.vstack([a1_est,a2_est,a3_est,a4_est,a5_est]),multioutput='raw_values')\n","            # mean_squared_error(a1_true ,a1_est,multioutput='raw_values')+\\\n","            # mean_squared_error(a2_true,a2_est,multioutput='raw_values')+\\\n","            # mean_squared_error(a3_true,a3_est,multioutput='raw_values')+\\\n","            # mean_squared_error(a4_true,a4_est,multioutput='raw_values')+\\\n","            # mean_squared_error(a5_true,a5_est,multioutput='raw_values')\n","\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          res[np.where((year%1==0.75))],'-',label = 'Total')\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          mean_squared_error(a1_true,a1_est,multioutput='raw_values')[np.where((year%1==0.75))],'--',label = 'McDonald\\'s')\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          mean_squared_error(a2_true,a2_est,multioutput='raw_values')[np.where((year%1==0.75))],':',label = 'A&W')\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          mean_squared_error(a3_true,a3_est,multioutput='raw_values')[np.where((year%1==0.75))],'-.',label = 'Burger King')\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          mean_squared_error(a4_true,a4_est,multioutput='raw_values')[np.where((year%1==0.75))],'.',label = 'Harvey\\'s')\n","      # plt.plot(year[np.where((year%1==0.75))],\n","      #          mean_squared_error(a5_true,a5_est,multioutput='raw_values')[np.where((year%1==0.75))],'--',label = 'Wendy\\'s')      \n","      # plt.legend()\n","      # plt.ylabel('mean squared prediction error of action')\n","      # plt.xlabel('year')\n","      # plt.ylim(0,0.5)\n","      # plt.show()\n","      # plt_res,res\n","      #np.kron(np.arange(4),np.ones(3)).reshape([4,3])\n","      data_true = pd.DataFrame(data = [])\n","      data_true['Ni_aw'] = Ni_aw # Sample,Time\n","      data_true['Ni_bk'] = Ni_bk\n","      data_true['Ni_hvy'] = Ni_hvy\n","      data_true['Ni_wdy'] = Ni_wdy\n","      data_true['Ni_mcd'] = Ni_mcd\n","      # data_true['ai_aw'] = ai_aw # Sample,Time\n","      # data_true['ai_bk'] = ai_bk\n","      # data_true['ai_hvy'] = ai_hvy\n","      # data_true['ai_wdy'] = ai_wdy\n","      # data_true['ai_mcd'] = ai_mcd\n","      data_true['Time'] = np.kron(np.ones(MTsub),np.arange(TimeLength))/4+1970\n","      data_est = pd.DataFrame(data = [])\n","      data_est['Ni_aw'] = ostate2.T.reshape(-1)\n","      data_est['Ni_bk'] = ostate3.T.reshape(-1)\n","      data_est['Ni_hvy'] = ostate4.T.reshape(-1)\n","      data_est['Ni_wdy'] = ostate5.T.reshape(-1)\n","      data_est['Ni_mcd'] = ostate1.T.reshape(-1)\n","      # data_est['ai_aw'] = action2.T.reshape(-1) # Sample,Time\n","      # data_est['ai_bk'] = action3.T.reshape(-1)\n","      # data_est['ai_hvy'] = action4.T.reshape(-1)\n","      # data_est['ai_wdy'] = action5.T.reshape(-1)\n","      # data_est['ai_mcd'] = action1.T.reshape(-1)\n","      data_est['Time'] = np.kron(np.ones(NFull*MTsub),np.arange(TimeLength))/4+1970\n","      mean_true = data_true.groupby(['Time']).describe()\n","      mean_true = mean_true#[mean_true.index%1==0.75]#[mean_true.index%1==0.75]\n","      mean_est = data_est.groupby(['Time']).describe()\n","      mean_est = mean_est#[mean_est.index%1==0.75]#[mean_est.index%1==0.75]\n","      xx = mean_est.index.to_numpy()\n","\n","      haha = []\n","\n","      for i in (mean_true.columns):\n","        if i[1]=='mean':\n","            yy1 = mean_true[i].to_numpy()\n","            yy2 = mean_est[i].to_numpy()\n","            yy1_std = mean_true[(i[0],'std')].to_numpy()\n","            yy2_std = mean_est[(i[0],'std')].to_numpy()\n","            haha.append([i[0],yy1[3],yy1_std[3],yy2[3],yy2_std[3],yy1[-1],yy1_std[-1],yy2[-1],yy2_std[-1]])\n","            plt.plot(xx,yy1,':',label='True Value, '+name_list[i[0]],color= color_list[i[0]])\n","            plt.plot(xx,yy2,'--',label='Estimation, '+name_list[i[0]],color= color_list[i[0]])\n","\n","      plt.legend(fontsize=8,ncol=2)\n","      plt.title(title_mk[mk]+'-type Markek')\n","      plt.ylim(0,1.9)\n","      plt.ylabel('Number of Stores')\n","      plt.xlabel('Year')\n","      save_pic = '/content/drive/MyDrive/2022_Fall/Research_Burger/Final_Burger_Quarter/Picture/'\n","      plt.savefig( save_pic+'GoodOfFitMultiPeriod_Mk'+title_mk[mk]+''+economy_ind[gdp_true]+'_Dim16.png',dpi=300)\n","      plt.show()\n","\n","      print(economy_ind[gdp_true], ', Market:', mk, ', Dimemtion:'+dimention_dim[dim])\n","      print('Firm &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\\\\')\n","      print('\\\\hline')#print('-----------------------------------------------------------------------------------------------------------')\n","      for j in range(len(haha)):\n","        if 'Ni' in haha[j][0]:\n","          print(name_list[haha[j][0]],\n","              '&1970 Q3&  {:.4f} ({:.4f}) &   {:.4f} ({:.4f})    &2004 Q3&  {:.4f} ({:.4f}) &   {:.4f} ({:.4f})\\\\\\\\'.format(haha[j][1],\n","                                                                                                                   haha[j][2],\n","                                                                                                                   haha[j][3],\n","                                                                                                                   haha[j][4],\n","                                                                                                                   haha[j][5],\n","                                                                                                                   haha[j][6],\n","                                                                                                                   haha[j][7],\n","                                                                                                                   haha[j][8]))\n","      # N1_true_full = np.stack([Ni_mcd for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N1_est_full = ostate1.T\n","      # N2_true_full = np.stack([Ni_aw for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N2_est_full = ostate2.T\n","      # N3_true_full = np.stack([Ni_bk for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N3_est_full = ostate3.T\n","      # N4_true_full = np.stack([Ni_hvy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N4_est_full = ostate4.T\n","      # N5_true_full = np.stack([Ni_wdy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","      # N5_est_full =ostate5.T\n","\n","\n","      # for t in range(TimeLength):\n","      #   #if t%4 ==3:\n","      #     print(t/4+1970,np.corrcoef(N1_true_full[:,t],N1_est_full[:,t])[0,1],\n","      #           np.corrcoef(N2_true_full[:,t],N2_est_full[:,t])[0,1],\n","      #           np.corrcoef(N3_true_full[:,t],N3_est_full[:,t])[0,1],\n","      #           np.corrcoef(N4_true_full[:,t],N4_est_full[:,t])[0,1],\n","      #           np.corrcoef(N5_true_full[:,t],N5_est_full[:,t])[0,1])"],"metadata":{"id":"Z6qiBIwX0NMz","executionInfo":{"status":"ok","timestamp":1670539373027,"user_tz":360,"elapsed":33293,"user":{"displayName":"Lu Sun","userId":"12220989488268625125"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"919c0a72-5829-45b5-f631-4b2bd873c8c4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["########################################################################\n","INF , Market: 1 , Dimemtion:Small\n","########################################################################\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-9c721082b3f9>:9: DeprecationWarning: setting an array element with a sequence. This was supported in some cases where the elements are arrays with a single element. For example `np.array([1, np.array([2])], dtype=int)`. In the future this will raise the same ValueError as `np.array([1, [2]], dtype=int)`.\n","  obser[:,0] = [obser_val,1-obser_val]\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 139/139 [00:04<00:00, 31.57it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["INF , Market: 1 , Dimemtion:Small\n","Firm &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\n","\\hline\n","A&W &1970 Q3&  0.0827 (0.2765) &   0.0835 (0.2772)    &2004 Q3&  0.1203 (0.3265) &   0.0707 (0.2618)\\\\\n","Burger King &1970 Q3&  0.0376 (0.1909) &   0.0392 (0.1945)    &2004 Q3&  0.0451 (0.2083) &   0.0661 (0.2538)\\\\\n","Harvey's &1970 Q3&  0.0301 (0.1714) &   0.0324 (0.1774)    &2004 Q3&  0.1203 (0.3490) &   0.0635 (0.2490)\\\\\n","Wendy's &1970 Q3&  0.0000 (0.0000) &   0.0030 (0.0556)    &2004 Q3&  0.0301 (0.1714) &   0.0564 (0.2358)\\\\\n","McDonald's &1970 Q3&  0.0000 (0.0000) &   0.0147 (0.1204)    &2004 Q3&  0.4511 (0.4995) &   0.5922 (0.4914)\\\\\n","########################################################################\n","INF , Market: 2 , Dimemtion:Small\n","########################################################################\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-9c721082b3f9>:9: DeprecationWarning: setting an array element with a sequence. This was supported in some cases where the elements are arrays with a single element. For example `np.array([1, np.array([2])], dtype=int)`. In the future this will raise the same ValueError as `np.array([1, [2]], dtype=int)`.\n","  obser[:,0] = [obser_val,1-obser_val]\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 139/139 [00:04<00:00, 30.86it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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lWtmRVJSkk9ssH379rpjx46A11nYyU0Bx/yGifUZxmmSm8JsU6dO5d133+Xo0aP8+9//zrXrZsaRI0fo0KEDp06donXr1oViOGywKWzrgJ8p5iAMI5e54447uOOOO/KsvnLlyrF06dI8q884dwi21IZhGIaRTzEHYRiGYWSIOQjDMAwjQ8xBGAGjoAuzeSUZ/OU1AkkgxNbyG4VBwNF/6OiIESOoVatWhmXj4uKoWrUqrVq1IiIigrfffvus6vaS0e/bKxuS278hcxBGwCjowmyny9nq3pwrFHQBx/POO88nffH9999z8cUXZ1r2hhtuYMGCBSxcuJCff/45w3kN+RlzEEaeUdCE2TIio/qaNGnCwIEDefTRR4mIiPDdkG699Vb++usvVqxYQWRkJM2aNWP8+PHs2rWL22+/HYDExETfJLBhw4Zx6tQpOnToQGRkJLfddttp21cQKWgCjl26dGHatGns2rWLCy+80DcT/JdffvG1jEaOHJnqnKJFizJ06FBmzJgBwKuvvkqzZs2Ijo72/Y7q1atHjx49aNCgAevWrQPgtttuIyIigjZt2nDo0KFU15w1axahoaHcddddvhnmXsG+0aNH+8QD16xZc+ZfTmYTJAriZhPlcka6iXLzI1S3jnf7Sadc+veJLp1w1KXjJrv0yQMuve0Llz6+J0d1NmvWTPv06aOffvqpqqqOHz9eP/jgA1VVffbZZ3XRokU6c+ZMfeWVV1RVdfbs2b59L1988YW++OKLeuTIEW3evLmqqh49etS9hfnz9amnnvLVpaoaERHhm7QWERGhqqq33Xabbtu2TVVV77jjDt2+fXuG9kZERGjLli01IiJCGzdurD179sy0vtq1a/uuM2TIEF2yZIkePXpU27Ztq6qqbdq00YMHD2pycrK2atVKT548qTfddJMeOnRI586dqy+//LKv3i1btmifPn1UVTU5OTlHn21AiIhIv40e7Y4dPZrx8fHj3fE9mf8mFi1apJdccolGRERoRESErlixQp9++mldtGiRqrr3/Mcff/g+b9XU3+eaNWv0xIkTev755+tff/2l8fHx2rFjR49Z7rvZvHmz9ujRw3eO9zfQp08f3bx5s7722mv68ccfq6pqv379dPny5Tp+/Hh94IEHVFW1f//+um7dugztf/bZZ/Wbb77Rrl276pgxY3TOnDm+31bnzp11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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["INF , Market: 2 , Dimemtion:Small\n","Firm &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\n","\\hline\n","A&W &1970 Q3&  0.0672 (0.2512) &   0.0700 (0.2556)    &2004 Q3&  0.2537 (0.4699) &   0.1794 (0.3969)\\\\\n","Burger King &1970 Q3&  0.0149 (0.1217) &   0.0193 (0.1380)    &2004 Q3&  0.1343 (0.3423) &   0.1584 (0.3769)\\\\\n","Harvey's &1970 Q3&  0.0896 (0.2866) &   0.0930 (0.2911)    &2004 Q3&  0.1940 (0.4332) &   0.1810 (0.3994)\\\\\n","Wendy's &1970 Q3&  0.0000 (0.0000) &   0.0042 (0.0650)    &2004 Q3&  0.1791 (0.4039) &   0.1581 (0.3757)\\\\\n","McDonald's &1970 Q3&  0.0224 (0.1485) &   0.0336 (0.1804)    &2004 Q3&  0.7612 (0.6510) &   0.7905 (0.6379)\\\\\n","########################################################################\n","INF , Market: 3 , Dimemtion:Small\n","########################################################################\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-4-9c721082b3f9>:9: DeprecationWarning: setting an array element with a sequence. This was supported in some cases where the elements are arrays with a single element. For example `np.array([1, np.array([2])], dtype=int)`. In the future this will raise the same ValueError as `np.array([1, [2]], dtype=int)`.\n","  obser[:,0] = [obser_val,1-obser_val]\n","100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 139/139 [00:04<00:00, 31.36it/s]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["INF , Market: 3 , Dimemtion:Small\n","Firm &  Year &  True Mean (std) & Estimation Mean (std)&  Year &  True Mean (std) & Estimation Mean (std)\\\\\n","\\hline\n","A&W &1970 Q3&  0.1579 (0.3862) &   0.1651 (0.3944)    &2004 Q3&  0.6015 (0.7171) &   0.5136 (0.6780)\\\\\n","Burger King &1970 Q3&  0.0226 (0.1490) &   0.0316 (0.1760)    &2004 Q3&  0.3684 (0.5291) &   0.4625 (0.6524)\\\\\n","Harvey's &1970 Q3&  0.1353 (0.3434) &   0.1429 (0.3534)    &2004 Q3&  0.3835 (0.5995) &   0.5122 (0.6752)\\\\\n","Wendy's &1970 Q3&  0.0000 (0.0000) &   0.0089 (0.0941)    &2004 Q3&  0.3684 (0.4996) &   0.4452 (0.6404)\\\\\n","McDonald's &1970 Q3&  0.0376 (0.1909) &   0.0664 (0.2529)    &2004 Q3&  1.5113 (0.8222) &   1.4365 (0.7132)\\\\\n"]}]},{"cell_type":"code","source":["# N1_true = Ni_mcd.reshape([-1,TimeLength])\n","# N1_est = np.mean(ostate1.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","# N2_true = Ni_aw.reshape([-1,TimeLength])\n","# N2_est = np.mean(ostate2.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","# N3_true = Ni_bk.reshape([-1,TimeLength])\n","# N3_est = np.mean(ostate3.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","# N4_true = Ni_hvy.reshape([-1,TimeLength])\n","# N4_est = np.mean(ostate4.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","# N5_true = Ni_wdy.reshape([-1,TimeLength])\n","# N5_est = np.mean(ostate5.reshape([TimeLength,MTsub,NFull]),axis=2).T\n","\n","\n","# # for t in range(TimeLength):\n","# #   if t%4 ==3:\n","# #     print(t/4+1970,np.corrcoef(a1_true[:,t],a1_est[:,t])[0,1],\n","# #           np.corrcoef(a2_true[:,t],a2_est[:,t])[0,1],\n","# #           np.corrcoef(a3_true[:,t],a3_est[:,t])[0,1],\n","# #           np.corrcoef(a4_true[:,t],a4_est[:,t])[0,1],\n","# #           np.corrcoef(a5_true[:,t],a5_est[:,t])[0,1])\n","# for t in range(TimeLength):\n","#   #if t%4 ==3:\n","#     print(t/4+1970,np.corrcoef(N1_true[:,t],N1_est[:,t])[0,1],\n","#           np.corrcoef(N2_true[:,t],N2_est[:,t])[0,1],\n","#           np.corrcoef(N3_true[:,t],N3_est[:,t])[0,1],\n","#           np.corrcoef(N4_true[:,t],N4_est[:,t])[0,1],\n","#           np.corrcoef(N5_true[:,t],N5_est[:,t])[0,1])"],"metadata":{"id":"g0wO8T6--qmD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# a1_true_full = np.stack([ai_mcd for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# a1_est_full = action1.T\n","# a2_true_full = np.stack([ai_aw for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# a2_est_full = action2.T\n","# a3_true_full = np.stack([ai_bk for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# a3_est_full = action3.T\n","# a4_true_full = np.stack([ai_hvy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# a4_est_full = action4.T\n","# a5_true_full = np.stack([ai_wdy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# a5_est_full =action5.T\n","\n","\n","# for t in range(TimeLength):\n","#   if t%4 ==3:\n","#     print(t/4+1970,np.corrcoef(a1_true_full[:,t],a1_est_full[:,t])[0,1],\n","#           np.corrcoef(a2_true_full[:,t],a2_est_full[:,t])[0,1],\n","#           np.corrcoef(a3_true_full[:,t],a3_est_full[:,t])[0,1],\n","#           np.corrcoef(a4_true_full[:,t],a4_est_full[:,t])[0,1],\n","#           np.corrcoef(a5_true_full[:,t],a5_est_full[:,t])[0,1])\n"],"metadata":{"id":"K3YIQFfpBlNF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# N1_true_full = np.stack([Ni_mcd for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# N1_est_full = ostate1.T\n","# N2_true_full = np.stack([Ni_aw for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# N2_est_full = ostate2.T\n","# N3_true_full = np.stack([Ni_bk for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# N3_est_full = ostate3.T\n","# N4_true_full = np.stack([Ni_hvy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# N4_est_full = ostate4.T\n","# N5_true_full = np.stack([Ni_wdy for i in range (NFull)], axis=1).reshape([-1,TimeLength])\n","# N5_est_full =ostate5.T\n","\n","\n","# for t in range(TimeLength):\n","#   #if t%4 ==3:\n","#     print(t/4+1970,np.corrcoef(N1_true_full[:,t],N1_est_full[:,t])[0,1],\n","#           np.corrcoef(N2_true_full[:,t],N2_est_full[:,t])[0,1],\n","#           np.corrcoef(N3_true_full[:,t],N3_est_full[:,t])[0,1],\n","#           np.corrcoef(N4_true_full[:,t],N4_est_full[:,t])[0,1],\n","#           np.corrcoef(N5_true_full[:,t],N5_est_full[:,t])[0,1])\n"],"metadata":{"id":"2e_88RL4C7Bz"},"execution_count":null,"outputs":[]}]}